        -:    0:Source:/home/travis/build/GITSUNWW/node-fontnik/mason_packages/.link/include/boost/geometry/index/detail/rtree/node/pairs.hpp
        -:    0:Graph:/home/travis/build/GITSUNWW/node-fontnik/build/Debug/obj.target/fontnik/src/glyphs.gcno
        -:    0:Data:/home/travis/build/GITSUNWW/node-fontnik/build/Debug/obj.target/fontnik/src/glyphs.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Boost.Geometry Index
        -:    2://
        -:    3:// Pairs intended to be used internally in nodes.
        -:    4://
        -:    5:// Copyright (c) 2011-2013 Adam Wulkiewicz, Lodz, Poland.
        -:    6://
        -:    7:// Use, modification and distribution is subject to the Boost Software License,
        -:    8:// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
        -:    9:// http://www.boost.org/LICENSE_1_0.txt)
        -:   10:
        -:   11:#ifndef BOOST_GEOMETRY_INDEX_DETAIL_RTREE_NODE_PAIRS_HPP
        -:   12:#define BOOST_GEOMETRY_INDEX_DETAIL_RTREE_NODE_PAIRS_HPP
        -:   13:
        -:   14:#include <boost/move/move.hpp>
        -:   15:
        -:   16:namespace boost { namespace geometry { namespace index {
        -:   17:
        -:   18:namespace detail { namespace rtree {
        -:   19:
        -:   20:template <typename First, typename Pointer>
        -:   21:class ptr_pair
        -:   22:{
        -:   23:public:
        -:   24:    typedef First first_type;
        -:   25:    typedef Pointer second_type;
function _ZN5boost8geometry5index6detail5rtree8ptr_pairINS0_5model3boxINS5_5pointIfLm2ENS0_2cs9cartesianEEEEEPNS_7variantINS3_12variant_leafISt4pairISB_SE_ISA_SA_EENS1_5rstarILm16ELm4ELm4ELm32EEESB_NS3_10allocatorsINS_9container13new_allocatorISG_EESG_SI_SB_NS3_23node_variant_static_tagEEESN_EEJNS3_21variant_internal_nodeISG_SI_SB_SO_SN_EEEEEEC2ERKSB_ST_ called 6276 returned 100% blocks executed 100%
     6276:   26:    ptr_pair(First const& f, Pointer s) : first(f), second(s) {}
        -:   27:    //ptr_pair(ptr_pair const& p) : first(p.first), second(p.second) {}
        -:   28:    //ptr_pair & operator=(ptr_pair const& p) { first = p.first; second = p.second; return *this; }
        -:   29:
        -:   30:    first_type first;
        -:   31:    second_type second;
        -:   32:};
        -:   33:
        -:   34:template <typename First, typename Pointer> inline
        -:   35:ptr_pair<First, Pointer>
function _ZN5boost8geometry5index6detail5rtree13make_ptr_pairINS0_5model3boxINS5_5pointIfLm2ENS0_2cs9cartesianEEEEEPNS_7variantINS3_12variant_leafISt4pairISB_SE_ISA_SA_EENS1_5rstarILm16ELm4ELm4ELm32EEESB_NS3_10allocatorsINS_9container13new_allocatorISG_EESG_SI_SB_NS3_23node_variant_static_tagEEESN_EEJNS3_21variant_internal_nodeISG_SI_SB_SO_SN_EEEEEEENS3_8ptr_pairIT_T0_EERKSV_SW_ called 6276 returned 100% blocks executed 100%
     6276:   36:make_ptr_pair(First const& f, Pointer s)
        -:   37:{
     6276:   38:    return ptr_pair<First, Pointer>(f, s);
        -:   39:}
        -:   40:
        -:   41:// TODO: It this will be used, rename it to unique_ptr_pair and possibly use unique_ptr.
        -:   42:
        -:   43:template <typename First, typename Pointer>
        -:   44:class exclusive_ptr_pair
        -:   45:{
        -:   46:    BOOST_MOVABLE_BUT_NOT_COPYABLE(exclusive_ptr_pair)
        -:   47:public:
        -:   48:    typedef First first_type;
        -:   49:    typedef Pointer second_type;
        -:   50:    exclusive_ptr_pair(First const& f, Pointer s) : first(f), second(s) {}
        -:   51:
        -:   52:    // INFO - members aren't really moved!
        -:   53:    exclusive_ptr_pair(BOOST_RV_REF(exclusive_ptr_pair) p) : first(p.first), second(p.second) { p.second = 0; }
        -:   54:    exclusive_ptr_pair & operator=(BOOST_RV_REF(exclusive_ptr_pair) p) { first = p.first; second = p.second; p.second = 0; return *this; }
        -:   55:
        -:   56:    first_type first;
        -:   57:    second_type second;
        -:   58:};
        -:   59:
        -:   60:template <typename First, typename Pointer> inline
        -:   61:exclusive_ptr_pair<First, Pointer>
        -:   62:make_exclusive_ptr_pair(First const& f, Pointer s)
        -:   63:{
        -:   64:    return exclusive_ptr_pair<First, Pointer>(f, s);
        -:   65:}
        -:   66:
        -:   67:}} // namespace detail::rtree
        -:   68:
        -:   69:}}} // namespace boost::geometry::index
        -:   70:
        -:   71:#endif // BOOST_GEOMETRY_INDEX_DETAIL_RTREE_NODE_PAIRS_HPP
