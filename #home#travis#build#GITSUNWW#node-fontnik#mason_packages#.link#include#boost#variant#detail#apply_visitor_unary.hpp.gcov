        -:    0:Source:/home/travis/build/GITSUNWW/node-fontnik/mason_packages/.link/include/boost/variant/detail/apply_visitor_unary.hpp
        -:    0:Graph:/home/travis/build/GITSUNWW/node-fontnik/build/Debug/obj.target/fontnik/src/glyphs.gcno
        -:    0:Data:/home/travis/build/GITSUNWW/node-fontnik/build/Debug/obj.target/fontnik/src/glyphs.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://-----------------------------------------------------------------------------
        -:    2:// boost variant/detail/apply_visitor_unary.hpp header file
        -:    3:// See http://www.boost.org for updates, documentation, and revision history.
        -:    4://-----------------------------------------------------------------------------
        -:    5://
        -:    6:// Copyright (c) 2002-2003 Eric Friedman
        -:    7:// Copyright (c) 2014 Antony Polukhin
        -:    8://
        -:    9:// Distributed under the Boost Software License, Version 1.0. (See
        -:   10:// accompanying file LICENSE_1_0.txt or copy at
        -:   11:// http://www.boost.org/LICENSE_1_0.txt)
        -:   12:
        -:   13:#ifndef BOOST_VARIANT_DETAIL_APPLY_VISITOR_UNARY_HPP
        -:   14:#define BOOST_VARIANT_DETAIL_APPLY_VISITOR_UNARY_HPP
        -:   15:
        -:   16:#include <boost/config.hpp>
        -:   17:#include <boost/detail/workaround.hpp>
        -:   18:#include <boost/variant/detail/generic_result_type.hpp>
        -:   19:#include <boost/move/utility.hpp>
        -:   20:
        -:   21:#if BOOST_WORKAROUND(__EDG__, BOOST_TESTED_AT(302))
        -:   22:#include <boost/core/enable_if.hpp>
        -:   23:#include <boost/mpl/not.hpp>
        -:   24:#include <boost/type_traits/is_const.hpp>
        -:   25:#include <boost/type_traits/remove_reference.hpp>
        -:   26:#endif
        -:   27:
        -:   28:#if !defined(BOOST_NO_CXX14_DECLTYPE_AUTO) && !defined(BOOST_NO_CXX11_DECLTYPE_N3276)
        -:   29:#   include <boost/mpl/distance.hpp>
        -:   30:#   include <boost/mpl/advance.hpp>
        -:   31:#   include <boost/mpl/deref.hpp>
        -:   32:#   include <boost/mpl/size.hpp>
        -:   33:#   include <boost/utility/declval.hpp>
        -:   34:#   include <boost/core/enable_if.hpp>
        -:   35:#   include <boost/variant/detail/has_result_type.hpp>
        -:   36:#endif
        -:   37:
        -:   38:namespace boost {
        -:   39:
        -:   40://////////////////////////////////////////////////////////////////////////
        -:   41:// function template apply_visitor(visitor, visitable)
        -:   42://
        -:   43:// Visits visitable with visitor.
        -:   44://
        -:   45:
        -:   46://
        -:   47:// nonconst-visitor version:
        -:   48://
        -:   49:
        -:   50:#if !BOOST_WORKAROUND(__EDG__, BOOST_TESTED_AT(302))
        -:   51:
        -:   52:#   define BOOST_VARIANT_AUX_APPLY_VISITOR_NON_CONST_RESULT_TYPE(V) \
        -:   53:    BOOST_VARIANT_AUX_GENERIC_RESULT_TYPE(typename V::result_type) \
        -:   54:    /**/
        -:   55:
        -:   56:#else // EDG-based compilers
        -:   57:
        -:   58:#   define BOOST_VARIANT_AUX_APPLY_VISITOR_NON_CONST_RESULT_TYPE(V) \
        -:   59:    typename enable_if< \
        -:   60:          mpl::not_< is_const< V > > \
        -:   61:        , BOOST_VARIANT_AUX_GENERIC_RESULT_TYPE(typename V::result_type) \
        -:   62:        >::type \
        -:   63:    /**/
        -:   64:
        -:   65:#endif // EDG-based compilers workaround
        -:   66:
        -:   67:#ifndef BOOST_NO_CXX11_RVALUE_REFERENCES
        -:   68:template <typename Visitor, typename Visitable>
        -:   69:inline
        -:   70:    BOOST_VARIANT_AUX_APPLY_VISITOR_NON_CONST_RESULT_TYPE(Visitor)
function _ZN5boost13apply_visitorINS_8geometry5index6detail5rtree8visitors13spatial_queryISt4pairINS1_5model3boxINS8_5pointIfLm2ENS1_2cs9cartesianEEEEES7_ISD_SD_EENS4_7optionsINS2_5rstarILm16ELm4ELm4ELm32EEENS4_19insert_reinsert_tagENS4_26choose_by_overlap_diff_tagENS4_17split_default_tagENS4_9rstar_tagENS4_23node_variant_static_tagEEENS3_10translatorINS2_9indexableISG_EENS2_8equal_toISG_EEEESE_NS4_10allocatorsINS_9container13new_allocatorISG_EESG_SJ_SE_SO_EENS3_10predicates17spatial_predicateISE_NS11_14intersects_tagELb0EEESt20back_insert_iteratorISt6vectorISG_SaISG_EEEEERNS_7variantINS4_12variant_leafISG_SJ_SE_S10_SO_EEJNS4_21variant_internal_nodeISG_SJ_SE_S10_SO_EEEEEEENT_11result_typeERS1I_OT0_ called 2603630 returned 100% blocks executed 100%
function _ZN5boost13apply_visitorINS_8geometry5index6detail5rtree8visitors7destroyISt4pairINS1_5model3boxINS8_5pointIfLm2ENS1_2cs9cartesianEEEEES7_ISD_SD_EENS4_7optionsINS2_5rstarILm16ELm4ELm4ELm32EEENS4_19insert_reinsert_tagENS4_26choose_by_overlap_diff_tagENS4_17split_default_tagENS4_9rstar_tagENS4_23node_variant_static_tagEEENS3_10translatorINS2_9indexableISG_EENS2_8equal_toISG_EEEESE_NS4_10allocatorsINS_9container13new_allocatorISG_EESG_SJ_SE_SO_EEEERNS_7variantINS4_12variant_leafISG_SJ_SE_S10_SO_EEJNS4_21variant_internal_nodeISG_SJ_SE_S10_SO_EEEEEEENT_11result_typeERS19_OT0_ called 7950 returned 100% blocks executed 100%
function _ZN5boost13apply_visitorINS_8geometry5index6detail5rtree8visitors6insertISt4pairINS1_5model3boxINS8_5pointIfLm2ENS1_2cs9cartesianEEEEES7_ISD_SD_EESG_NS4_7optionsINS2_5rstarILm16ELm4ELm4ELm32EEENS4_19insert_reinsert_tagENS4_26choose_by_overlap_diff_tagENS4_17split_default_tagENS4_9rstar_tagENS4_23node_variant_static_tagEEENS3_10translatorINS2_9indexableISG_EENS2_8equal_toISG_EEEESE_NS4_10allocatorsINS_9container13new_allocatorISG_EESG_SJ_SE_SO_EESK_EERNS_7variantINS4_12variant_leafISG_SJ_SE_S10_SO_EEJNS4_21variant_internal_nodeISG_SJ_SE_S10_SO_EEEEEEENT_11result_typeERS19_OT0_ called 68008 returned 100% blocks executed 100%
function _ZN5boost13apply_visitorINS_8geometry5index6detail5rtree8visitors5rstar12level_insertILm0ESt4pairINS1_5model3boxINS9_5pointIfLm2ENS1_2cs9cartesianEEEEES8_ISE_SE_EESH_NS4_7optionsINS2_5rstarILm16ELm4ELm4ELm32EEENS4_19insert_reinsert_tagENS4_26choose_by_overlap_diff_tagENS4_17split_default_tagENS4_9rstar_tagENS4_23node_variant_static_tagEEENS3_10translatorINS2_9indexableISH_EENS2_8equal_toISH_EEEESF_NS4_10allocatorsINS_9container13new_allocatorISH_EESH_SK_SF_SP_EEEERNS_7variantINS4_12variant_leafISH_SK_SF_S11_SP_EEJNS4_21variant_internal_nodeISH_SK_SF_S11_SP_EEEEEEENT_11result_typeERS1A_OT0_ called 109950 returned 100% blocks executed 100%
function _ZN5boost13apply_visitorINS_8geometry5index6detail5rtree8visitors6insertISt4pairINS1_5model3boxINS8_5pointIfLm2ENS1_2cs9cartesianEEEEES7_ISD_SD_EESG_NS4_7optionsINS2_5rstarILm16ELm4ELm4ELm32EEENS4_19insert_reinsert_tagENS4_26choose_by_overlap_diff_tagENS4_17split_default_tagENS4_9rstar_tagENS4_23node_variant_static_tagEEENS3_10translatorINS2_9indexableISG_EENS2_8equal_toISG_EEEESE_NS4_10allocatorsINS_9container13new_allocatorISG_EESG_SJ_SE_SO_EENS4_18insert_default_tagEEERNS_7variantINS4_12variant_leafISG_SJ_SE_S10_SO_EEJNS4_21variant_internal_nodeISG_SJ_SE_S10_SO_EEEEEEENT_11result_typeERS1A_OT0_ called 0 returned 0% blocks executed 0%
function _ZN5boost13apply_visitorINS_8geometry5index6detail5rtree8visitors5rstar12level_insertILm1ESt4pairINS1_5model3boxINS9_5pointIfLm2ENS1_2cs9cartesianEEEEES8_ISE_SE_EESH_NS4_7optionsINS2_5rstarILm16ELm4ELm4ELm32EEENS4_19insert_reinsert_tagENS4_26choose_by_overlap_diff_tagENS4_17split_default_tagENS4_9rstar_tagENS4_23node_variant_static_tagEEENS3_10translatorINS2_9indexableISH_EENS2_8equal_toISH_EEEESF_NS4_10allocatorsINS_9container13new_allocatorISH_EESH_SK_SF_SP_EEEERNS_7variantINS4_12variant_leafISH_SK_SF_S11_SP_EEJNS4_21variant_internal_nodeISH_SK_SF_S11_SP_EEEEEEENT_11result_typeERS1A_OT0_ called 43176 returned 100% blocks executed 100%
function _ZN5boost13apply_visitorINS_8geometry5index6detail5rtree8visitors5rstar12level_insertILm1ENS4_8ptr_pairINS1_5model3boxINS9_5pointIfLm2ENS1_2cs9cartesianEEEEEPNS_7variantINS4_12variant_leafISt4pairISF_SI_ISE_SE_EENS2_5rstarILm16ELm4ELm4ELm32EEESF_NS4_10allocatorsINS_9container13new_allocatorISK_EESK_SM_SF_NS4_23node_variant_static_tagEEESR_EEJNS4_21variant_internal_nodeISK_SM_SF_SS_SR_EEEEEEESK_NS4_7optionsISM_NS4_19insert_reinsert_tagENS4_26choose_by_overlap_diff_tagENS4_17split_default_tagENS4_9rstar_tagESR_EENS3_10translatorINS2_9indexableISK_EENS2_8equal_toISK_EEEESF_SS_EERSW_EENT_11result_typeERS1D_OT0_ called 0 returned 0% blocks executed 0%
  2832714:   71:apply_visitor(Visitor& visitor, Visitable&& visitable)
        -:   72:{
  2832714:   73:    return ::boost::forward<Visitable>(visitable).apply_visitor(visitor);
        -:   74:}
        -:   75:#else
        -:   76:template <typename Visitor, typename Visitable>
        -:   77:inline
        -:   78:    BOOST_VARIANT_AUX_APPLY_VISITOR_NON_CONST_RESULT_TYPE(Visitor)
        -:   79:apply_visitor(Visitor& visitor, Visitable& visitable)
        -:   80:{
        -:   81:    return visitable.apply_visitor(visitor);
        -:   82:}
        -:   83:#endif
        -:   84:
        -:   85:#undef BOOST_VARIANT_AUX_APPLY_VISITOR_NON_CONST_RESULT_TYPE
        -:   86:
        -:   87://
        -:   88:// const-visitor version:
        -:   89://
        -:   90:
        -:   91:#ifndef BOOST_NO_CXX11_RVALUE_REFERENCES
        -:   92:template <typename Visitor, typename Visitable>
        -:   93:inline
        -:   94:    BOOST_VARIANT_AUX_GENERIC_RESULT_TYPE(typename Visitor::result_type)
        -:   95:apply_visitor(const Visitor& visitor, Visitable&& visitable)
        -:   96:{
        -:   97:    return ::boost::forward<Visitable>(visitable).apply_visitor(visitor);
        -:   98:}
        -:   99:#else
        -:  100:template <typename Visitor, typename Visitable>
        -:  101:inline
        -:  102:    BOOST_VARIANT_AUX_GENERIC_RESULT_TYPE(typename Visitor::result_type)
        -:  103:apply_visitor(const Visitor& visitor, Visitable& visitable)
        -:  104:{
        -:  105:    return visitable.apply_visitor(visitor);
        -:  106:}
        -:  107:#endif
        -:  108:
        -:  109:
        -:  110:#if !defined(BOOST_NO_CXX14_DECLTYPE_AUTO) && !defined(BOOST_NO_CXX11_DECLTYPE_N3276)
        -:  111:
        -:  112:// C++14
        -:  113:namespace detail { namespace variant {
        -:  114:
        -:  115:// This class serves only metaprogramming purposes. none of its methods must be called at runtime!
        -:  116:template <class Visitor, class Variant>
        -:  117:struct result_multideduce1 {
        -:  118:    typedef typename Variant::types                 types;
        -:  119:    typedef typename boost::mpl::begin<types>::type begin_it;
        -:  120:    typedef typename boost::mpl::advance<
        -:  121:        begin_it, boost::mpl::int_<boost::mpl::size<types>::type::value - 1>
        -:  122:    >::type                                         last_it;
        -:  123:
        -:  124:    // For metaprogramming purposes ONLY! Do not use this method (and class) at runtime!
        -:  125:    static Visitor& vis() BOOST_NOEXCEPT {
        -:  126:        // Functions that work with lambdas must be defined in same translation unit.
        -:  127:        // Because of that, we can not use `boost::decval<Visitor&>()` here.
        -:  128:        Visitor&(*f)() = 0; // pointer to function
        -:  129:        return f();
        -:  130:    }
        -:  131:
        -:  132:    static decltype(auto) deduce_impl(last_it, unsigned /*helper*/) {
        -:  133:        typedef typename boost::mpl::deref<last_it>::type value_t;
        -:  134:        return vis()( boost::declval< value_t& >() );
        -:  135:    }
        -:  136:
        -:  137:    template <class It>
        -:  138:    static decltype(auto) deduce_impl(It, unsigned helper) {
        -:  139:        typedef typename boost::mpl::next<It>::type next_t;
        -:  140:        typedef typename boost::mpl::deref<It>::type value_t;
        -:  141:        if (helper == boost::mpl::distance<begin_it, It>::type::value) {
        -:  142:            return deduce_impl(next_t(), ++helper);
        -:  143:        }
        -:  144:
        -:  145:        return vis()( boost::declval< value_t& >() );
        -:  146:    }
        -:  147:
        -:  148:    static decltype(auto) deduce() {
        -:  149:        return deduce_impl(begin_it(), 0);
        -:  150:    }
        -:  151:};
        -:  152:
        -:  153:template <class Visitor, class Variant>
        -:  154:struct result_wrapper1
        -:  155:{
        -:  156:    typedef decltype(result_multideduce1<Visitor, Variant>::deduce()) result_type;
        -:  157:
        -:  158:    Visitor&& visitor_;
        -:  159:    explicit result_wrapper1(Visitor&& visitor) BOOST_NOEXCEPT
        -:  160:        : visitor_(::boost::forward<Visitor>(visitor))
        -:  161:    {}
        -:  162:
        -:  163:    template <class T>
        -:  164:    result_type operator()(T&& val) const {
        -:  165:        return visitor_(::boost::forward<T>(val));
        -:  166:    }
        -:  167:};
        -:  168:
        -:  169:}} // namespace detail::variant
        -:  170:
        -:  171:template <typename Visitor, typename Visitable>
        -:  172:inline decltype(auto) apply_visitor(Visitor&& visitor, Visitable&& visitable,
        -:  173:    typename boost::disable_if<
        -:  174:        boost::detail::variant::has_result_type<Visitor>
        -:  175:    >::type* = 0)
        -:  176:{
        -:  177:    boost::detail::variant::result_wrapper1<Visitor, typename remove_reference<Visitable>::type> cpp14_vis(::boost::forward<Visitor>(visitor));
        -:  178:    return ::boost::forward<Visitable>(visitable).apply_visitor(cpp14_vis);
        -:  179:}
        -:  180:
        -:  181:#endif // !defined(BOOST_NO_CXX14_DECLTYPE_AUTO) && !defined(BOOST_NO_CXX11_DECLTYPE_N3276)
        -:  182:
        -:  183:} // namespace boost
        -:  184:
        -:  185:#endif // BOOST_VARIANT_DETAIL_APPLY_VISITOR_UNARY_HPP
