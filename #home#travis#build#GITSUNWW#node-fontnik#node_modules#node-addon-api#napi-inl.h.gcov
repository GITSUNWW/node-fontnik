        -:    0:Source:/home/travis/build/GITSUNWW/node-fontnik/node_modules/node-addon-api/napi-inl.h
        -:    0:Graph:/home/travis/build/GITSUNWW/node-fontnik/build/Debug/obj.target/fontnik/src/glyphs.gcno
        -:    0:Data:/home/travis/build/GITSUNWW/node-fontnik/build/Debug/obj.target/fontnik/src/glyphs.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#ifndef SRC_NAPI_INL_H_
        -:    2:#define SRC_NAPI_INL_H_
        -:    3:
        -:    4:////////////////////////////////////////////////////////////////////////////////
        -:    5:// N-API C++ Wrapper Classes
        -:    6://
        -:    7:// Inline header-only implementations for "N-API" ABI-stable C APIs for Node.js.
        -:    8:////////////////////////////////////////////////////////////////////////////////
        -:    9:
        -:   10:// Note: Do not include this file directly! Include "napi.h" instead.
        -:   11:
        -:   12:#include <algorithm>
        -:   13:#include <cstring>
        -:   14:#include <mutex>
        -:   15:#include <type_traits>
        -:   16:
        -:   17:namespace Napi {
        -:   18:
        -:   19:// Helpers to handle functions exposed from C++.
        -:   20:namespace details {
        -:   21:
        -:   22:// Attach a data item to an object and delete it when the object gets
        -:   23:// garbage-collected.
        -:   24:// TODO: Replace this code with `napi_add_finalizer()` whenever it becomes
        -:   25:// available on all supported versions of Node.js.
        -:   26:template <typename FreeType>
        -:   27:static inline napi_status AttachData(napi_env env,
        -:   28:                                     napi_value obj,
        -:   29:                                     FreeType* data,
        -:   30:                                     napi_finalize finalizer = nullptr,
        -:   31:                                     void* hint = nullptr) {
        -:   32:  napi_status status;
        -:   33:  if (finalizer == nullptr) {
        -:   34:    finalizer = [](napi_env /*env*/, void* data, void* /*hint*/) {
        -:   35:      delete static_cast<FreeType*>(data);
        -:   36:    };
        -:   37:  }
        -:   38:#if (NAPI_VERSION < 5)
        -:   39:  napi_value symbol, external;
        -:   40:  status = napi_create_symbol(env, nullptr, &symbol);
        -:   41:  if (status == napi_ok) {
        -:   42:    status = napi_create_external(env,
        -:   43:                              data,
        -:   44:                              finalizer,
        -:   45:                              hint,
        -:   46:                              &external);
        -:   47:    if (status == napi_ok) {
        -:   48:      napi_property_descriptor desc = {
        -:   49:        nullptr,
        -:   50:        symbol,
        -:   51:        nullptr,
        -:   52:        nullptr,
        -:   53:        nullptr,
        -:   54:        external,
        -:   55:        napi_default,
        -:   56:        nullptr
        -:   57:      };
        -:   58:      status = napi_define_properties(env, obj, 1, &desc);
        -:   59:    }
        -:   60:  }
        -:   61:#else  // NAPI_VERSION >= 5
        -:   62:  status = napi_add_finalizer(env, obj, data, finalizer, hint, nullptr);
        -:   63:#endif
        -:   64:  return status;
        -:   65:}
        -:   66:
        -:   67:// For use in JS to C++ callback wrappers to catch any Napi::Error exceptions
        -:   68:// and rethrow them as JavaScript exceptions before returning from the callback.
        -:   69:template <typename Callable>
function _ZN4Napi7details12WrapCallbackIZNS_11AsyncWorker14OnWorkCompleteEP10napi_env__11napi_statusPvEUlvE_EEP12napi_value__T_ called 278 returned 99% blocks executed 61%
      278:   70:inline napi_value WrapCallback(Callable callback) {
        -:   71:#ifdef NAPI_CPP_EXCEPTIONS
        -:   72:  try {
      278:   73:    return callback();
branch  0 taken 99%
branch  1 taken 1%
        1:   74:  } catch (const Error& e) {
branch  0 taken 100%
branch  1 taken 0%
        1:   75:    e.ThrowAsJavaScriptException();
branch  0 taken 100%
branch  1 taken 0%
        1:   76:    return nullptr;
        1:   77:  }
branch  0 never executed
branch  1 never executed
        -:   78:#else // NAPI_CPP_EXCEPTIONS
        -:   79:  // When C++ exceptions are disabled, errors are immediately thrown as JS
        -:   80:  // exceptions, so there is no need to catch and rethrow them here.
        -:   81:  return callback();
        -:   82:#endif // NAPI_CPP_EXCEPTIONS
      278:   83:}
        -:   84:
        -:   85:template <typename Callable, typename Return>
        -:   86:struct CallbackData {
        -:   87:  static inline
        -:   88:  napi_value Wrapper(napi_env env, napi_callback_info info) {
        -:   89:    return details::WrapCallback([&] {
        -:   90:      CallbackInfo callbackInfo(env, info);
        -:   91:      CallbackData* callbackData =
        -:   92:        static_cast<CallbackData*>(callbackInfo.Data());
        -:   93:      callbackInfo.SetData(callbackData->data);
        -:   94:      return callbackData->callback(callbackInfo);
        -:   95:    });
        -:   96:  }
        -:   97:
        -:   98:  Callable callback;
        -:   99:  void* data;
        -:  100:};
        -:  101:
        -:  102:template <typename Callable>
        -:  103:struct CallbackData<Callable, void> {
        -:  104:  static inline
        -:  105:  napi_value Wrapper(napi_env env, napi_callback_info info) {
        -:  106:    return details::WrapCallback([&] {
        -:  107:      CallbackInfo callbackInfo(env, info);
        -:  108:      CallbackData* callbackData =
        -:  109:        static_cast<CallbackData*>(callbackInfo.Data());
        -:  110:      callbackInfo.SetData(callbackData->data);
        -:  111:      callbackData->callback(callbackInfo);
        -:  112:      return nullptr;
        -:  113:    });
        -:  114:  }
        -:  115:
        -:  116:  Callable callback;
        -:  117:  void* data;
        -:  118:};
        -:  119:
        -:  120:template <typename T, typename Finalizer, typename Hint = void>
        -:  121:struct FinalizeData {
        -:  122:  static inline
        -:  123:  void Wrapper(napi_env env, void* data, void* finalizeHint) {
        -:  124:    FinalizeData* finalizeData = static_cast<FinalizeData*>(finalizeHint);
        -:  125:    finalizeData->callback(Env(env), static_cast<T*>(data));
        -:  126:    delete finalizeData;
        -:  127:  }
        -:  128:
        -:  129:  static inline
function _ZN4Napi7details12FinalizeDataIcZN12node_fontnik14AsyncComposite9GetResultENS_3EnvEEUlS4_PcPSsE_SsE15WrapperWithHintEP10napi_env__PvSB_ called 0 returned 0% blocks executed 0%
    #####:  130:  void WrapperWithHint(napi_env env, void* data, void* finalizeHint) {
    #####:  131:    FinalizeData* finalizeData = static_cast<FinalizeData*>(finalizeHint);
    #####:  132:    finalizeData->callback(Env(env), static_cast<T*>(data), finalizeData->hint);
    #####:  133:    delete finalizeData;
branch  0 never executed
branch  1 never executed
    #####:  134:  }
        -:  135:
        -:  136:  Finalizer callback;
        -:  137:  Hint* hint;
        -:  138:};
        -:  139:
        -:  140:#if (NAPI_VERSION > 3)
        -:  141:template <typename ContextType=void,
        -:  142:          typename Finalizer=std::function<void(Env, void*, ContextType*)>,
        -:  143:          typename FinalizerDataType=void>
        -:  144:struct ThreadSafeFinalize {
        -:  145:  static inline
        -:  146:  void Wrapper(napi_env env, void* rawFinalizeData, void* /* rawContext */) {
        -:  147:    if (rawFinalizeData == nullptr)
        -:  148:      return;
        -:  149:
        -:  150:    ThreadSafeFinalize* finalizeData =
        -:  151:        static_cast<ThreadSafeFinalize*>(rawFinalizeData);
        -:  152:    finalizeData->callback(Env(env));
        -:  153:    if (finalizeData->tsfn) {
        -:  154:      *finalizeData->tsfn = nullptr;
        -:  155:    }
        -:  156:    delete finalizeData;
        -:  157:  }
        -:  158:
        -:  159:  static inline
        -:  160:  void FinalizeWrapperWithData(napi_env env,
        -:  161:                               void* rawFinalizeData,
        -:  162:                               void* /* rawContext */) {
        -:  163:    if (rawFinalizeData == nullptr)
        -:  164:      return;
        -:  165:
        -:  166:    ThreadSafeFinalize* finalizeData =
        -:  167:        static_cast<ThreadSafeFinalize*>(rawFinalizeData);
        -:  168:    finalizeData->callback(Env(env), finalizeData->data);
        -:  169:    if (finalizeData->tsfn) {
        -:  170:      *finalizeData->tsfn = nullptr;
        -:  171:    }
        -:  172:    delete finalizeData;
        -:  173:  }
        -:  174:
        -:  175:  static inline
        -:  176:  void FinalizeWrapperWithContext(napi_env env,
        -:  177:                                  void* rawFinalizeData,
        -:  178:                                  void* rawContext) {
        -:  179:    if (rawFinalizeData == nullptr)
        -:  180:      return;
        -:  181:
        -:  182:    ThreadSafeFinalize* finalizeData =
        -:  183:        static_cast<ThreadSafeFinalize*>(rawFinalizeData);
        -:  184:    finalizeData->callback(Env(env), static_cast<ContextType*>(rawContext));
        -:  185:    if (finalizeData->tsfn) {
        -:  186:      *finalizeData->tsfn = nullptr;
        -:  187:    }
        -:  188:    delete finalizeData;
        -:  189:  }
        -:  190:
        -:  191:  static inline
        -:  192:  void FinalizeFinalizeWrapperWithDataAndContext(napi_env env,
        -:  193:                                         void* rawFinalizeData,
        -:  194:                                         void* rawContext) {
        -:  195:    if (rawFinalizeData == nullptr)
        -:  196:      return;
        -:  197:
        -:  198:    ThreadSafeFinalize* finalizeData =
        -:  199:        static_cast<ThreadSafeFinalize*>(rawFinalizeData);
        -:  200:    finalizeData->callback(Env(env), finalizeData->data,
        -:  201:        static_cast<ContextType*>(rawContext));
        -:  202:    if (finalizeData->tsfn) {
        -:  203:      *finalizeData->tsfn = nullptr;
        -:  204:    }
        -:  205:    delete finalizeData;
        -:  206:  }
        -:  207:
        -:  208:  FinalizerDataType* data;
        -:  209:  Finalizer callback;
        -:  210:  napi_threadsafe_function* tsfn;
        -:  211:};
        -:  212:#endif
        -:  213:
        -:  214:template <typename Getter, typename Setter>
        -:  215:struct AccessorCallbackData {
        -:  216:  static inline
        -:  217:  napi_value GetterWrapper(napi_env env, napi_callback_info info) {
        -:  218:    return details::WrapCallback([&] {
        -:  219:      CallbackInfo callbackInfo(env, info);
        -:  220:      AccessorCallbackData* callbackData =
        -:  221:        static_cast<AccessorCallbackData*>(callbackInfo.Data());
        -:  222:      callbackInfo.SetData(callbackData->data);
        -:  223:      return callbackData->getterCallback(callbackInfo);
        -:  224:    });
        -:  225:  }
        -:  226:
        -:  227:  static inline
        -:  228:  napi_value SetterWrapper(napi_env env, napi_callback_info info) {
        -:  229:    return details::WrapCallback([&] {
        -:  230:      CallbackInfo callbackInfo(env, info);
        -:  231:      AccessorCallbackData* callbackData =
        -:  232:        static_cast<AccessorCallbackData*>(callbackInfo.Data());
        -:  233:      callbackInfo.SetData(callbackData->data);
        -:  234:      callbackData->setterCallback(callbackInfo);
        -:  235:      return nullptr;
        -:  236:    });
        -:  237:  }
        -:  238:
        -:  239:  Getter getterCallback;
        -:  240:  Setter setterCallback;
        -:  241:  void* data;
        -:  242:};
        -:  243:
        -:  244:}  // namespace details
        -:  245:
        -:  246:#ifndef NODE_ADDON_API_DISABLE_DEPRECATED
        -:  247:# include "napi-inl.deprecated.h"
        -:  248:#endif // !NODE_ADDON_API_DISABLE_DEPRECATED
        -:  249:
        -:  250:////////////////////////////////////////////////////////////////////////////////
        -:  251:// Module registration
        -:  252:////////////////////////////////////////////////////////////////////////////////
        -:  253:
        -:  254:#define NODE_API_MODULE(modname, regfunc)                 \
        -:  255:  napi_value __napi_ ## regfunc(napi_env env,             \
        -:  256:                                napi_value exports) {     \
        -:  257:    return Napi::RegisterModule(env, exports, regfunc);   \
        -:  258:  }                                                       \
        -:  259:  NAPI_MODULE(modname, __napi_ ## regfunc)
        -:  260:
        -:  261:// Adapt the NAPI_MODULE registration function:
        -:  262://  - Wrap the arguments in NAPI wrappers.
        -:  263://  - Catch any NAPI errors and rethrow as JS exceptions.
        -:  264:inline napi_value RegisterModule(napi_env env,
        -:  265:                                 napi_value exports,
        -:  266:                                 ModuleRegisterCallback registerCallback) {
        -:  267:  return details::WrapCallback([&] {
        -:  268:    return napi_value(registerCallback(Napi::Env(env),
        -:  269:                                       Napi::Object(env, exports)));
        -:  270:  });
        -:  271:}
        -:  272:
        -:  273:////////////////////////////////////////////////////////////////////////////////
        -:  274:// Env class
        -:  275:////////////////////////////////////////////////////////////////////////////////
        -:  276:
function _ZN4Napi3EnvC2EP10napi_env__ called 0 returned 0% blocks executed 0%
    #####:  277:inline Env::Env(napi_env env) : _env(env) {
    #####:  278:}
        -:  279:
function _ZNK4Napi3EnvcvP10napi_env__Ev called 0 returned 0% blocks executed 0%
    #####:  280:inline Env::operator napi_env() const {
    #####:  281:  return _env;
        -:  282:}
        -:  283:
        -:  284:inline Object Env::Global() const {
        -:  285:  napi_value value;
        -:  286:  napi_status status = napi_get_global(*this, &value);
        -:  287:  NAPI_THROW_IF_FAILED(*this, status, Object());
        -:  288:  return Object(*this, value);
        -:  289:}
        -:  290:
function _ZNK4Napi3Env9UndefinedEv called 294 returned 100% blocks executed 37%
      294:  291:inline Value Env::Undefined() const {
        -:  292:  napi_value value;
      294:  293:  napi_status status = napi_get_undefined(*this, &value);
      294:  294:  NAPI_THROW_IF_FAILED(*this, status, Value());
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
      294:  295:  return Value(*this, value);
    #####:  296:}
        -:  297:
function _ZNK4Napi3Env4NullEv called 272 returned 100% blocks executed 37%
      272:  298:inline Value Env::Null() const {
        -:  299:  napi_value value;
      272:  300:  napi_status status = napi_get_null(*this, &value);
      272:  301:  NAPI_THROW_IF_FAILED(*this, status, Value());
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
      272:  302:  return Value(*this, value);
    #####:  303:}
        -:  304:
function _ZNK4Napi3Env18IsExceptionPendingEv called 0 returned 0% blocks executed 0%
    #####:  305:inline bool Env::IsExceptionPending() const {
        -:  306:  bool result;
    #####:  307:  napi_status status = napi_is_exception_pending(_env, &result);
    #####:  308:  if (status != napi_ok) result = false; // Checking for a pending exception shouldn't throw.
branch  0 never executed
branch  1 never executed
    #####:  309:  return result;
        -:  310:}
        -:  311:
        -:  312:inline Error Env::GetAndClearPendingException() {
        -:  313:  napi_value value;
        -:  314:  napi_status status = napi_get_and_clear_last_exception(_env, &value);
        -:  315:  if (status != napi_ok) {
        -:  316:    // Don't throw another exception when failing to get the exception!
        -:  317:    return Error();
        -:  318:  }
        -:  319:  return Error(_env, value);
        -:  320:}
        -:  321:
        -:  322:////////////////////////////////////////////////////////////////////////////////
        -:  323:// Value class
        -:  324:////////////////////////////////////////////////////////////////////////////////
        -:  325:
        -:  326:inline Value::Value() : _env(nullptr), _value(nullptr) {
        -:  327:}
        -:  328:
function _ZN4Napi5ValueC2EP10napi_env__P12napi_value__ called 0 returned 0% blocks executed 0%
    #####:  329:inline Value::Value(napi_env env, napi_value value) : _env(env), _value(value) {
    #####:  330:}
        -:  331:
function _ZNK4Napi5ValuecvP12napi_value__Ev called 0 returned 0% blocks executed 0%
    #####:  332:inline Value::operator napi_value() const {
    #####:  333:  return _value;
        -:  334:}
        -:  335:
        -:  336:inline bool Value::operator ==(const Value& other) const {
        -:  337:  return StrictEquals(other);
        -:  338:}
        -:  339:
        -:  340:inline bool Value::operator !=(const Value& other) const {
        -:  341:  return !this->operator ==(other);
        -:  342:}
        -:  343:
        -:  344:inline bool Value::StrictEquals(const Value& other) const {
        -:  345:  bool result;
        -:  346:  napi_status status = napi_strict_equals(_env, *this, other, &result);
        -:  347:  NAPI_THROW_IF_FAILED(_env, status, false);
        -:  348:  return result;
        -:  349:}
        -:  350:
function _ZNK4Napi5Value3EnvEv called 1688 returned 100% blocks executed 100%
     1688:  351:inline Napi::Env Value::Env() const {
     1688:  352:  return Napi::Env(_env);
        -:  353:}
        -:  354:
function _ZNK4Napi5Value7IsEmptyEv called 1694 returned 100% blocks executed 100%
     1694:  355:inline bool Value::IsEmpty() const {
     1694:  356:  return _value == nullptr;
        -:  357:}
        -:  358:
function _ZNK4Napi5Value4TypeEv called 1395 returned 100% blocks executed 50%
     1395:  359:inline napi_valuetype Value::Type() const {
     1395:  360:  if (IsEmpty()) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  361:    return napi_undefined;
        -:  362:  }
        -:  363:
        -:  364:  napi_valuetype type;
     1395:  365:  napi_status status = napi_typeof(_env, _value, &type);
     1395:  366:  NAPI_THROW_IF_FAILED(_env, status, napi_undefined);
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
     1395:  367:  return type;
     1395:  368:}
        -:  369:
        -:  370:inline bool Value::IsUndefined() const {
        -:  371:  return Type() == napi_undefined;
        -:  372:}
        -:  373:
        -:  374:inline bool Value::IsNull() const {
        -:  375:  return Type() == napi_null;
        -:  376:}
        -:  377:
        -:  378:inline bool Value::IsBoolean() const {
        -:  379:  return Type() == napi_boolean;
        -:  380:}
        -:  381:
function _ZNK4Napi5Value8IsNumberEv called 546 returned 100% blocks executed 100%
      546:  382:inline bool Value::IsNumber() const {
      546:  383:  return Type() == napi_number;
        -:  384:}
        -:  385:
        -:  386:// Currently experimental guard with the definition of NAPI_EXPERIMENTAL.
        -:  387:// Once it is no longer experimental guard with the NAPI_VERSION in which it is
        -:  388:// released instead.
        -:  389:#ifdef NAPI_EXPERIMENTAL
        -:  390:inline bool Value::IsBigInt() const {
        -:  391:  return Type() == napi_bigint;
        -:  392:}
        -:  393:#endif  // NAPI_EXPERIMENTAL
        -:  394:
        -:  395:#if (NAPI_VERSION > 4)
        -:  396:inline bool Value::IsDate() const {
        -:  397:  if (IsEmpty()) {
        -:  398:    return false;
        -:  399:  }
        -:  400:
        -:  401:  bool result;
        -:  402:  napi_status status = napi_is_date(_env, _value, &result);
        -:  403:  NAPI_THROW_IF_FAILED(_env, status, false);
        -:  404:  return result;
        -:  405:}
        -:  406:#endif
        -:  407:
        -:  408:inline bool Value::IsString() const {
        -:  409:  return Type() == napi_string;
        -:  410:}
        -:  411:
        -:  412:inline bool Value::IsSymbol() const {
        -:  413:  return Type() == napi_symbol;
        -:  414:}
        -:  415:
function _ZNK4Napi5Value7IsArrayEv called 2 returned 100% blocks executed 50%
        2:  416:inline bool Value::IsArray() const {
        2:  417:  if (IsEmpty()) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  418:    return false;
        -:  419:  }
        -:  420:
        -:  421:  bool result;
        2:  422:  napi_status status = napi_is_array(_env, _value, &result);
        2:  423:  NAPI_THROW_IF_FAILED(_env, status, false);
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
        2:  424:  return result;
        2:  425:}
        -:  426:
        -:  427:inline bool Value::IsArrayBuffer() const {
        -:  428:  if (IsEmpty()) {
        -:  429:    return false;
        -:  430:  }
        -:  431:
        -:  432:  bool result;
        -:  433:  napi_status status = napi_is_arraybuffer(_env, _value, &result);
        -:  434:  NAPI_THROW_IF_FAILED(_env, status, false);
        -:  435:  return result;
        -:  436:}
        -:  437:
        -:  438:inline bool Value::IsTypedArray() const {
        -:  439:  if (IsEmpty()) {
        -:  440:    return false;
        -:  441:  }
        -:  442:
        -:  443:  bool result;
        -:  444:  napi_status status = napi_is_typedarray(_env, _value, &result);
        -:  445:  NAPI_THROW_IF_FAILED(_env, status, false);
        -:  446:  return result;
        -:  447:}
        -:  448:
function _ZNK4Napi5Value8IsObjectEv called 566 returned 100% blocks executed 100%
      566:  449:inline bool Value::IsObject() const {
      566:  450:  return Type() == napi_object || IsFunction();
branch  0 taken 1%
branch  1 taken 99%
        -:  451:}
        -:  452:
function _ZNK4Napi5Value10IsFunctionEv called 283 returned 100% blocks executed 100%
      283:  453:inline bool Value::IsFunction() const {
      283:  454:  return Type() == napi_function;
        -:  455:}
        -:  456:
        -:  457:inline bool Value::IsPromise() const {
        -:  458:  if (IsEmpty()) {
        -:  459:    return false;
        -:  460:  }
        -:  461:
        -:  462:  bool result;
        -:  463:  napi_status status = napi_is_promise(_env, _value, &result);
        -:  464:  NAPI_THROW_IF_FAILED(_env, status, false);
        -:  465:  return result;
        -:  466:}
        -:  467:
        -:  468:inline bool Value::IsDataView() const {
        -:  469:  if (IsEmpty()) {
        -:  470:    return false;
        -:  471:  }
        -:  472:
        -:  473:  bool result;
        -:  474:  napi_status status = napi_is_dataview(_env, _value, &result);
        -:  475:  NAPI_THROW_IF_FAILED(_env, status, false);
        -:  476:  return result;
        -:  477:}
        -:  478:
function _ZNK4Napi5Value8IsBufferEv called 293 returned 100% blocks executed 50%
      293:  479:inline bool Value::IsBuffer() const {
      293:  480:  if (IsEmpty()) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  481:    return false;
        -:  482:  }
        -:  483:
        -:  484:  bool result;
      293:  485:  napi_status status = napi_is_buffer(_env, _value, &result);
      293:  486:  NAPI_THROW_IF_FAILED(_env, status, false);
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
      293:  487:  return result;
      293:  488:}
        -:  489:
        -:  490:inline bool Value::IsExternal() const {
        -:  491:  return Type() == napi_external;
        -:  492:}
        -:  493:
        -:  494:template <typename T>
function _ZNK4Napi5Value2AsINS_6ObjectEEET_v called 565 returned 100% blocks executed 100%
function _ZNK4Napi5Value2AsINS_6BufferIcEEEET_v called 291 returned 100% blocks executed 100%
function _ZNK4Napi5Value2AsINS_8FunctionEEET_v called 281 returned 100% blocks executed 100%
function _ZNK4Napi5Value2AsINS_6NumberEEET_v called 1084 returned 100% blocks executed 100%
function _ZNK4Napi5Value2AsINS_5ArrayEEET_v called 2 returned 100% blocks executed 100%
function _ZNK4Napi5Value2AsINS_6StringEEET_v called 0 returned 0% blocks executed 0%
     2223:  495:inline T Value::As() const {
     2223:  496:  return T(_env, _value);
        -:  497:}
        -:  498:
        -:  499:inline Boolean Value::ToBoolean() const {
        -:  500:  napi_value result;
        -:  501:  napi_status status = napi_coerce_to_bool(_env, _value, &result);
        -:  502:  NAPI_THROW_IF_FAILED(_env, status, Boolean());
        -:  503:  return Boolean(_env, result);
        -:  504:}
        -:  505:
        -:  506:inline Number Value::ToNumber() const {
        -:  507:  napi_value result;
        -:  508:  napi_status status = napi_coerce_to_number(_env, _value, &result);
        -:  509:  NAPI_THROW_IF_FAILED(_env, status, Number());
        -:  510:  return Number(_env, result);
        -:  511:}
        -:  512:
        -:  513:inline String Value::ToString() const {
        -:  514:  napi_value result;
        -:  515:  napi_status status = napi_coerce_to_string(_env, _value, &result);
        -:  516:  NAPI_THROW_IF_FAILED(_env, status, String());
        -:  517:  return String(_env, result);
        -:  518:}
        -:  519:
        -:  520:inline Object Value::ToObject() const {
        -:  521:  napi_value result;
        -:  522:  napi_status status = napi_coerce_to_object(_env, _value, &result);
        -:  523:  NAPI_THROW_IF_FAILED(_env, status, Object());
        -:  524:  return Object(_env, result);
        -:  525:}
        -:  526:
        -:  527:////////////////////////////////////////////////////////////////////////////////
        -:  528:// Boolean class
        -:  529:////////////////////////////////////////////////////////////////////////////////
        -:  530:
        -:  531:inline Boolean Boolean::New(napi_env env, bool val) {
        -:  532:  napi_value value;
        -:  533:  napi_status status = napi_get_boolean(env, val, &value);
        -:  534:  NAPI_THROW_IF_FAILED(env, status, Boolean());
        -:  535:  return Boolean(env, value);
        -:  536:}
        -:  537:
        -:  538:inline Boolean::Boolean() : Napi::Value() {
        -:  539:}
        -:  540:
        -:  541:inline Boolean::Boolean(napi_env env, napi_value value) : Napi::Value(env, value) {
        -:  542:}
        -:  543:
        -:  544:inline Boolean::operator bool() const {
        -:  545:  return Value();
        -:  546:}
        -:  547:
        -:  548:inline bool Boolean::Value() const {
        -:  549:  bool result;
        -:  550:  napi_status status = napi_get_value_bool(_env, _value, &result);
        -:  551:  NAPI_THROW_IF_FAILED(_env, status, false);
        -:  552:  return result;
        -:  553:}
        -:  554:
        -:  555:////////////////////////////////////////////////////////////////////////////////
        -:  556:// Number class
        -:  557:////////////////////////////////////////////////////////////////////////////////
        -:  558:
function _ZN4Napi6Number3NewEP10napi_env__d called 13439 returned 100% blocks executed 42%
    13439:  559:inline Number Number::New(napi_env env, double val) {
        -:  560:  napi_value value;
    13439:  561:  napi_status status = napi_create_double(env, val, &value);
    13439:  562:  NAPI_THROW_IF_FAILED(env, status, Number());
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    13439:  563:  return Number(env, value);
    #####:  564:}
        -:  565:
        -:  566:inline Number::Number() : Value() {
        -:  567:}
        -:  568:
function _ZN4Napi6NumberC2EP10napi_env__P12napi_value__ called 14523 returned 100% blocks executed 100%
    14523:  569:inline Number::Number(napi_env env, napi_value value) : Value(env, value) {
    14523:  570:}
        -:  571:
        -:  572:inline Number::operator int32_t() const {
        -:  573:  return Int32Value();
        -:  574:}
        -:  575:
        -:  576:inline Number::operator uint32_t() const {
        -:  577:  return Uint32Value();
        -:  578:}
        -:  579:
        -:  580:inline Number::operator int64_t() const {
        -:  581:  return Int64Value();
        -:  582:}
        -:  583:
        -:  584:inline Number::operator float() const {
        -:  585:  return FloatValue();
        -:  586:}
        -:  587:
        -:  588:inline Number::operator double() const {
        -:  589:  return DoubleValue();
        -:  590:}
        -:  591:
function _ZNK4Napi6Number10Int32ValueEv called 544 returned 100% blocks executed 42%
      544:  592:inline int32_t Number::Int32Value() const {
        -:  593:  int32_t result;
      544:  594:  napi_status status = napi_get_value_int32(_env, _value, &result);
      544:  595:  NAPI_THROW_IF_FAILED(_env, status, 0);
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
      544:  596:  return result;
    #####:  597:}
        -:  598:
function _ZNK4Napi6Number11Uint32ValueEv called 540 returned 100% blocks executed 42%
      540:  599:inline uint32_t Number::Uint32Value() const {
        -:  600:  uint32_t result;
      540:  601:  napi_status status = napi_get_value_uint32(_env, _value, &result);
      540:  602:  NAPI_THROW_IF_FAILED(_env, status, 0);
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
      540:  603:  return result;
    #####:  604:}
        -:  605:
        -:  606:inline int64_t Number::Int64Value() const {
        -:  607:  int64_t result;
        -:  608:  napi_status status = napi_get_value_int64(_env, _value, &result);
        -:  609:  NAPI_THROW_IF_FAILED(_env, status, 0);
        -:  610:  return result;
        -:  611:}
        -:  612:
        -:  613:inline float Number::FloatValue() const {
        -:  614:  return static_cast<float>(DoubleValue());
        -:  615:}
        -:  616:
        -:  617:inline double Number::DoubleValue() const {
        -:  618:  double result;
        -:  619:  napi_status status = napi_get_value_double(_env, _value, &result);
        -:  620:  NAPI_THROW_IF_FAILED(_env, status, 0);
        -:  621:  return result;
        -:  622:}
        -:  623:
        -:  624:// Currently experimental guard with the definition of NAPI_EXPERIMENTAL.
        -:  625:// Once it is no longer experimental guard with the NAPI_VERSION in which it is
        -:  626:// released instead.
        -:  627:#ifdef NAPI_EXPERIMENTAL
        -:  628:////////////////////////////////////////////////////////////////////////////////
        -:  629:// BigInt Class
        -:  630:////////////////////////////////////////////////////////////////////////////////
        -:  631:
        -:  632:inline BigInt BigInt::New(napi_env env, int64_t val) {
        -:  633:  napi_value value;
        -:  634:  napi_status status = napi_create_bigint_int64(env, val, &value);
        -:  635:  NAPI_THROW_IF_FAILED(env, status, BigInt());
        -:  636:  return BigInt(env, value);
        -:  637:}
        -:  638:
        -:  639:inline BigInt BigInt::New(napi_env env, uint64_t val) {
        -:  640:  napi_value value;
        -:  641:  napi_status status = napi_create_bigint_uint64(env, val, &value);
        -:  642:  NAPI_THROW_IF_FAILED(env, status, BigInt());
        -:  643:  return BigInt(env, value);
        -:  644:}
        -:  645:
        -:  646:inline BigInt BigInt::New(napi_env env, int sign_bit, size_t word_count, const uint64_t* words) {
        -:  647:  napi_value value;
        -:  648:  napi_status status = napi_create_bigint_words(env, sign_bit, word_count, words, &value);
        -:  649:  NAPI_THROW_IF_FAILED(env, status, BigInt());
        -:  650:  return BigInt(env, value);
        -:  651:}
        -:  652:
        -:  653:inline BigInt::BigInt() : Value() {
        -:  654:}
        -:  655:
        -:  656:inline BigInt::BigInt(napi_env env, napi_value value) : Value(env, value) {
        -:  657:}
        -:  658:
        -:  659:inline int64_t BigInt::Int64Value(bool* lossless) const {
        -:  660:  int64_t result;
        -:  661:  napi_status status = napi_get_value_bigint_int64(
        -:  662:      _env, _value, &result, lossless);
        -:  663:  NAPI_THROW_IF_FAILED(_env, status, 0);
        -:  664:  return result;
        -:  665:}
        -:  666:
        -:  667:inline uint64_t BigInt::Uint64Value(bool* lossless) const {
        -:  668:  uint64_t result;
        -:  669:  napi_status status = napi_get_value_bigint_uint64(
        -:  670:      _env, _value, &result, lossless);
        -:  671:  NAPI_THROW_IF_FAILED(_env, status, 0);
        -:  672:  return result;
        -:  673:}
        -:  674:
        -:  675:inline size_t BigInt::WordCount() const {
        -:  676:  size_t word_count;
        -:  677:  napi_status status = napi_get_value_bigint_words(
        -:  678:      _env, _value, nullptr, &word_count, nullptr);
        -:  679:  NAPI_THROW_IF_FAILED(_env, status, 0);
        -:  680:  return word_count;
        -:  681:}
        -:  682:
        -:  683:inline void BigInt::ToWords(int* sign_bit, size_t* word_count, uint64_t* words) {
        -:  684:  napi_status status = napi_get_value_bigint_words(
        -:  685:      _env, _value, sign_bit, word_count, words);
        -:  686:  NAPI_THROW_IF_FAILED_VOID(_env, status);
        -:  687:}
        -:  688:#endif  // NAPI_EXPERIMENTAL
        -:  689:
        -:  690:#if (NAPI_VERSION > 4)
        -:  691:////////////////////////////////////////////////////////////////////////////////
        -:  692:// Date Class
        -:  693:////////////////////////////////////////////////////////////////////////////////
        -:  694:
        -:  695:inline Date Date::New(napi_env env, double val) {
        -:  696:  napi_value value;
        -:  697:  napi_status status = napi_create_date(env, val, &value);
        -:  698:  NAPI_THROW_IF_FAILED(env, status, Date());
        -:  699:  return Date(env, value);
        -:  700:}
        -:  701:
        -:  702:inline Date::Date() : Value() {
        -:  703:}
        -:  704:
        -:  705:inline Date::Date(napi_env env, napi_value value) : Value(env, value) {
        -:  706:}
        -:  707:
        -:  708:inline Date::operator double() const {
        -:  709:  return ValueOf();
        -:  710:}
        -:  711:
        -:  712:inline double Date::ValueOf() const {
        -:  713:  double result;
        -:  714:  napi_status status = napi_get_date_value(
        -:  715:      _env, _value, &result);
        -:  716:  NAPI_THROW_IF_FAILED(_env, status, 0);
        -:  717:  return result;
        -:  718:}
        -:  719:#endif
        -:  720:
        -:  721:////////////////////////////////////////////////////////////////////////////////
        -:  722:// Name class
        -:  723:////////////////////////////////////////////////////////////////////////////////
        -:  724:
        -:  725:inline Name::Name() : Value() {
        -:  726:}
        -:  727:
function _ZN4Napi4NameC2EP10napi_env__P12napi_value__ called 0 returned 0% blocks executed 0%
    #####:  728:inline Name::Name(napi_env env, napi_value value) : Value(env, value) {
    #####:  729:}
        -:  730:
        -:  731:////////////////////////////////////////////////////////////////////////////////
        -:  732:// String class
        -:  733:////////////////////////////////////////////////////////////////////////////////
        -:  734:
function _ZN4Napi6String3NewEP10napi_env__RKSs called 17 returned 100% blocks executed 100%
       17:  735:inline String String::New(napi_env env, const std::string& val) {
       17:  736:  return String::New(env, val.c_str(), val.size());
        -:  737:}
        -:  738:
        -:  739:inline String String::New(napi_env env, const std::u16string& val) {
        -:  740:  return String::New(env, val.c_str(), val.size());
        -:  741:}
        -:  742:
        -:  743:inline String String::New(napi_env env, const char* val) {
        -:  744:  napi_value value;
        -:  745:  napi_status status = napi_create_string_utf8(env, val, std::strlen(val), &value);
        -:  746:  NAPI_THROW_IF_FAILED(env, status, String());
        -:  747:  return String(env, value);
        -:  748:}
        -:  749:
        -:  750:inline String String::New(napi_env env, const char16_t* val) {
        -:  751:  napi_value value;
        -:  752:  napi_status status = napi_create_string_utf16(env, val, std::u16string(val).size(), &value);
        -:  753:  NAPI_THROW_IF_FAILED(env, status, String());
        -:  754:  return String(env, value);
        -:  755:}
        -:  756:
function _ZN4Napi6String3NewEP10napi_env__PKcm called 17 returned 100% blocks executed 42%
       17:  757:inline String String::New(napi_env env, const char* val, size_t length) {
        -:  758:  napi_value value;
       17:  759:  napi_status status = napi_create_string_utf8(env, val, length, &value);
       17:  760:  NAPI_THROW_IF_FAILED(env, status, String());
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
       17:  761:  return String(env, value);
    #####:  762:}
        -:  763:
        -:  764:inline String String::New(napi_env env, const char16_t* val, size_t length) {
        -:  765:  napi_value value;
        -:  766:  napi_status status = napi_create_string_utf16(env, val, length, &value);
        -:  767:  NAPI_THROW_IF_FAILED(env, status, String());
        -:  768:  return String(env, value);
        -:  769:}
        -:  770:
        -:  771:inline String::String() : Name() {
        -:  772:}
        -:  773:
function _ZN4Napi6StringC2EP10napi_env__P12napi_value__ called 0 returned 0% blocks executed 0%
    #####:  774:inline String::String(napi_env env, napi_value value) : Name(env, value) {
    #####:  775:}
        -:  776:
function _ZNK4Napi6StringcvSsEv called 0 returned 0% blocks executed 0%
    #####:  777:inline String::operator std::string() const {
    #####:  778:  return Utf8Value();
        -:  779:}
        -:  780:
        -:  781:inline String::operator std::u16string() const {
        -:  782:  return Utf16Value();
        -:  783:}
        -:  784:
function _ZNK4Napi6String9Utf8ValueEv called 0 returned 0% blocks executed 0%
    #####:  785:inline std::string String::Utf8Value() const {
        -:  786:  size_t length;
    #####:  787:  napi_status status = napi_get_value_string_utf8(_env, _value, nullptr, 0, &length);
    #####:  788:  NAPI_THROW_IF_FAILED(_env, status, "");
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  789:
    #####:  790:  std::string value;
    #####:  791:  value.reserve(length + 1);
branch  0 never executed
branch  1 never executed
    #####:  792:  value.resize(length);
branch  0 never executed
branch  1 never executed
    #####:  793:  status = napi_get_value_string_utf8(_env, _value, &value[0], value.capacity(), nullptr);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  794:  NAPI_THROW_IF_FAILED(_env, status, "");
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  795:  return value;
    #####:  796:}
branch  0 never executed
branch  1 never executed
        -:  797:
        -:  798:inline std::u16string String::Utf16Value() const {
        -:  799:  size_t length;
        -:  800:  napi_status status = napi_get_value_string_utf16(_env, _value, nullptr, 0, &length);
        -:  801:  NAPI_THROW_IF_FAILED(_env, status, NAPI_WIDE_TEXT(""));
        -:  802:
        -:  803:  std::u16string value;
        -:  804:  value.reserve(length + 1);
        -:  805:  value.resize(length);
        -:  806:  status = napi_get_value_string_utf16(_env, _value, &value[0], value.capacity(), nullptr);
        -:  807:  NAPI_THROW_IF_FAILED(_env, status, NAPI_WIDE_TEXT(""));
        -:  808:  return value;
        -:  809:}
        -:  810:
        -:  811:////////////////////////////////////////////////////////////////////////////////
        -:  812:// Symbol class
        -:  813:////////////////////////////////////////////////////////////////////////////////
        -:  814:
        -:  815:inline Symbol Symbol::New(napi_env env, const char* description) {
        -:  816:  napi_value descriptionValue = description != nullptr ?
        -:  817:    String::New(env, description) : static_cast<napi_value>(nullptr);
        -:  818:  return Symbol::New(env, descriptionValue);
        -:  819:}
        -:  820:
        -:  821:inline Symbol Symbol::New(napi_env env, const std::string& description) {
        -:  822:  napi_value descriptionValue = String::New(env, description);
        -:  823:  return Symbol::New(env, descriptionValue);
        -:  824:}
        -:  825:
        -:  826:inline Symbol Symbol::New(napi_env env, String description) {
        -:  827:  napi_value descriptionValue = description;
        -:  828:  return Symbol::New(env, descriptionValue);
        -:  829:}
        -:  830:
        -:  831:inline Symbol Symbol::New(napi_env env, napi_value description) {
        -:  832:  napi_value value;
        -:  833:  napi_status status = napi_create_symbol(env, description, &value);
        -:  834:  NAPI_THROW_IF_FAILED(env, status, Symbol());
        -:  835:  return Symbol(env, value);
        -:  836:}
        -:  837:
        -:  838:inline Symbol Symbol::WellKnown(napi_env env, const std::string& name) {
        -:  839:  return Napi::Env(env).Global().Get("Symbol").As<Object>().Get(name).As<Symbol>();
        -:  840:}
        -:  841:
        -:  842:inline Symbol::Symbol() : Name() {
        -:  843:}
        -:  844:
        -:  845:inline Symbol::Symbol(napi_env env, napi_value value) : Name(env, value) {
        -:  846:}
        -:  847:
        -:  848:////////////////////////////////////////////////////////////////////////////////
        -:  849:// Automagic value creation
        -:  850:////////////////////////////////////////////////////////////////////////////////
        -:  851:
        -:  852:namespace details {
        -:  853:template <typename T>
        -:  854:struct vf_number {
function _ZN4Napi7details9vf_numberIiE4FromEP10napi_env__i called 13439 returned 100% blocks executed 100%
    13439:  855:  static Number From(napi_env env, T value) {
    13439:  856:    return Number::New(env, static_cast<double>(value));
        -:  857:  }
        -:  858:};
        -:  859:
        -:  860:template<>
        -:  861:struct vf_number<bool> {
        -:  862:  static Boolean From(napi_env env, bool value) {
        -:  863:    return Boolean::New(env, value);
        -:  864:  }
        -:  865:};
        -:  866:
        -:  867:struct vf_utf8_charp {
        -:  868:  static String From(napi_env env, const char* value) {
        -:  869:    return String::New(env, value);
        -:  870:  }
        -:  871:};
        -:  872:
        -:  873:struct vf_utf16_charp {
        -:  874:  static String From(napi_env env, const char16_t* value) {
        -:  875:    return String::New(env, value);
        -:  876:  }
        -:  877:};
        -:  878:struct vf_utf8_string {
function _ZN4Napi7details14vf_utf8_string4FromEP10napi_env__RKSs called 17 returned 100% blocks executed 100%
       17:  879:  static String From(napi_env env, const std::string& value) {
       17:  880:    return String::New(env, value);
        -:  881:  }
        -:  882:};
        -:  883:
        -:  884:struct vf_utf16_string {
        -:  885:  static String From(napi_env env, const std::u16string& value) {
        -:  886:    return String::New(env, value);
        -:  887:  }
        -:  888:};
        -:  889:
        -:  890:template <typename T>
        -:  891:struct vf_fallback {
function _ZN4Napi7details11vf_fallbackINS_5ArrayEE4FromEP10napi_env__RKS2_ called 9 returned 100% blocks executed 100%
function _ZN4Napi7details11vf_fallbackINS_6ObjectEE4FromEP10napi_env__RKS2_ called 9 returned 100% blocks executed 100%
       18:  892:  static Value From(napi_env env, const T& value) {
       18:  893:    return Value(env, value);
        -:  894:  }
        -:  895:};
        -:  896:
        -:  897:template <typename...> struct disjunction : std::false_type {};
        -:  898:template <typename B> struct disjunction<B> : B {};
        -:  899:template <typename B, typename... Bs>
        -:  900:struct disjunction<B, Bs...>
        -:  901:    : std::conditional<bool(B::value), B, disjunction<Bs...>>::type {};
        -:  902:
        -:  903:template <typename T>
        -:  904:struct can_make_string
        -:  905:    : disjunction<typename std::is_convertible<T, const char *>::type,
        -:  906:                  typename std::is_convertible<T, const char16_t *>::type,
        -:  907:                  typename std::is_convertible<T, std::string>::type,
        -:  908:                  typename std::is_convertible<T, std::u16string>::type> {};
        -:  909:}
        -:  910:
        -:  911:template <typename T>
function _ZN4Napi5Value4FromISsEES0_P10napi_env__RKT_ called 17 returned 100% blocks executed 100%
function _ZN4Napi5Value4FromIiEES0_P10napi_env__RKT_ called 13439 returned 100% blocks executed 100%
function _ZN4Napi5Value4FromINS_5ArrayEEES0_P10napi_env__RKT_ called 9 returned 100% blocks executed 100%
function _ZN4Napi5Value4FromINS_6ObjectEEES0_P10napi_env__RKT_ called 9 returned 100% blocks executed 100%
    13474:  912:Value Value::From(napi_env env, const T& value) {
        -:  913:  using Helper = typename std::conditional<
        -:  914:    std::is_integral<T>::value || std::is_floating_point<T>::value,
        -:  915:    details::vf_number<T>,
        -:  916:    typename std::conditional<
        -:  917:      details::can_make_string<T>::value,
        -:  918:      String,
        -:  919:      details::vf_fallback<T>
        -:  920:    >::type
        -:  921:  >::type;
    13474:  922:  return Helper::From(env, value);
        -:  923:}
        -:  924:
        -:  925:template <typename T>
function _ZN4Napi6String4FromISsEES0_P10napi_env__RKT_ called 17 returned 100% blocks executed 100%
       17:  926:String String::From(napi_env env, const T& value) {
        -:  927:  struct Dummy {};
        -:  928:  using Helper = typename std::conditional<
        -:  929:    std::is_convertible<T, const char*>::value,
        -:  930:    details::vf_utf8_charp,
        -:  931:    typename std::conditional<
        -:  932:      std::is_convertible<T, const char16_t*>::value,
        -:  933:      details::vf_utf16_charp,
        -:  934:      typename std::conditional<
        -:  935:        std::is_convertible<T, std::string>::value,
        -:  936:        details::vf_utf8_string,
        -:  937:        typename std::conditional<
        -:  938:          std::is_convertible<T, std::u16string>::value,
        -:  939:          details::vf_utf16_string,
        -:  940:          Dummy
        -:  941:        >::type
        -:  942:      >::type
        -:  943:    >::type
        -:  944:  >::type;
       17:  945:  return Helper::From(env, value);
        -:  946:}
        -:  947:
        -:  948:////////////////////////////////////////////////////////////////////////////////
        -:  949:// Object class
        -:  950:////////////////////////////////////////////////////////////////////////////////
        -:  951:
        -:  952:template <typename Key>
        -:  953:inline Object::PropertyLValue<Key>::operator Value() const {
        -:  954:  return Object(_env, _object).Get(_key);
        -:  955:}
        -:  956:
        -:  957:template <typename Key> template <typename ValueType>
        -:  958:inline Object::PropertyLValue<Key>& Object::PropertyLValue<Key>::operator =(ValueType value) {
        -:  959:  Object(_env, _object).Set(_key, value);
        -:  960:  return *this;
        -:  961:}
        -:  962:
        -:  963:template <typename Key>
        -:  964:inline Object::PropertyLValue<Key>::PropertyLValue(Object object, Key key)
        -:  965:  : _env(object.Env()), _object(object), _key(key) {}
        -:  966:
function _ZN4Napi6Object3NewEP10napi_env__ called 571 returned 100% blocks executed 42%
      571:  967:inline Object Object::New(napi_env env) {
        -:  968:  napi_value value;
      571:  969:  napi_status status = napi_create_object(env, &value);
      571:  970:  NAPI_THROW_IF_FAILED(env, status, Object());
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
      571:  971:  return Object(env, value);
    #####:  972:}
        -:  973:
        -:  974:inline Object::Object() : Value() {
        -:  975:}
        -:  976:
function _ZN4Napi6ObjectC2EP10napi_env__P12napi_value__ called 0 returned 0% blocks executed 0%
    #####:  977:inline Object::Object(napi_env env, napi_value value) : Value(env, value) {
    #####:  978:}
        -:  979:
        -:  980:inline Object::PropertyLValue<std::string> Object::operator [](const char* utf8name) {
        -:  981:  return PropertyLValue<std::string>(*this, utf8name);
        -:  982:}
        -:  983:
        -:  984:inline Object::PropertyLValue<std::string> Object::operator [](const std::string& utf8name) {
        -:  985:  return PropertyLValue<std::string>(*this, utf8name);
        -:  986:}
        -:  987:
        -:  988:inline Object::PropertyLValue<uint32_t> Object::operator [](uint32_t index) {
        -:  989:  return PropertyLValue<uint32_t>(*this, index);
        -:  990:}
        -:  991:
        -:  992:inline Value Object::operator [](const char* utf8name) const {
        -:  993:  return Get(utf8name);
        -:  994:}
        -:  995:
        -:  996:inline Value Object::operator [](const std::string& utf8name) const {
        -:  997:  return Get(utf8name);
        -:  998:}
        -:  999:
        -: 1000:inline Value Object::operator [](uint32_t index) const {
        -: 1001:  return Get(index);
        -: 1002:}
        -: 1003:
        -: 1004:inline bool Object::Has(napi_value key) const {
        -: 1005:  bool result;
        -: 1006:  napi_status status = napi_has_property(_env, _value, key, &result);
        -: 1007:  NAPI_THROW_IF_FAILED(_env, status, false);
        -: 1008:  return result;
        -: 1009:}
        -: 1010:
        -: 1011:inline bool Object::Has(Value key) const {
        -: 1012:  bool result;
        -: 1013:  napi_status status = napi_has_property(_env, _value, key, &result);
        -: 1014:  NAPI_THROW_IF_FAILED(_env, status, false);
        -: 1015:  return result;
        -: 1016:}
        -: 1017:
        -: 1018:inline bool Object::Has(const char* utf8name) const {
        -: 1019:  bool result;
        -: 1020:  napi_status status = napi_has_named_property(_env, _value, utf8name, &result);
        -: 1021:  NAPI_THROW_IF_FAILED(_env, status, false);
        -: 1022:  return result;
        -: 1023:}
        -: 1024:
        -: 1025:inline bool Object::Has(const std::string& utf8name) const {
        -: 1026:  return Has(utf8name.c_str());
        -: 1027:}
        -: 1028:
        -: 1029:inline bool Object::HasOwnProperty(napi_value key) const {
        -: 1030:  bool result;
        -: 1031:  napi_status status = napi_has_own_property(_env, _value, key, &result);
        -: 1032:  NAPI_THROW_IF_FAILED(_env, status, false);
        -: 1033:  return result;
        -: 1034:}
        -: 1035:
        -: 1036:inline bool Object::HasOwnProperty(Value key) const {
        -: 1037:  bool result;
        -: 1038:  napi_status status = napi_has_own_property(_env, _value, key, &result);
        -: 1039:  NAPI_THROW_IF_FAILED(_env, status, false);
        -: 1040:  return result;
        -: 1041:}
        -: 1042:
        -: 1043:inline bool Object::HasOwnProperty(const char* utf8name) const {
        -: 1044:  napi_value key;
        -: 1045:  napi_status status = napi_create_string_utf8(_env, utf8name, std::strlen(utf8name), &key);
        -: 1046:  NAPI_THROW_IF_FAILED(_env, status, false);
        -: 1047:  return HasOwnProperty(key);
        -: 1048:}
        -: 1049:
        -: 1050:inline bool Object::HasOwnProperty(const std::string& utf8name) const {
        -: 1051:  return HasOwnProperty(utf8name.c_str());
        -: 1052:}
        -: 1053:
        -: 1054:inline Value Object::Get(napi_value key) const {
        -: 1055:  napi_value result;
        -: 1056:  napi_status status = napi_get_property(_env, _value, key, &result);
        -: 1057:  NAPI_THROW_IF_FAILED(_env, status, Value());
        -: 1058:  return Value(_env, result);
        -: 1059:}
        -: 1060:
        -: 1061:inline Value Object::Get(Value key) const {
        -: 1062:  napi_value result;
        -: 1063:  napi_status status = napi_get_property(_env, _value, key, &result);
        -: 1064:  NAPI_THROW_IF_FAILED(_env, status, Value());
        -: 1065:  return Value(_env, result);
        -: 1066:}
        -: 1067:
function _ZNK4Napi6Object3GetEPKc called 0 returned 0% blocks executed 0%
    #####: 1068:inline Value Object::Get(const char* utf8name) const {
        -: 1069:  napi_value result;
    #####: 1070:  napi_status status = napi_get_named_property(_env, _value, utf8name, &result);
    #####: 1071:  NAPI_THROW_IF_FAILED(_env, status, Value());
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1072:  return Value(_env, result);
    #####: 1073:}
        -: 1074:
        -: 1075:inline Value Object::Get(const std::string& utf8name) const {
        -: 1076:  return Get(utf8name.c_str());
        -: 1077:}
        -: 1078:
        -: 1079:template <typename ValueType>
        -: 1080:inline void Object::Set(napi_value key, const ValueType& value) {
        -: 1081:  napi_status status =
        -: 1082:      napi_set_property(_env, _value, key, Value::From(_env, value));
        -: 1083:  NAPI_THROW_IF_FAILED_VOID(_env, status);
        -: 1084:}
        -: 1085:
        -: 1086:template <typename ValueType>
        -: 1087:inline void Object::Set(Value key, const ValueType& value) {
        -: 1088:  napi_status status =
        -: 1089:      napi_set_property(_env, _value, key, Value::From(_env, value));
        -: 1090:  NAPI_THROW_IF_FAILED_VOID(_env, status);
        -: 1091:}
        -: 1092:
        -: 1093:template <typename ValueType>
function _ZN4Napi6Object3SetISsEEvPKcRKT_ called 17 returned 100% blocks executed 42%
function _ZN4Napi6Object3SetINS_5ArrayEEEvPKcRKT_ called 9 returned 100% blocks executed 42%
       26: 1094:inline void Object::Set(const char* utf8name, const ValueType& value) {
       26: 1095:  napi_status status =
       26: 1096:      napi_set_named_property(_env, _value, utf8name, Value::From(_env, value));
       26: 1097:  NAPI_THROW_IF_FAILED_VOID(_env, status);
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 taken 0%
branch  5 taken 100%
branch  6 never executed
branch  7 never executed
       26: 1098:}
        -: 1099:
        -: 1100:template <typename ValueType>
        -: 1101:inline void Object::Set(const std::string& utf8name, const ValueType& value) {
        -: 1102:  Set(utf8name.c_str(), value);
        -: 1103:}
        -: 1104:
        -: 1105:inline bool Object::Delete(napi_value key) {
        -: 1106:  bool result;
        -: 1107:  napi_status status = napi_delete_property(_env, _value, key, &result);
        -: 1108:  NAPI_THROW_IF_FAILED(_env, status, false);
        -: 1109:  return result;
        -: 1110:}
        -: 1111:
        -: 1112:inline bool Object::Delete(Value key) {
        -: 1113:  bool result;
        -: 1114:  napi_status status = napi_delete_property(_env, _value, key, &result);
        -: 1115:  NAPI_THROW_IF_FAILED(_env, status, false);
        -: 1116:  return result;
        -: 1117:}
        -: 1118:
        -: 1119:inline bool Object::Delete(const char* utf8name) {
        -: 1120:  return Delete(String::New(_env, utf8name));
        -: 1121:}
        -: 1122:
        -: 1123:inline bool Object::Delete(const std::string& utf8name) {
        -: 1124:  return Delete(String::New(_env, utf8name));
        -: 1125:}
        -: 1126:
        -: 1127:inline bool Object::Has(uint32_t index) const {
        -: 1128:  bool result;
        -: 1129:  napi_status status = napi_has_element(_env, _value, index, &result);
        -: 1130:  NAPI_THROW_IF_FAILED(_env, status, false);
        -: 1131:  return result;
        -: 1132:}
        -: 1133:
function _ZNK4Napi6Object3GetEj called 4 returned 100% blocks executed 42%
        4: 1134:inline Value Object::Get(uint32_t index) const {
        -: 1135:  napi_value value;
        4: 1136:  napi_status status = napi_get_element(_env, _value, index, &value);
        4: 1137:  NAPI_THROW_IF_FAILED(_env, status, Value());
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
        4: 1138:  return Value(_env, value);
    #####: 1139:}
        -: 1140:
        -: 1141:template <typename ValueType>
function _ZN4Napi6Object3SetIiEEvjRKT_ called 13439 returned 100% blocks executed 42%
function _ZN4Napi6Object3SetIS0_EEvjRKT_ called 9 returned 100% blocks executed 42%
    13448: 1142:inline void Object::Set(uint32_t index, const ValueType& value) {
    13448: 1143:  napi_status status =
    13448: 1144:      napi_set_element(_env, _value, index, Value::From(_env, value));
    13448: 1145:  NAPI_THROW_IF_FAILED_VOID(_env, status);
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 taken 0%
branch  5 taken 100%
branch  6 never executed
branch  7 never executed
    13448: 1146:}
        -: 1147:
        -: 1148:inline bool Object::Delete(uint32_t index) {
        -: 1149:  bool result;
        -: 1150:  napi_status status = napi_delete_element(_env, _value, index, &result);
        -: 1151:  NAPI_THROW_IF_FAILED(_env, status, false);
        -: 1152:  return result;
        -: 1153:}
        -: 1154:
        -: 1155:inline Array Object::GetPropertyNames() const {
        -: 1156:  napi_value result;
        -: 1157:  napi_status status = napi_get_property_names(_env, _value, &result);
        -: 1158:  NAPI_THROW_IF_FAILED(_env, status, Array());
        -: 1159:  return Array(_env, result);
        -: 1160:}
        -: 1161:
        -: 1162:inline void Object::DefineProperty(const PropertyDescriptor& property) {
        -: 1163:  napi_status status = napi_define_properties(_env, _value, 1,
        -: 1164:    reinterpret_cast<const napi_property_descriptor*>(&property));
        -: 1165:  NAPI_THROW_IF_FAILED_VOID(_env, status);
        -: 1166:}
        -: 1167:
        -: 1168:inline void Object::DefineProperties(const std::initializer_list<PropertyDescriptor>& properties) {
        -: 1169:  napi_status status = napi_define_properties(_env, _value, properties.size(),
        -: 1170:    reinterpret_cast<const napi_property_descriptor*>(properties.begin()));
        -: 1171:  NAPI_THROW_IF_FAILED_VOID(_env, status);
        -: 1172:}
        -: 1173:
        -: 1174:inline void Object::DefineProperties(const std::vector<PropertyDescriptor>& properties) {
        -: 1175:  napi_status status = napi_define_properties(_env, _value, properties.size(),
        -: 1176:    reinterpret_cast<const napi_property_descriptor*>(properties.data()));
        -: 1177:  NAPI_THROW_IF_FAILED_VOID(_env, status);
        -: 1178:}
        -: 1179:
        -: 1180:inline bool Object::InstanceOf(const Function& constructor) const {
        -: 1181:  bool result;
        -: 1182:  napi_status status = napi_instanceof(_env, _value, constructor, &result);
        -: 1183:  NAPI_THROW_IF_FAILED(_env, status, false);
        -: 1184:  return result;
        -: 1185:}
        -: 1186:
        -: 1187:template <typename Finalizer, typename T>
        -: 1188:inline void Object::AddFinalizer(Finalizer finalizeCallback, T* data) {
        -: 1189:  details::FinalizeData<T, Finalizer>* finalizeData =
        -: 1190:    new details::FinalizeData<T, Finalizer>({ finalizeCallback, nullptr });
        -: 1191:  napi_status status =
        -: 1192:      details::AttachData(_env,
        -: 1193:                          *this,
        -: 1194:                          data,
        -: 1195:                          details::FinalizeData<T, Finalizer>::Wrapper,
        -: 1196:                          finalizeData);
        -: 1197:  if (status != napi_ok) {
        -: 1198:    delete finalizeData;
        -: 1199:    NAPI_THROW_IF_FAILED_VOID(_env, status);
        -: 1200:  }
        -: 1201:}
        -: 1202:
        -: 1203:template <typename Finalizer, typename T, typename Hint>
        -: 1204:inline void Object::AddFinalizer(Finalizer finalizeCallback,
        -: 1205:                                 T* data,
        -: 1206:                                 Hint* finalizeHint) {
        -: 1207:  details::FinalizeData<T, Finalizer, Hint>* finalizeData =
        -: 1208:    new details::FinalizeData<T, Finalizer, Hint>({ finalizeCallback, finalizeHint });
        -: 1209:  napi_status status =
        -: 1210:      details::AttachData(_env,
        -: 1211:                          *this,
        -: 1212:                          data,
        -: 1213:                          details::FinalizeData<T, Finalizer, Hint>::WrapperWithHint,
        -: 1214:                          finalizeData);
        -: 1215:  if (status != napi_ok) {
        -: 1216:    delete finalizeData;
        -: 1217:    NAPI_THROW_IF_FAILED_VOID(_env, status);
        -: 1218:  }
        -: 1219:}
        -: 1220:
        -: 1221:////////////////////////////////////////////////////////////////////////////////
        -: 1222:// External class
        -: 1223:////////////////////////////////////////////////////////////////////////////////
        -: 1224:
        -: 1225:template <typename T>
        -: 1226:inline External<T> External<T>::New(napi_env env, T* data) {
        -: 1227:  napi_value value;
        -: 1228:  napi_status status = napi_create_external(env, data, nullptr, nullptr, &value);
        -: 1229:  NAPI_THROW_IF_FAILED(env, status, External());
        -: 1230:  return External(env, value);
        -: 1231:}
        -: 1232:
        -: 1233:template <typename T>
        -: 1234:template <typename Finalizer>
        -: 1235:inline External<T> External<T>::New(napi_env env,
        -: 1236:                                    T* data,
        -: 1237:                                    Finalizer finalizeCallback) {
        -: 1238:  napi_value value;
        -: 1239:  details::FinalizeData<T, Finalizer>* finalizeData =
        -: 1240:    new details::FinalizeData<T, Finalizer>({ finalizeCallback, nullptr });
        -: 1241:  napi_status status = napi_create_external(
        -: 1242:    env,
        -: 1243:    data,
        -: 1244:    details::FinalizeData<T, Finalizer>::Wrapper,
        -: 1245:    finalizeData,
        -: 1246:    &value);
        -: 1247:  if (status != napi_ok) {
        -: 1248:    delete finalizeData;
        -: 1249:    NAPI_THROW_IF_FAILED(env, status, External());
        -: 1250:  }
        -: 1251:  return External(env, value);
        -: 1252:}
        -: 1253:
        -: 1254:template <typename T>
        -: 1255:template <typename Finalizer, typename Hint>
        -: 1256:inline External<T> External<T>::New(napi_env env,
        -: 1257:                                    T* data,
        -: 1258:                                    Finalizer finalizeCallback,
        -: 1259:                                    Hint* finalizeHint) {
        -: 1260:  napi_value value;
        -: 1261:  details::FinalizeData<T, Finalizer, Hint>* finalizeData =
        -: 1262:    new details::FinalizeData<T, Finalizer, Hint>({ finalizeCallback, finalizeHint });
        -: 1263:  napi_status status = napi_create_external(
        -: 1264:    env,
        -: 1265:    data,
        -: 1266:    details::FinalizeData<T, Finalizer, Hint>::WrapperWithHint,
        -: 1267:    finalizeData,
        -: 1268:    &value);
        -: 1269:  if (status != napi_ok) {
        -: 1270:    delete finalizeData;
        -: 1271:    NAPI_THROW_IF_FAILED(env, status, External());
        -: 1272:  }
        -: 1273:  return External(env, value);
        -: 1274:}
        -: 1275:
        -: 1276:template <typename T>
        -: 1277:inline External<T>::External() : Value() {
        -: 1278:}
        -: 1279:
        -: 1280:template <typename T>
        -: 1281:inline External<T>::External(napi_env env, napi_value value) : Value(env, value) {
        -: 1282:}
        -: 1283:
        -: 1284:template <typename T>
        -: 1285:inline T* External<T>::Data() const {
        -: 1286:  void* data;
        -: 1287:  napi_status status = napi_get_value_external(_env, _value, &data);
        -: 1288:  NAPI_THROW_IF_FAILED(_env, status, nullptr);
        -: 1289:  return reinterpret_cast<T*>(data);
        -: 1290:}
        -: 1291:
        -: 1292:////////////////////////////////////////////////////////////////////////////////
        -: 1293:// Array class
        -: 1294:////////////////////////////////////////////////////////////////////////////////
        -: 1295:
        -: 1296:inline Array Array::New(napi_env env) {
        -: 1297:  napi_value value;
        -: 1298:  napi_status status = napi_create_array(env, &value);
        -: 1299:  NAPI_THROW_IF_FAILED(env, status, Array());
        -: 1300:  return Array(env, value);
        -: 1301:}
        -: 1302:
function _ZN4Napi5Array3NewEP10napi_env__m called 18 returned 100% blocks executed 42%
       18: 1303:inline Array Array::New(napi_env env, size_t length) {
        -: 1304:  napi_value value;
       18: 1305:  napi_status status = napi_create_array_with_length(env, length, &value);
       18: 1306:  NAPI_THROW_IF_FAILED(env, status, Array());
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
       18: 1307:  return Array(env, value);
    #####: 1308:}
        -: 1309:
        -: 1310:inline Array::Array() : Object() {
        -: 1311:}
        -: 1312:
function _ZN4Napi5ArrayC2EP10napi_env__P12napi_value__ called 20 returned 100% blocks executed 100%
       20: 1313:inline Array::Array(napi_env env, napi_value value) : Object(env, value) {
       20: 1314:}
        -: 1315:
function _ZNK4Napi5Array6LengthEv called 2 returned 100% blocks executed 42%
        2: 1316:inline uint32_t Array::Length() const {
        -: 1317:  uint32_t result;
        2: 1318:  napi_status status = napi_get_array_length(_env, _value, &result);
        2: 1319:  NAPI_THROW_IF_FAILED(_env, status, 0);
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
        2: 1320:  return result;
    #####: 1321:}
        -: 1322:
        -: 1323:////////////////////////////////////////////////////////////////////////////////
        -: 1324:// ArrayBuffer class
        -: 1325:////////////////////////////////////////////////////////////////////////////////
        -: 1326:
        -: 1327:inline ArrayBuffer ArrayBuffer::New(napi_env env, size_t byteLength) {
        -: 1328:  napi_value value;
        -: 1329:  void* data;
        -: 1330:  napi_status status = napi_create_arraybuffer(env, byteLength, &data, &value);
        -: 1331:  NAPI_THROW_IF_FAILED(env, status, ArrayBuffer());
        -: 1332:
        -: 1333:  return ArrayBuffer(env, value, data, byteLength);
        -: 1334:}
        -: 1335:
        -: 1336:inline ArrayBuffer ArrayBuffer::New(napi_env env,
        -: 1337:                                    void* externalData,
        -: 1338:                                    size_t byteLength) {
        -: 1339:  napi_value value;
        -: 1340:  napi_status status = napi_create_external_arraybuffer(
        -: 1341:    env, externalData, byteLength, nullptr, nullptr, &value);
        -: 1342:  NAPI_THROW_IF_FAILED(env, status, ArrayBuffer());
        -: 1343:
        -: 1344:  return ArrayBuffer(env, value, externalData, byteLength);
        -: 1345:}
        -: 1346:
        -: 1347:template <typename Finalizer>
        -: 1348:inline ArrayBuffer ArrayBuffer::New(napi_env env,
        -: 1349:                                    void* externalData,
        -: 1350:                                    size_t byteLength,
        -: 1351:                                    Finalizer finalizeCallback) {
        -: 1352:  napi_value value;
        -: 1353:  details::FinalizeData<void, Finalizer>* finalizeData =
        -: 1354:    new details::FinalizeData<void, Finalizer>({ finalizeCallback, nullptr });
        -: 1355:  napi_status status = napi_create_external_arraybuffer(
        -: 1356:    env,
        -: 1357:    externalData,
        -: 1358:    byteLength,
        -: 1359:    details::FinalizeData<void, Finalizer>::Wrapper,
        -: 1360:    finalizeData,
        -: 1361:    &value);
        -: 1362:  if (status != napi_ok) {
        -: 1363:    delete finalizeData;
        -: 1364:    NAPI_THROW_IF_FAILED(env, status, ArrayBuffer());
        -: 1365:  }
        -: 1366:
        -: 1367:  return ArrayBuffer(env, value, externalData, byteLength);
        -: 1368:}
        -: 1369:
        -: 1370:template <typename Finalizer, typename Hint>
        -: 1371:inline ArrayBuffer ArrayBuffer::New(napi_env env,
        -: 1372:                                    void* externalData,
        -: 1373:                                    size_t byteLength,
        -: 1374:                                    Finalizer finalizeCallback,
        -: 1375:                                    Hint* finalizeHint) {
        -: 1376:  napi_value value;
        -: 1377:  details::FinalizeData<void, Finalizer, Hint>* finalizeData =
        -: 1378:    new details::FinalizeData<void, Finalizer, Hint>({ finalizeCallback, finalizeHint });
        -: 1379:  napi_status status = napi_create_external_arraybuffer(
        -: 1380:    env,
        -: 1381:    externalData,
        -: 1382:    byteLength,
        -: 1383:    details::FinalizeData<void, Finalizer, Hint>::WrapperWithHint,
        -: 1384:    finalizeData,
        -: 1385:    &value);
        -: 1386:  if (status != napi_ok) {
        -: 1387:    delete finalizeData;
        -: 1388:    NAPI_THROW_IF_FAILED(env, status, ArrayBuffer());
        -: 1389:  }
        -: 1390:
        -: 1391:  return ArrayBuffer(env, value, externalData, byteLength);
        -: 1392:}
        -: 1393:
        -: 1394:inline ArrayBuffer::ArrayBuffer() : Object(), _data(nullptr), _length(0) {
        -: 1395:}
        -: 1396:
        -: 1397:inline ArrayBuffer::ArrayBuffer(napi_env env, napi_value value)
        -: 1398:  : Object(env, value), _data(nullptr), _length(0) {
        -: 1399:}
        -: 1400:
        -: 1401:inline ArrayBuffer::ArrayBuffer(napi_env env, napi_value value, void* data, size_t length)
        -: 1402:  : Object(env, value), _data(data), _length(length) {
        -: 1403:}
        -: 1404:
        -: 1405:inline void* ArrayBuffer::Data() {
        -: 1406:  EnsureInfo();
        -: 1407:  return _data;
        -: 1408:}
        -: 1409:
        -: 1410:inline size_t ArrayBuffer::ByteLength() {
        -: 1411:  EnsureInfo();
        -: 1412:  return _length;
        -: 1413:}
        -: 1414:
        -: 1415:inline void ArrayBuffer::EnsureInfo() const {
        -: 1416:  // The ArrayBuffer instance may have been constructed from a napi_value whose
        -: 1417:  // length/data are not yet known. Fetch and cache these values just once,
        -: 1418:  // since they can never change during the lifetime of the ArrayBuffer.
        -: 1419:  if (_data == nullptr) {
        -: 1420:    napi_status status = napi_get_arraybuffer_info(_env, _value, &_data, &_length);
        -: 1421:    NAPI_THROW_IF_FAILED_VOID(_env, status);
        -: 1422:  }
        -: 1423:}
        -: 1424:
        -: 1425:////////////////////////////////////////////////////////////////////////////////
        -: 1426:// DataView class
        -: 1427:////////////////////////////////////////////////////////////////////////////////
        -: 1428:inline DataView DataView::New(napi_env env,
        -: 1429:                              Napi::ArrayBuffer arrayBuffer) {
        -: 1430:  return New(env, arrayBuffer, 0, arrayBuffer.ByteLength());
        -: 1431:}
        -: 1432:
        -: 1433:inline DataView DataView::New(napi_env env,
        -: 1434:                              Napi::ArrayBuffer arrayBuffer,
        -: 1435:                              size_t byteOffset) {
        -: 1436:  if (byteOffset > arrayBuffer.ByteLength()) {
        -: 1437:    NAPI_THROW(RangeError::New(env,
        -: 1438:        "Start offset is outside the bounds of the buffer"),
        -: 1439:        DataView());
        -: 1440:  }
        -: 1441:  return New(env, arrayBuffer, byteOffset,
        -: 1442:      arrayBuffer.ByteLength() - byteOffset);
        -: 1443:}
        -: 1444:
        -: 1445:inline DataView DataView::New(napi_env env,
        -: 1446:                              Napi::ArrayBuffer arrayBuffer,
        -: 1447:                              size_t byteOffset,
        -: 1448:                              size_t byteLength) {
        -: 1449:  if (byteOffset + byteLength > arrayBuffer.ByteLength()) {
        -: 1450:    NAPI_THROW(RangeError::New(env, "Invalid DataView length"),
        -: 1451:               DataView());
        -: 1452:  }
        -: 1453:  napi_value value;
        -: 1454:  napi_status status = napi_create_dataview(
        -: 1455:    env, byteLength, arrayBuffer, byteOffset, &value);
        -: 1456:  NAPI_THROW_IF_FAILED(env, status, DataView());
        -: 1457:  return DataView(env, value);
        -: 1458:}
        -: 1459:
        -: 1460:inline DataView::DataView() : Object() {
        -: 1461:}
        -: 1462:
        -: 1463:inline DataView::DataView(napi_env env, napi_value value) : Object(env, value) {
        -: 1464:  napi_status status = napi_get_dataview_info(
        -: 1465:    _env,
        -: 1466:    _value   /* dataView */,
        -: 1467:    &_length /* byteLength */,
        -: 1468:    &_data   /* data */,
        -: 1469:    nullptr  /* arrayBuffer */,
        -: 1470:    nullptr  /* byteOffset */);
        -: 1471:  NAPI_THROW_IF_FAILED_VOID(_env, status);
        -: 1472:}
        -: 1473:
        -: 1474:inline Napi::ArrayBuffer DataView::ArrayBuffer() const {
        -: 1475:  napi_value arrayBuffer;
        -: 1476:  napi_status status = napi_get_dataview_info(
        -: 1477:    _env,
        -: 1478:    _value       /* dataView */,
        -: 1479:    nullptr      /* byteLength */,
        -: 1480:    nullptr      /* data */,
        -: 1481:    &arrayBuffer /* arrayBuffer */,
        -: 1482:    nullptr      /* byteOffset */);
        -: 1483:  NAPI_THROW_IF_FAILED(_env, status, Napi::ArrayBuffer());
        -: 1484:  return Napi::ArrayBuffer(_env, arrayBuffer);
        -: 1485:}
        -: 1486:
        -: 1487:inline size_t DataView::ByteOffset() const {
        -: 1488:  size_t byteOffset;
        -: 1489:  napi_status status = napi_get_dataview_info(
        -: 1490:    _env,
        -: 1491:    _value      /* dataView */,
        -: 1492:    nullptr     /* byteLength */,
        -: 1493:    nullptr     /* data */,
        -: 1494:    nullptr     /* arrayBuffer */,
        -: 1495:    &byteOffset /* byteOffset */);
        -: 1496:  NAPI_THROW_IF_FAILED(_env, status, 0);
        -: 1497:  return byteOffset;
        -: 1498:}
        -: 1499:
        -: 1500:inline size_t DataView::ByteLength() const {
        -: 1501:  return _length;
        -: 1502:}
        -: 1503:
        -: 1504:inline void* DataView::Data() const {
        -: 1505:  return _data;
        -: 1506:}
        -: 1507:
        -: 1508:inline float DataView::GetFloat32(size_t byteOffset) const {
        -: 1509:  return ReadData<float>(byteOffset);
        -: 1510:}
        -: 1511:
        -: 1512:inline double DataView::GetFloat64(size_t byteOffset) const {
        -: 1513:  return ReadData<double>(byteOffset);
        -: 1514:}
        -: 1515:
        -: 1516:inline int8_t DataView::GetInt8(size_t byteOffset) const {
        -: 1517:  return ReadData<int8_t>(byteOffset);
        -: 1518:}
        -: 1519:
        -: 1520:inline int16_t DataView::GetInt16(size_t byteOffset) const {
        -: 1521:  return ReadData<int16_t>(byteOffset);
        -: 1522:}
        -: 1523:
        -: 1524:inline int32_t DataView::GetInt32(size_t byteOffset) const {
        -: 1525:  return ReadData<int32_t>(byteOffset);
        -: 1526:}
        -: 1527:
        -: 1528:inline uint8_t DataView::GetUint8(size_t byteOffset) const {
        -: 1529:  return ReadData<uint8_t>(byteOffset);
        -: 1530:}
        -: 1531:
        -: 1532:inline uint16_t DataView::GetUint16(size_t byteOffset) const {
        -: 1533:  return ReadData<uint16_t>(byteOffset);
        -: 1534:}
        -: 1535:
        -: 1536:inline uint32_t DataView::GetUint32(size_t byteOffset) const {
        -: 1537:  return ReadData<uint32_t>(byteOffset);
        -: 1538:}
        -: 1539:
        -: 1540:inline void DataView::SetFloat32(size_t byteOffset, float value) const {
        -: 1541:  WriteData<float>(byteOffset, value);
        -: 1542:}
        -: 1543:
        -: 1544:inline void DataView::SetFloat64(size_t byteOffset, double value) const {
        -: 1545:  WriteData<double>(byteOffset, value);
        -: 1546:}
        -: 1547:
        -: 1548:inline void DataView::SetInt8(size_t byteOffset, int8_t value) const {
        -: 1549:  WriteData<int8_t>(byteOffset, value);
        -: 1550:}
        -: 1551:
        -: 1552:inline void DataView::SetInt16(size_t byteOffset, int16_t value) const {
        -: 1553:  WriteData<int16_t>(byteOffset, value);
        -: 1554:}
        -: 1555:
        -: 1556:inline void DataView::SetInt32(size_t byteOffset, int32_t value) const {
        -: 1557:  WriteData<int32_t>(byteOffset, value);
        -: 1558:}
        -: 1559:
        -: 1560:inline void DataView::SetUint8(size_t byteOffset, uint8_t value) const {
        -: 1561:  WriteData<uint8_t>(byteOffset, value);
        -: 1562:}
        -: 1563:
        -: 1564:inline void DataView::SetUint16(size_t byteOffset, uint16_t value) const {
        -: 1565:  WriteData<uint16_t>(byteOffset, value);
        -: 1566:}
        -: 1567:
        -: 1568:inline void DataView::SetUint32(size_t byteOffset, uint32_t value) const {
        -: 1569:  WriteData<uint32_t>(byteOffset, value);
        -: 1570:}
        -: 1571:
        -: 1572:template <typename T>
        -: 1573:inline T DataView::ReadData(size_t byteOffset) const {
        -: 1574:  if (byteOffset + sizeof(T) > _length ||
        -: 1575:      byteOffset + sizeof(T) < byteOffset) {  // overflow
        -: 1576:    NAPI_THROW(RangeError::New(_env,
        -: 1577:        "Offset is outside the bounds of the DataView"), 0);
        -: 1578:  }
        -: 1579:
        -: 1580:  return *reinterpret_cast<T*>(static_cast<uint8_t*>(_data) + byteOffset);
        -: 1581:}
        -: 1582:
        -: 1583:template <typename T>
        -: 1584:inline void DataView::WriteData(size_t byteOffset, T value) const {
        -: 1585:  if (byteOffset + sizeof(T) > _length ||
        -: 1586:      byteOffset + sizeof(T) < byteOffset) {  // overflow
        -: 1587:    NAPI_THROW_VOID(RangeError::New(_env,
        -: 1588:        "Offset is outside the bounds of the DataView"));
        -: 1589:  }
        -: 1590:
        -: 1591:  *reinterpret_cast<T*>(static_cast<uint8_t*>(_data) + byteOffset) = value;
        -: 1592:}
        -: 1593:
        -: 1594:////////////////////////////////////////////////////////////////////////////////
        -: 1595:// TypedArray class
        -: 1596:////////////////////////////////////////////////////////////////////////////////
        -: 1597:
        -: 1598:inline TypedArray::TypedArray()
        -: 1599:  : Object(), _type(TypedArray::unknown_array_type), _length(0) {
        -: 1600:}
        -: 1601:
function _ZN4Napi10TypedArrayC2EP10napi_env__P12napi_value__ called 554 returned 100% blocks executed 100%
      554: 1602:inline TypedArray::TypedArray(napi_env env, napi_value value)
      554: 1603:  : Object(env, value), _type(TypedArray::unknown_array_type), _length(0) {
      554: 1604:}
        -: 1605:
        -: 1606:inline TypedArray::TypedArray(napi_env env,
        -: 1607:                              napi_value value,
        -: 1608:                              napi_typedarray_type type,
        -: 1609:                              size_t length)
        -: 1610:  : Object(env, value), _type(type), _length(length) {
        -: 1611:}
        -: 1612:
        -: 1613:inline napi_typedarray_type TypedArray::TypedArrayType() const {
        -: 1614:  if (_type == TypedArray::unknown_array_type) {
        -: 1615:    napi_status status = napi_get_typedarray_info(_env, _value,
        -: 1616:      &const_cast<TypedArray*>(this)->_type, &const_cast<TypedArray*>(this)->_length,
        -: 1617:      nullptr, nullptr, nullptr);
        -: 1618:    NAPI_THROW_IF_FAILED(_env, status, napi_int8_array);
        -: 1619:  }
        -: 1620:
        -: 1621:  return _type;
        -: 1622:}
        -: 1623:
        -: 1624:inline uint8_t TypedArray::ElementSize() const {
        -: 1625:  switch (TypedArrayType()) {
        -: 1626:    case napi_int8_array:
        -: 1627:    case napi_uint8_array:
        -: 1628:    case napi_uint8_clamped_array:
        -: 1629:      return 1;
        -: 1630:    case napi_int16_array:
        -: 1631:    case napi_uint16_array:
        -: 1632:      return 2;
        -: 1633:    case napi_int32_array:
        -: 1634:    case napi_uint32_array:
        -: 1635:    case napi_float32_array:
        -: 1636:      return 4;
        -: 1637:    case napi_float64_array:
        -: 1638:      return 8;
        -: 1639:    default:
        -: 1640:      return 0;
        -: 1641:  }
        -: 1642:}
        -: 1643:
        -: 1644:inline size_t TypedArray::ElementLength() const {
        -: 1645:  if (_type == TypedArray::unknown_array_type) {
        -: 1646:    napi_status status = napi_get_typedarray_info(_env, _value,
        -: 1647:      &const_cast<TypedArray*>(this)->_type, &const_cast<TypedArray*>(this)->_length,
        -: 1648:      nullptr, nullptr, nullptr);
        -: 1649:    NAPI_THROW_IF_FAILED(_env, status, 0);
        -: 1650:  }
        -: 1651:
        -: 1652:  return _length;
        -: 1653:}
        -: 1654:
        -: 1655:inline size_t TypedArray::ByteOffset() const {
        -: 1656:  size_t byteOffset;
        -: 1657:  napi_status status = napi_get_typedarray_info(
        -: 1658:    _env, _value, nullptr, nullptr, nullptr, nullptr, &byteOffset);
        -: 1659:  NAPI_THROW_IF_FAILED(_env, status, 0);
        -: 1660:  return byteOffset;
        -: 1661:}
        -: 1662:
        -: 1663:inline size_t TypedArray::ByteLength() const {
        -: 1664:  return ElementSize() * ElementLength();
        -: 1665:}
        -: 1666:
        -: 1667:inline Napi::ArrayBuffer TypedArray::ArrayBuffer() const {
        -: 1668:  napi_value arrayBuffer;
        -: 1669:  napi_status status = napi_get_typedarray_info(
        -: 1670:    _env, _value, nullptr, nullptr, nullptr, &arrayBuffer, nullptr);
        -: 1671:  NAPI_THROW_IF_FAILED(_env, status, Napi::ArrayBuffer());
        -: 1672:  return Napi::ArrayBuffer(_env, arrayBuffer);
        -: 1673:}
        -: 1674:
        -: 1675:////////////////////////////////////////////////////////////////////////////////
        -: 1676:// TypedArrayOf<T> class
        -: 1677:////////////////////////////////////////////////////////////////////////////////
        -: 1678:
        -: 1679:template <typename T>
        -: 1680:inline TypedArrayOf<T> TypedArrayOf<T>::New(napi_env env,
        -: 1681:                                            size_t elementLength,
        -: 1682:                                            napi_typedarray_type type) {
        -: 1683:  Napi::ArrayBuffer arrayBuffer = Napi::ArrayBuffer::New(env, elementLength * sizeof (T));
        -: 1684:  return New(env, elementLength, arrayBuffer, 0, type);
        -: 1685:}
        -: 1686:
        -: 1687:template <typename T>
        -: 1688:inline TypedArrayOf<T> TypedArrayOf<T>::New(napi_env env,
        -: 1689:                                            size_t elementLength,
        -: 1690:                                            Napi::ArrayBuffer arrayBuffer,
        -: 1691:                                            size_t bufferOffset,
        -: 1692:                                            napi_typedarray_type type) {
        -: 1693:  napi_value value;
        -: 1694:  napi_status status = napi_create_typedarray(
        -: 1695:    env, type, elementLength, arrayBuffer, bufferOffset, &value);
        -: 1696:  NAPI_THROW_IF_FAILED(env, status, TypedArrayOf<T>());
        -: 1697:
        -: 1698:  return TypedArrayOf<T>(
        -: 1699:    env, value, type, elementLength,
        -: 1700:    reinterpret_cast<T*>(reinterpret_cast<uint8_t*>(arrayBuffer.Data()) + bufferOffset));
        -: 1701:}
        -: 1702:
        -: 1703:template <typename T>
        -: 1704:inline TypedArrayOf<T>::TypedArrayOf() : TypedArray(), _data(nullptr) {
        -: 1705:}
        -: 1706:
        -: 1707:template <typename T>
function _ZN4Napi12TypedArrayOfIhEC2EP10napi_env__P12napi_value__ called 554 returned 100% blocks executed 42%
      554: 1708:inline TypedArrayOf<T>::TypedArrayOf(napi_env env, napi_value value)
      554: 1709:  : TypedArray(env, value), _data(nullptr) {
      554: 1710:  napi_status status = napi_get_typedarray_info(
      554: 1711:    _env, _value, &_type, &_length, reinterpret_cast<void**>(&_data), nullptr, nullptr);
      554: 1712:  NAPI_THROW_IF_FAILED_VOID(_env, status);
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
      554: 1713:}
        -: 1714:
        -: 1715:template <typename T>
        -: 1716:inline TypedArrayOf<T>::TypedArrayOf(napi_env env,
        -: 1717:                                     napi_value value,
        -: 1718:                                     napi_typedarray_type type,
        -: 1719:                                     size_t length,
        -: 1720:                                     T* data)
        -: 1721:  : TypedArray(env, value, type, length), _data(data) {
        -: 1722:  if (!(type == TypedArrayTypeForPrimitiveType<T>() ||
        -: 1723:      (type == napi_uint8_clamped_array && std::is_same<T, uint8_t>::value))) {
        -: 1724:    NAPI_THROW_VOID(TypeError::New(env, "Array type must match the template parameter. "
        -: 1725:      "(Uint8 arrays may optionally have the \"clamped\" array type.)"));
        -: 1726:  }
        -: 1727:}
        -: 1728:
        -: 1729:template <typename T>
        -: 1730:inline T& TypedArrayOf<T>::operator [](size_t index) {
        -: 1731:  return _data[index];
        -: 1732:}
        -: 1733:
        -: 1734:template <typename T>
        -: 1735:inline const T& TypedArrayOf<T>::operator [](size_t index) const {
        -: 1736:  return _data[index];
        -: 1737:}
        -: 1738:
        -: 1739:template <typename T>
        -: 1740:inline T* TypedArrayOf<T>::Data() {
        -: 1741:  return _data;
        -: 1742:}
        -: 1743:
        -: 1744:template <typename T>
        -: 1745:inline const T* TypedArrayOf<T>::Data() const {
        -: 1746:  return _data;
        -: 1747:}
        -: 1748:
        -: 1749:////////////////////////////////////////////////////////////////////////////////
        -: 1750:// Function class
        -: 1751:////////////////////////////////////////////////////////////////////////////////
        -: 1752:
        -: 1753:template <typename CbData>
        -: 1754:static inline napi_status
        -: 1755:CreateFunction(napi_env env,
        -: 1756:               const char* utf8name,
        -: 1757:               napi_callback cb,
        -: 1758:               CbData* data,
        -: 1759:               napi_value* result) {
        -: 1760:  napi_status status =
        -: 1761:      napi_create_function(env, utf8name, NAPI_AUTO_LENGTH, cb, data, result);
        -: 1762:  if (status == napi_ok) {
        -: 1763:    status = Napi::details::AttachData(env, *result, data);
        -: 1764:  }
        -: 1765:
        -: 1766:  return status;
        -: 1767:}
        -: 1768:
        -: 1769:template <typename Callable>
        -: 1770:inline Function Function::New(napi_env env,
        -: 1771:                              Callable cb,
        -: 1772:                              const char* utf8name,
        -: 1773:                              void* data) {
        -: 1774:  typedef decltype(cb(CallbackInfo(nullptr, nullptr))) ReturnType;
        -: 1775:  typedef details::CallbackData<Callable, ReturnType> CbData;
        -: 1776:  auto callbackData = new CbData({ cb, data });
        -: 1777:
        -: 1778:  napi_value value;
        -: 1779:  napi_status status = CreateFunction(env,
        -: 1780:                                      utf8name,
        -: 1781:                                      CbData::Wrapper,
        -: 1782:                                      callbackData,
        -: 1783:                                      &value);
        -: 1784:  if (status != napi_ok) {
        -: 1785:    delete callbackData;
        -: 1786:    NAPI_THROW_IF_FAILED(env, status, Function());
        -: 1787:  }
        -: 1788:
        -: 1789:  return Function(env, value);
        -: 1790:}
        -: 1791:
        -: 1792:template <typename Callable>
        -: 1793:inline Function Function::New(napi_env env,
        -: 1794:                              Callable cb,
        -: 1795:                              const std::string& utf8name,
        -: 1796:                              void* data) {
        -: 1797:  return New(env, cb, utf8name.c_str(), data);
        -: 1798:}
        -: 1799:
        -: 1800:inline Function::Function() : Object() {
        -: 1801:}
        -: 1802:
function _ZN4Napi8FunctionC2EP10napi_env__P12napi_value__ called 0 returned 0% blocks executed 0%
    #####: 1803:inline Function::Function(napi_env env, napi_value value) : Object(env, value) {
    #####: 1804:}
        -: 1805:
        -: 1806:inline Value Function::operator ()(const std::initializer_list<napi_value>& args) const {
        -: 1807:  return Call(Env().Undefined(), args);
        -: 1808:}
        -: 1809:
        -: 1810:inline Value Function::Call(const std::initializer_list<napi_value>& args) const {
        -: 1811:  return Call(Env().Undefined(), args);
        -: 1812:}
        -: 1813:
        -: 1814:inline Value Function::Call(const std::vector<napi_value>& args) const {
        -: 1815:  return Call(Env().Undefined(), args);
        -: 1816:}
        -: 1817:
        -: 1818:inline Value Function::Call(size_t argc, const napi_value* args) const {
        -: 1819:  return Call(Env().Undefined(), argc, args);
        -: 1820:}
        -: 1821:
function _ZNK4Napi8Function4CallEP12napi_value__RKSt16initializer_listIS2_E called 0 returned 0% blocks executed 0%
    #####: 1822:inline Value Function::Call(napi_value recv, const std::initializer_list<napi_value>& args) const {
    #####: 1823:  return Call(recv, args.size(), args.begin());
        -: 1824:}
        -: 1825:
function _ZNK4Napi8Function4CallEP12napi_value__RKSt6vectorIS2_SaIS2_EE called 0 returned 0% blocks executed 0%
    #####: 1826:inline Value Function::Call(napi_value recv, const std::vector<napi_value>& args) const {
    #####: 1827:  return Call(recv, args.size(), args.data());
        -: 1828:}
        -: 1829:
function _ZNK4Napi8Function4CallEP12napi_value__mPKS2_ called 0 returned 0% blocks executed 0%
    #####: 1830:inline Value Function::Call(napi_value recv, size_t argc, const napi_value* args) const {
        -: 1831:  napi_value result;
    #####: 1832:  napi_status status = napi_call_function(
    #####: 1833:    _env, recv, _value, argc, args, &result);
    #####: 1834:  NAPI_THROW_IF_FAILED(_env, status, Value());
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1835:  return Value(_env, result);
    #####: 1836:}
        -: 1837:
        -: 1838:inline Value Function::MakeCallback(
        -: 1839:    napi_value recv,
        -: 1840:    const std::initializer_list<napi_value>& args,
        -: 1841:    napi_async_context context) const {
        -: 1842:  return MakeCallback(recv, args.size(), args.begin(), context);
        -: 1843:}
        -: 1844:
        -: 1845:inline Value Function::MakeCallback(
        -: 1846:    napi_value recv,
        -: 1847:    const std::vector<napi_value>& args,
        -: 1848:    napi_async_context context) const {
        -: 1849:  return MakeCallback(recv, args.size(), args.data(), context);
        -: 1850:}
        -: 1851:
        -: 1852:inline Value Function::MakeCallback(
        -: 1853:    napi_value recv,
        -: 1854:    size_t argc,
        -: 1855:    const napi_value* args,
        -: 1856:    napi_async_context context) const {
        -: 1857:  napi_value result;
        -: 1858:  napi_status status = napi_make_callback(
        -: 1859:    _env, context, recv, _value, argc, args, &result);
        -: 1860:  NAPI_THROW_IF_FAILED(_env, status, Value());
        -: 1861:  return Value(_env, result);
        -: 1862:}
        -: 1863:
        -: 1864:inline Object Function::New(const std::initializer_list<napi_value>& args) const {
        -: 1865:  return New(args.size(), args.begin());
        -: 1866:}
        -: 1867:
        -: 1868:inline Object Function::New(const std::vector<napi_value>& args) const {
        -: 1869:  return New(args.size(), args.data());
        -: 1870:}
        -: 1871:
        -: 1872:inline Object Function::New(size_t argc, const napi_value* args) const {
        -: 1873:  napi_value result;
        -: 1874:  napi_status status = napi_new_instance(
        -: 1875:    _env, _value, argc, args, &result);
        -: 1876:  NAPI_THROW_IF_FAILED(_env, status, Object());
        -: 1877:  return Object(_env, result);
        -: 1878:}
        -: 1879:
        -: 1880:////////////////////////////////////////////////////////////////////////////////
        -: 1881:// Promise class
        -: 1882:////////////////////////////////////////////////////////////////////////////////
        -: 1883:
        -: 1884:inline Promise::Deferred Promise::Deferred::New(napi_env env) {
        -: 1885:  return Promise::Deferred(env);
        -: 1886:}
        -: 1887:
        -: 1888:inline Promise::Deferred::Deferred(napi_env env) : _env(env) {
        -: 1889:  napi_status status = napi_create_promise(_env, &_deferred, &_promise);
        -: 1890:  NAPI_THROW_IF_FAILED_VOID(_env, status);
        -: 1891:}
        -: 1892:
        -: 1893:inline Promise Promise::Deferred::Promise() const {
        -: 1894:  return Napi::Promise(_env, _promise);
        -: 1895:}
        -: 1896:
        -: 1897:inline Napi::Env Promise::Deferred::Env() const {
        -: 1898:  return Napi::Env(_env);
        -: 1899:}
        -: 1900:
        -: 1901:inline void Promise::Deferred::Resolve(napi_value value) const {
        -: 1902:  napi_status status = napi_resolve_deferred(_env, _deferred, value);
        -: 1903:  NAPI_THROW_IF_FAILED_VOID(_env, status);
        -: 1904:}
        -: 1905:
        -: 1906:inline void Promise::Deferred::Reject(napi_value value) const {
        -: 1907:  napi_status status = napi_reject_deferred(_env, _deferred, value);
        -: 1908:  NAPI_THROW_IF_FAILED_VOID(_env, status);
        -: 1909:}
        -: 1910:
        -: 1911:inline Promise::Promise(napi_env env, napi_value value) : Object(env, value) {
        -: 1912:}
        -: 1913:
        -: 1914:////////////////////////////////////////////////////////////////////////////////
        -: 1915:// Buffer<T> class
        -: 1916:////////////////////////////////////////////////////////////////////////////////
        -: 1917:
        -: 1918:template <typename T>
        -: 1919:inline Buffer<T> Buffer<T>::New(napi_env env, size_t length) {
        -: 1920:  napi_value value;
        -: 1921:  void* data;
        -: 1922:  napi_status status = napi_create_buffer(env, length * sizeof (T), &data, &value);
        -: 1923:  NAPI_THROW_IF_FAILED(env, status, Buffer<T>());
        -: 1924:  return Buffer(env, value, length, static_cast<T*>(data));
        -: 1925:}
        -: 1926:
        -: 1927:template <typename T>
        -: 1928:inline Buffer<T> Buffer<T>::New(napi_env env, T* data, size_t length) {
        -: 1929:  napi_value value;
        -: 1930:  napi_status status = napi_create_external_buffer(
        -: 1931:    env, length * sizeof (T), data, nullptr, nullptr, &value);
        -: 1932:  NAPI_THROW_IF_FAILED(env, status, Buffer<T>());
        -: 1933:  return Buffer(env, value, length, data);
        -: 1934:}
        -: 1935:
        -: 1936:template <typename T>
        -: 1937:template <typename Finalizer>
        -: 1938:inline Buffer<T> Buffer<T>::New(napi_env env,
        -: 1939:                                T* data,
        -: 1940:                                size_t length,
        -: 1941:                                Finalizer finalizeCallback) {
        -: 1942:  napi_value value;
        -: 1943:  details::FinalizeData<T, Finalizer>* finalizeData =
        -: 1944:    new details::FinalizeData<T, Finalizer>({ finalizeCallback, nullptr });
        -: 1945:  napi_status status = napi_create_external_buffer(
        -: 1946:    env,
        -: 1947:    length * sizeof (T),
        -: 1948:    data,
        -: 1949:    details::FinalizeData<T, Finalizer>::Wrapper,
        -: 1950:    finalizeData,
        -: 1951:    &value);
        -: 1952:  if (status != napi_ok) {
        -: 1953:    delete finalizeData;
        -: 1954:    NAPI_THROW_IF_FAILED(env, status, Buffer());
        -: 1955:  }
        -: 1956:  return Buffer(env, value, length, data);
        -: 1957:}
        -: 1958:
        -: 1959:template <typename T>
        -: 1960:template <typename Finalizer, typename Hint>
function _ZN4Napi6BufferIcE3NewIZN12node_fontnik14AsyncComposite9GetResultENS_3EnvEEUlS5_PcPSsE_SsEES1_P10napi_env__S6_mT_PT0_ called 2 returned 100% blocks executed 27%
        2: 1961:inline Buffer<T> Buffer<T>::New(napi_env env,
        -: 1962:                                T* data,
        -: 1963:                                size_t length,
        -: 1964:                                Finalizer finalizeCallback,
        -: 1965:                                Hint* finalizeHint) {
        -: 1966:  napi_value value;
        2: 1967:  details::FinalizeData<T, Finalizer, Hint>* finalizeData =
        2: 1968:    new details::FinalizeData<T, Finalizer, Hint>({ finalizeCallback, finalizeHint });
        2: 1969:  napi_status status = napi_create_external_buffer(
        2: 1970:    env,
        2: 1971:    length * sizeof (T),
        2: 1972:    data,
        -: 1973:    details::FinalizeData<T, Finalizer, Hint>::WrapperWithHint,
        2: 1974:    finalizeData,
        -: 1975:    &value);
        2: 1976:  if (status != napi_ok) {
branch  0 taken 0%
branch  1 taken 100%
    #####: 1977:    delete finalizeData;
branch  0 never executed
branch  1 never executed
    #####: 1978:    NAPI_THROW_IF_FAILED(env, status, Buffer());
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1979:  }
        2: 1980:  return Buffer(env, value, length, data);
    #####: 1981:}
        -: 1982:
        -: 1983:template <typename T>
function _ZN4Napi6BufferIcE4CopyEP10napi_env__PKcm called 261 returned 100% blocks executed 42%
      261: 1984:inline Buffer<T> Buffer<T>::Copy(napi_env env, const T* data, size_t length) {
        -: 1985:  napi_value value;
      261: 1986:  napi_status status = napi_create_buffer_copy(
      261: 1987:    env, length * sizeof (T), data, nullptr, &value);
      261: 1988:  NAPI_THROW_IF_FAILED(env, status, Buffer<T>());
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
      261: 1989:  return Buffer<T>(env, value);
    #####: 1990:}
        -: 1991:
        -: 1992:template <typename T>
        -: 1993:inline Buffer<T>::Buffer() : Uint8Array(), _length(0), _data(nullptr) {
        -: 1994:}
        -: 1995:
        -: 1996:template <typename T>
function _ZN4Napi6BufferIcEC2EP10napi_env__P12napi_value__ called 552 returned 100% blocks executed 100%
      552: 1997:inline Buffer<T>::Buffer(napi_env env, napi_value value)
      552: 1998:  : Uint8Array(env, value), _length(0), _data(nullptr) {
      552: 1999:}
        -: 2000:
        -: 2001:template <typename T>
function _ZN4Napi6BufferIcEC2EP10napi_env__P12napi_value__mPc called 2 returned 100% blocks executed 100%
        2: 2002:inline Buffer<T>::Buffer(napi_env env, napi_value value, size_t length, T* data)
        2: 2003:  : Uint8Array(env, value), _length(length), _data(data) {
        2: 2004:}
        -: 2005:
        -: 2006:template <typename T>
function _ZNK4Napi6BufferIcE6LengthEv called 283 returned 100% blocks executed 100%
      283: 2007:inline size_t Buffer<T>::Length() const {
      283: 2008:  EnsureInfo();
      283: 2009:  return _length;
        -: 2010:}
        -: 2011:
        -: 2012:template <typename T>
function _ZNK4Napi6BufferIcE4DataEv called 283 returned 100% blocks executed 100%
      283: 2013:inline T* Buffer<T>::Data() const {
      283: 2014:  EnsureInfo();
      283: 2015:  return _data;
        -: 2016:}
        -: 2017:
        -: 2018:template <typename T>
function _ZNK4Napi6BufferIcE10EnsureInfoEv called 566 returned 100% blocks executed 55%
      566: 2019:inline void Buffer<T>::EnsureInfo() const {
        -: 2020:  // The Buffer instance may have been constructed from a napi_value whose
        -: 2021:  // length/data are not yet known. Fetch and cache these values just once,
        -: 2022:  // since they can never change during the lifetime of the Buffer.
      566: 2023:  if (_data == nullptr) {
branch  0 taken 51%
branch  1 taken 49%
        -: 2024:    size_t byteLength;
        -: 2025:    void* voidData;
      287: 2026:    napi_status status = napi_get_buffer_info(_env, _value, &voidData, &byteLength);
      287: 2027:    NAPI_THROW_IF_FAILED_VOID(_env, status);
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
      287: 2028:    _length = byteLength / sizeof (T);
      287: 2029:    _data = static_cast<T*>(voidData);
      287: 2030:  }
      566: 2031:}
        -: 2032:
        -: 2033:////////////////////////////////////////////////////////////////////////////////
        -: 2034:// Error class
        -: 2035:////////////////////////////////////////////////////////////////////////////////
        -: 2036:
function _ZN4Napi5Error3NewEP10napi_env__ called 0 returned 0% blocks executed 0%
    #####: 2037:inline Error Error::New(napi_env env) {
        -: 2038:  napi_status status;
    #####: 2039:  napi_value error = nullptr;
        -: 2040:
        -: 2041:  const napi_extended_error_info* info;
    #####: 2042:  status = napi_get_last_error_info(env, &info);
    #####: 2043:  NAPI_FATAL_IF_FAILED(status, "Error::New", "napi_get_last_error_info");
branch  0 never executed
branch  1 never executed
        -: 2044:
    #####: 2045:  if (info->error_code == napi_pending_exception) {
branch  0 never executed
branch  1 never executed
    #####: 2046:    status = napi_get_and_clear_last_exception(env, &error);
    #####: 2047:    NAPI_FATAL_IF_FAILED(status, "Error::New", "napi_get_and_clear_last_exception");
branch  0 never executed
branch  1 never executed
    #####: 2048:  }
        -: 2049:  else {
    #####: 2050:    const char* error_message = info->error_message != nullptr ?
branch  0 never executed
branch  1 never executed
    #####: 2051:      info->error_message : "Error in native callback";
        -: 2052:
        -: 2053:    bool isExceptionPending;
    #####: 2054:    status = napi_is_exception_pending(env, &isExceptionPending);
    #####: 2055:    NAPI_FATAL_IF_FAILED(status, "Error::New", "napi_is_exception_pending");
branch  0 never executed
branch  1 never executed
        -: 2056:
    #####: 2057:    if (isExceptionPending) {
branch  0 never executed
branch  1 never executed
    #####: 2058:      status = napi_get_and_clear_last_exception(env, &error);
    #####: 2059:      NAPI_FATAL_IF_FAILED(status, "Error::New", "napi_get_and_clear_last_exception");
branch  0 never executed
branch  1 never executed
    #####: 2060:    }
        -: 2061:
        -: 2062:    napi_value message;
    #####: 2063:    status = napi_create_string_utf8(
    #####: 2064:      env,
    #####: 2065:      error_message,
    #####: 2066:      std::strlen(error_message),
        -: 2067:      &message);
    #####: 2068:    NAPI_FATAL_IF_FAILED(status, "Error::New", "napi_create_string_utf8");
branch  0 never executed
branch  1 never executed
        -: 2069:
    #####: 2070:    switch (info->error_code) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -: 2071:    case napi_object_expected:
        -: 2072:    case napi_string_expected:
        -: 2073:    case napi_boolean_expected:
        -: 2074:    case napi_number_expected:
    #####: 2075:      status = napi_create_type_error(env, nullptr, message, &error);
    #####: 2076:      break;
        -: 2077:    default:
    #####: 2078:      status = napi_create_error(env, nullptr,  message, &error);
    #####: 2079:      break;
        -: 2080:    }
    #####: 2081:    NAPI_FATAL_IF_FAILED(status, "Error::New", "napi_create_error");
branch  0 never executed
branch  1 never executed
        -: 2082:  }
        -: 2083:
    #####: 2084:  return Error(env, error);
        -: 2085:}
        -: 2086:
function _ZN4Napi5Error3NewEP10napi_env__PKc called 0 returned 0% blocks executed 0%
    #####: 2087:inline Error Error::New(napi_env env, const char* message) {
    #####: 2088:  return Error::New<Error>(env, message, std::strlen(message), napi_create_error);
        -: 2089:}
        -: 2090:
function _ZN4Napi5Error3NewEP10napi_env__RKSs called 6 returned 100% blocks executed 100%
        6: 2091:inline Error Error::New(napi_env env, const std::string& message) {
        6: 2092:  return Error::New<Error>(env, message.c_str(), message.size(), napi_create_error);
        -: 2093:}
        -: 2094:
function _ZN4Napi5Error5FatalEPKcS2_ called 0 returned 0% blocks executed 0%
    #####: 2095:inline NAPI_NO_RETURN void Error::Fatal(const char* location, const char* message) {
    #####: 2096:  napi_fatal_error(location, NAPI_AUTO_LENGTH, message, NAPI_AUTO_LENGTH);
        -: 2097:}
        -: 2098:
        -: 2099:inline Error::Error() : ObjectReference() {
        -: 2100:}
        -: 2101:
function _ZN4Napi5ErrorC2EP10napi_env__P12napi_value__ called 0 returned 0% blocks executed 0%
    #####: 2102:inline Error::Error(napi_env env, napi_value value) : ObjectReference(env, nullptr) {
branch  0 never executed
branch  1 never executed
    #####: 2103:  if (value != nullptr) {
branch  0 never executed
branch  1 never executed
    #####: 2104:    napi_status status = napi_create_reference(env, value, 1, &_ref);
branch  0 never executed
branch  1 never executed
        -: 2105:
        -: 2106:    // Avoid infinite recursion in the failure case.
        -: 2107:    // Don't try to construct & throw another Error instance.
    #####: 2108:    NAPI_FATAL_IF_FAILED(status, "Error::Error", "napi_create_reference");
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2109:  }
    #####: 2110:}
        -: 2111:
        -: 2112:inline Error::Error(Error&& other) : ObjectReference(std::move(other)) {
        -: 2113:}
        -: 2114:
        -: 2115:inline Error& Error::operator =(Error&& other) {
        -: 2116:  static_cast<Reference<Object>*>(this)->operator=(std::move(other));
        -: 2117:  return *this;
        -: 2118:}
        -: 2119:
        -: 2120:inline Error::Error(const Error& other) : ObjectReference(other) {
        -: 2121:}
        -: 2122:
        -: 2123:inline Error& Error::operator =(Error& other) {
        -: 2124:  Reset();
        -: 2125:
        -: 2126:  _env = other.Env();
        -: 2127:  HandleScope scope(_env);
        -: 2128:
        -: 2129:  napi_value value = other.Value();
        -: 2130:  if (value != nullptr) {
        -: 2131:    napi_status status = napi_create_reference(_env, value, 1, &_ref);
        -: 2132:    NAPI_THROW_IF_FAILED(_env, status, *this);
        -: 2133:  }
        -: 2134:
        -: 2135:  return *this;
        -: 2136:}
        -: 2137:
function _ZNK4Napi5Error7MessageEv called 0 returned 0% blocks executed 0%
    #####: 2138:inline const std::string& Error::Message() const NAPI_NOEXCEPT {
    #####: 2139:  if (_message.size() == 0 && _env != nullptr) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 2140:#ifdef NAPI_CPP_EXCEPTIONS
        -: 2141:    try {
    #####: 2142:      _message = Get("message").As<String>();
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2143:    }
        -: 2144:    catch (...) {
        -: 2145:      // Catch all errors here, to include e.g. a std::bad_alloc from
        -: 2146:      // the std::string::operator=, because this method may not throw.
    #####: 2147:    }
branch  0 never executed
branch  1 never executed
        -: 2148:#else // NAPI_CPP_EXCEPTIONS
        -: 2149:    _message = Get("message").As<String>();
        -: 2150:#endif // NAPI_CPP_EXCEPTIONS
    #####: 2151:  }
    #####: 2152:  return _message;
    #####: 2153:}
        -: 2154:
function _ZNK4Napi5Error26ThrowAsJavaScriptExceptionEv called 0 returned 0% blocks executed 0%
    #####: 2155:inline void Error::ThrowAsJavaScriptException() const {
    #####: 2156:  HandleScope scope(_env);
    #####: 2157:  if (!IsEmpty()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 2158:
        -: 2159:    // We intentionally don't use `NAPI_THROW_*` macros here to ensure
        -: 2160:    // that there is no possible recursion as `ThrowAsJavaScriptException`
        -: 2161:    // is part of `NAPI_THROW_*` macro definition for noexcept.
        -: 2162:
    #####: 2163:    napi_status status = napi_throw(_env, Value());
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 2164:
        -: 2165:#ifdef NAPI_CPP_EXCEPTIONS
    #####: 2166:    if (status != napi_ok) {
branch  0 never executed
branch  1 never executed
    #####: 2167:      throw Error::New(_env);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 2168:    }
        -: 2169:#else // NAPI_CPP_EXCEPTIONS
        -: 2170:    NAPI_FATAL_IF_FAILED(status, "Error::ThrowAsJavaScriptException", "napi_throw");
        -: 2171:#endif // NAPI_CPP_EXCEPTIONS
    #####: 2172:  }
    #####: 2173:}
        -: 2174:
        -: 2175:#ifdef NAPI_CPP_EXCEPTIONS
        -: 2176:
function _ZNK4Napi5Error4whatEv called 0 returned 0% blocks executed 0%
    #####: 2177:inline const char* Error::what() const NAPI_NOEXCEPT {
    #####: 2178:  return Message().c_str();
        -: 2179:}
        -: 2180:
        -: 2181:#endif // NAPI_CPP_EXCEPTIONS
        -: 2182:
        -: 2183:template <typename TError>
function _ZN4Napi5Error3NewINS_9TypeErrorEEET_P10napi_env__PKcmPF11napi_statusS5_P12napi_value__SA_PSA_E called 13 returned 100% blocks executed 36%
function _ZN4Napi5Error3NewIS0_EET_P10napi_env__PKcmPF11napi_statusS4_P12napi_value__S9_PS9_E called 6 returned 100% blocks executed 36%
       19: 2184:inline TError Error::New(napi_env env,
        -: 2185:                         const char* message,
        -: 2186:                         size_t length,
        -: 2187:                         create_error_fn create_error) {
        -: 2188:  napi_value str;
       19: 2189:  napi_status status = napi_create_string_utf8(env, message, length, &str);
       19: 2190:  NAPI_THROW_IF_FAILED(env, status, TError());
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 taken 0%
branch  5 taken 100%
branch  6 never executed
branch  7 never executed
        -: 2191:
        -: 2192:  napi_value error;
       19: 2193:  status = create_error(env, nullptr, str, &error);
       19: 2194:  NAPI_THROW_IF_FAILED(env, status, TError());
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 taken 0%
branch  5 taken 100%
branch  6 never executed
branch  7 never executed
        -: 2195:
       19: 2196:  return TError(env, error);
    #####: 2197:}
        -: 2198:
function _ZN4Napi9TypeError3NewEP10napi_env__PKc called 13 returned 100% blocks executed 100%
       13: 2199:inline TypeError TypeError::New(napi_env env, const char* message) {
       13: 2200:  return Error::New<TypeError>(env, message, std::strlen(message), napi_create_type_error);
        -: 2201:}
        -: 2202:
        -: 2203:inline TypeError TypeError::New(napi_env env, const std::string& message) {
        -: 2204:  return Error::New<TypeError>(env, message.c_str(), message.size(), napi_create_type_error);
        -: 2205:}
        -: 2206:
        -: 2207:inline TypeError::TypeError() : Error() {
        -: 2208:}
        -: 2209:
function _ZN4Napi9TypeErrorC2EP10napi_env__P12napi_value__ called 13 returned 100% blocks executed 100%
       13: 2210:inline TypeError::TypeError(napi_env env, napi_value value) : Error(env, value) {
       13: 2211:}
        -: 2212:
        -: 2213:inline RangeError RangeError::New(napi_env env, const char* message) {
        -: 2214:  return Error::New<RangeError>(env, message, std::strlen(message), napi_create_range_error);
        -: 2215:}
        -: 2216:
        -: 2217:inline RangeError RangeError::New(napi_env env, const std::string& message) {
        -: 2218:  return Error::New<RangeError>(env, message.c_str(), message.size(), napi_create_range_error);
        -: 2219:}
        -: 2220:
        -: 2221:inline RangeError::RangeError() : Error() {
        -: 2222:}
        -: 2223:
        -: 2224:inline RangeError::RangeError(napi_env env, napi_value value) : Error(env, value) {
        -: 2225:}
        -: 2226:
        -: 2227:////////////////////////////////////////////////////////////////////////////////
        -: 2228:// Reference<T> class
        -: 2229:////////////////////////////////////////////////////////////////////////////////
        -: 2230:
        -: 2231:template <typename T>
function _ZN4Napi9ReferenceINS_6ObjectEE3NewERKS1_j called 281 returned 100% blocks executed 50%
function _ZN4Napi9ReferenceINS_8FunctionEE3NewERKS1_j called 281 returned 100% blocks executed 50%
function _ZN4Napi9ReferenceINS_6BufferIcEEE3NewERKS2_j called 283 returned 100% blocks executed 50%
      845: 2232:inline Reference<T> Reference<T>::New(const T& value, uint32_t initialRefcount) {
      845: 2233:  napi_env env = value.Env();
      845: 2234:  napi_value val = value;
        -: 2235:
      845: 2236:  if (val == nullptr) {
branch  0 taken 0%
branch  1 taken 100%
branch  2 taken 0%
branch  3 taken 100%
branch  4 taken 0%
branch  5 taken 100%
    #####: 2237:    return Reference<T>(env, nullptr);
        -: 2238:  }
        -: 2239:
        -: 2240:  napi_ref ref;
      845: 2241:  napi_status status = napi_create_reference(env, value, initialRefcount, &ref);
      845: 2242:  NAPI_THROW_IF_FAILED(env, status, Reference<T>());
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 taken 0%
branch  5 taken 100%
branch  6 never executed
branch  7 never executed
branch  8 taken 0%
branch  9 taken 100%
branch 10 never executed
branch 11 never executed
        -: 2243:
      845: 2244:  return Reference<T>(env, ref);
      845: 2245:}
        -: 2246:
        -: 2247:
        -: 2248:template <typename T>
        -: 2249:inline Reference<T>::Reference() : _env(nullptr), _ref(nullptr), _suppressDestruct(false) {
        -: 2250:}
        -: 2251:
        -: 2252:template <typename T>
function _ZN4Napi9ReferenceINS_6ObjectEEC2EP10napi_env__P10napi_ref__ called 0 returned 0% blocks executed 0%
function _ZN4Napi9ReferenceINS_8FunctionEEC2EP10napi_env__P10napi_ref__ called 281 returned 100% blocks executed 100%
function _ZN4Napi9ReferenceINS_6BufferIcEEEC2EP10napi_env__P10napi_ref__ called 283 returned 100% blocks executed 100%
      564: 2253:inline Reference<T>::Reference(napi_env env, napi_ref ref)
      564: 2254:  : _env(env), _ref(ref), _suppressDestruct(false) {
      564: 2255:}
        -: 2256:
        -: 2257:template <typename T>
function _ZN4Napi9ReferenceINS_6ObjectEED2Ev called 0 returned 0% blocks executed 0%
function _ZN4Napi9ReferenceINS_8FunctionEED2Ev called 0 returned 0% blocks executed 0%
function _ZN4Napi9ReferenceINS_6BufferIcEEED2Ev called 279 returned 100% blocks executed 87%
      279: 2258:inline Reference<T>::~Reference() {
      279: 2259:  if (_ref != nullptr) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 taken 100%
branch  5 taken 0%
      279: 2260:    if (!_suppressDestruct) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 taken 100%
branch  5 taken 0%
      279: 2261:      napi_delete_reference(_env, _ref);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 taken 100%
branch  5 taken 0%
      279: 2262:    }
        -: 2263:
      279: 2264:    _ref = nullptr;
      279: 2265:  }
      279: 2266:}
        -: 2267:
        -: 2268:template <typename T>
function _ZN4Napi9ReferenceINS_6ObjectEEC2EOS2_ called 281 returned 100% blocks executed 100%
function _ZN4Napi9ReferenceINS_8FunctionEEC2EOS2_ called 281 returned 100% blocks executed 100%
      562: 2269:inline Reference<T>::Reference(Reference<T>&& other)
      562: 2270:  : _env(other._env), _ref(other._ref), _suppressDestruct(other._suppressDestruct) {
      562: 2271:  other._env = nullptr;
      562: 2272:  other._ref = nullptr;
      562: 2273:  other._suppressDestruct = false;
      562: 2274:}
        -: 2275:
        -: 2276:template <typename T>
        -: 2277:inline Reference<T>& Reference<T>::operator =(Reference<T>&& other) {
        -: 2278:  Reset();
        -: 2279:  _env = other._env;
        -: 2280:  _ref = other._ref;
        -: 2281:  _suppressDestruct = other._suppressDestruct;
        -: 2282:  other._env = nullptr;
        -: 2283:  other._ref = nullptr;
        -: 2284:  other._suppressDestruct = false;
        -: 2285:  return *this;
        -: 2286:}
        -: 2287:
        -: 2288:template <typename T>
        -: 2289:inline Reference<T>::Reference(const Reference<T>& other)
        -: 2290:  : _env(other._env), _ref(nullptr), _suppressDestruct(false) {
        -: 2291:  HandleScope scope(_env);
        -: 2292:
        -: 2293:  napi_value value = other.Value();
        -: 2294:  if (value != nullptr) {
        -: 2295:    // Copying is a limited scenario (currently only used for Error object) and always creates a
        -: 2296:    // strong reference to the given value even if the incoming reference is weak.
        -: 2297:    napi_status status = napi_create_reference(_env, value, 1, &_ref);
        -: 2298:    NAPI_FATAL_IF_FAILED(status, "Reference<T>::Reference", "napi_create_reference");
        -: 2299:  }
        -: 2300:}
        -: 2301:
        -: 2302:template <typename T>
        -: 2303:inline Reference<T>::operator napi_ref() const {
        -: 2304:  return _ref;
        -: 2305:}
        -: 2306:
        -: 2307:template <typename T>
        -: 2308:inline bool Reference<T>::operator ==(const Reference<T> &other) const {
        -: 2309:  HandleScope scope(_env);
        -: 2310:  return this->Value().StrictEquals(other.Value());
        -: 2311:}
        -: 2312:
        -: 2313:template <typename T>
        -: 2314:inline bool Reference<T>::operator !=(const Reference<T> &other) const {
        -: 2315:  return !this->operator ==(other);
        -: 2316:}
        -: 2317:
        -: 2318:template <typename T>
function _ZNK4Napi9ReferenceINS_8FunctionEE3EnvEv called 0 returned 0% blocks executed 0%
    #####: 2319:inline Napi::Env Reference<T>::Env() const {
    #####: 2320:  return Napi::Env(_env);
        -: 2321:}
        -: 2322:
        -: 2323:template <typename T>
function _ZNK4Napi9ReferenceINS_6ObjectEE7IsEmptyEv called 0 returned 0% blocks executed 0%
function _ZNK4Napi9ReferenceINS_8FunctionEE7IsEmptyEv called 0 returned 0% blocks executed 0%
    #####: 2324:inline bool Reference<T>::IsEmpty() const {
    #####: 2325:  return _ref == nullptr;
        -: 2326:}
        -: 2327:
        -: 2328:template <typename T>
function _ZNK4Napi9ReferenceINS_6ObjectEE5ValueEv called 0 returned 0% blocks executed 0%
function _ZNK4Napi9ReferenceINS_8FunctionEE5ValueEv called 0 returned 0% blocks executed 0%
    #####: 2329:inline T Reference<T>::Value() const {
    #####: 2330:  if (_ref == nullptr) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2331:    return T(_env, nullptr);
        -: 2332:  }
        -: 2333:
        -: 2334:  napi_value value;
    #####: 2335:  napi_status status = napi_get_reference_value(_env, _ref, &value);
    #####: 2336:  NAPI_THROW_IF_FAILED(_env, status, T());
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2337:  return T(_env, value);
    #####: 2338:}
        -: 2339:
        -: 2340:template <typename T>
        -: 2341:inline uint32_t Reference<T>::Ref() {
        -: 2342:  uint32_t result;
        -: 2343:  napi_status status = napi_reference_ref(_env, _ref, &result);
        -: 2344:  NAPI_THROW_IF_FAILED(_env, status, 1);
        -: 2345:  return result;
        -: 2346:}
        -: 2347:
        -: 2348:template <typename T>
        -: 2349:inline uint32_t Reference<T>::Unref() {
        -: 2350:  uint32_t result;
        -: 2351:  napi_status status = napi_reference_unref(_env, _ref, &result);
        -: 2352:  NAPI_THROW_IF_FAILED(_env, status, 1);
        -: 2353:  return result;
        -: 2354:}
        -: 2355:
        -: 2356:template <typename T>
        -: 2357:inline void Reference<T>::Reset() {
        -: 2358:  if (_ref != nullptr) {
        -: 2359:    napi_status status = napi_delete_reference(_env, _ref);
        -: 2360:    NAPI_THROW_IF_FAILED_VOID(_env, status);
        -: 2361:    _ref = nullptr;
        -: 2362:  }
        -: 2363:}
        -: 2364:
        -: 2365:template <typename T>
        -: 2366:inline void Reference<T>::Reset(const T& value, uint32_t refcount) {
        -: 2367:  Reset();
        -: 2368:  _env = value.Env();
        -: 2369:
        -: 2370:  napi_value val = value;
        -: 2371:  if (val != nullptr) {
        -: 2372:    napi_status status = napi_create_reference(_env, value, refcount, &_ref);
        -: 2373:    NAPI_THROW_IF_FAILED_VOID(_env, status);
        -: 2374:  }
        -: 2375:}
        -: 2376:
        -: 2377:template <typename T>
        -: 2378:inline void Reference<T>::SuppressDestruct() {
        -: 2379:  _suppressDestruct = true;
        -: 2380:}
        -: 2381:
        -: 2382:template <typename T>
        -: 2383:inline Reference<T> Weak(T value) {
        -: 2384:  return Reference<T>::New(value, 0);
        -: 2385:}
        -: 2386:
        -: 2387:inline ObjectReference Weak(Object value) {
        -: 2388:  return Reference<Object>::New(value, 0);
        -: 2389:}
        -: 2390:
        -: 2391:inline FunctionReference Weak(Function value) {
        -: 2392:  return Reference<Function>::New(value, 0);
        -: 2393:}
        -: 2394:
        -: 2395:template <typename T>
function _ZN4Napi10PersistentINS_6BufferIcEEEENS_9ReferenceIT_EES4_ called 283 returned 100% blocks executed 100%
      283: 2396:inline Reference<T> Persistent(T value) {
      283: 2397:  return Reference<T>::New(value, 1);
        -: 2398:}
        -: 2399:
function _ZN4Napi10PersistentENS_6ObjectE called 281 returned 100% blocks executed 60%
      281: 2400:inline ObjectReference Persistent(Object value) {
      281: 2401:  return Reference<Object>::New(value, 1);
branch  0 taken 100%
branch  1 taken 0%
    #####: 2402:}
        -: 2403:
function _ZN4Napi10PersistentENS_8FunctionE called 281 returned 100% blocks executed 60%
      281: 2404:inline FunctionReference Persistent(Function value) {
      281: 2405:  return Reference<Function>::New(value, 1);
branch  0 taken 100%
branch  1 taken 0%
    #####: 2406:}
        -: 2407:
        -: 2408:////////////////////////////////////////////////////////////////////////////////
        -: 2409:// ObjectReference class
        -: 2410:////////////////////////////////////////////////////////////////////////////////
        -: 2411:
        -: 2412:inline ObjectReference::ObjectReference(): Reference<Object>() {
        -: 2413:}
        -: 2414:
function _ZN4Napi15ObjectReferenceC2EP10napi_env__P10napi_ref__ called 0 returned 0% blocks executed 0%
    #####: 2415:inline ObjectReference::ObjectReference(napi_env env, napi_ref ref): Reference<Object>(env, ref) {
    #####: 2416:}
        -: 2417:
function _ZN4Napi15ObjectReferenceC2EONS_9ReferenceINS_6ObjectEEE called 281 returned 100% blocks executed 100%
      281: 2418:inline ObjectReference::ObjectReference(Reference<Object>&& other)
      281: 2419:  : Reference<Object>(std::move(other)) {
      281: 2420:}
        -: 2421:
        -: 2422:inline ObjectReference& ObjectReference::operator =(Reference<Object>&& other) {
        -: 2423:  static_cast<Reference<Object>*>(this)->operator=(std::move(other));
        -: 2424:  return *this;
        -: 2425:}
        -: 2426:
        -: 2427:inline ObjectReference::ObjectReference(ObjectReference&& other)
        -: 2428:  : Reference<Object>(std::move(other)) {
        -: 2429:}
        -: 2430:
        -: 2431:inline ObjectReference& ObjectReference::operator =(ObjectReference&& other) {
        -: 2432:  static_cast<Reference<Object>*>(this)->operator=(std::move(other));
        -: 2433:  return *this;
        -: 2434:}
        -: 2435:
        -: 2436:inline ObjectReference::ObjectReference(const ObjectReference& other)
        -: 2437:  : Reference<Object>(other) {
        -: 2438:}
        -: 2439:
function _ZNK4Napi15ObjectReference3GetEPKc called 0 returned 0% blocks executed 0%
    #####: 2440:inline Napi::Value ObjectReference::Get(const char* utf8name) const {
    #####: 2441:  EscapableHandleScope scope(_env);
    #####: 2442:  return scope.Escape(Value().Get(utf8name));
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2443:}
        -: 2444:
        -: 2445:inline Napi::Value ObjectReference::Get(const std::string& utf8name) const {
        -: 2446:  EscapableHandleScope scope(_env);
        -: 2447:  return scope.Escape(Value().Get(utf8name));
        -: 2448:}
        -: 2449:
        -: 2450:inline void ObjectReference::Set(const char* utf8name, napi_value value) {
        -: 2451:  HandleScope scope(_env);
        -: 2452:  Value().Set(utf8name, value);
        -: 2453:}
        -: 2454:
        -: 2455:inline void ObjectReference::Set(const char* utf8name, Napi::Value value) {
        -: 2456:  HandleScope scope(_env);
        -: 2457:  Value().Set(utf8name, value);
        -: 2458:}
        -: 2459:
        -: 2460:inline void ObjectReference::Set(const char* utf8name, const char* utf8value) {
        -: 2461:  HandleScope scope(_env);
        -: 2462:  Value().Set(utf8name, utf8value);
        -: 2463:}
        -: 2464:
        -: 2465:inline void ObjectReference::Set(const char* utf8name, bool boolValue) {
        -: 2466:  HandleScope scope(_env);
        -: 2467:  Value().Set(utf8name, boolValue);
        -: 2468:}
        -: 2469:
        -: 2470:inline void ObjectReference::Set(const char* utf8name, double numberValue) {
        -: 2471:  HandleScope scope(_env);
        -: 2472:  Value().Set(utf8name, numberValue);
        -: 2473:}
        -: 2474:
        -: 2475:inline void ObjectReference::Set(const std::string& utf8name, napi_value value) {
        -: 2476:  HandleScope scope(_env);
        -: 2477:  Value().Set(utf8name, value);
        -: 2478:}
        -: 2479:
        -: 2480:inline void ObjectReference::Set(const std::string& utf8name, Napi::Value value) {
        -: 2481:  HandleScope scope(_env);
        -: 2482:  Value().Set(utf8name, value);
        -: 2483:}
        -: 2484:
        -: 2485:inline void ObjectReference::Set(const std::string& utf8name, std::string& utf8value) {
        -: 2486:  HandleScope scope(_env);
        -: 2487:  Value().Set(utf8name, utf8value);
        -: 2488:}
        -: 2489:
        -: 2490:inline void ObjectReference::Set(const std::string& utf8name, bool boolValue) {
        -: 2491:  HandleScope scope(_env);
        -: 2492:  Value().Set(utf8name, boolValue);
        -: 2493:}
        -: 2494:
        -: 2495:inline void ObjectReference::Set(const std::string& utf8name, double numberValue) {
        -: 2496:  HandleScope scope(_env);
        -: 2497:  Value().Set(utf8name, numberValue);
        -: 2498:}
        -: 2499:
        -: 2500:inline Napi::Value ObjectReference::Get(uint32_t index) const {
        -: 2501:  EscapableHandleScope scope(_env);
        -: 2502:  return scope.Escape(Value().Get(index));
        -: 2503:}
        -: 2504:
        -: 2505:inline void ObjectReference::Set(uint32_t index, napi_value value) {
        -: 2506:  HandleScope scope(_env);
        -: 2507:  Value().Set(index, value);
        -: 2508:}
        -: 2509:
        -: 2510:inline void ObjectReference::Set(uint32_t index, Napi::Value value) {
        -: 2511:  HandleScope scope(_env);
        -: 2512:  Value().Set(index, value);
        -: 2513:}
        -: 2514:
        -: 2515:inline void ObjectReference::Set(uint32_t index, const char* utf8value) {
        -: 2516:  HandleScope scope(_env);
        -: 2517:  Value().Set(index, utf8value);
        -: 2518:}
        -: 2519:
        -: 2520:inline void ObjectReference::Set(uint32_t index, const std::string& utf8value) {
        -: 2521:  HandleScope scope(_env);
        -: 2522:  Value().Set(index, utf8value);
        -: 2523:}
        -: 2524:
        -: 2525:inline void ObjectReference::Set(uint32_t index, bool boolValue) {
        -: 2526:  HandleScope scope(_env);
        -: 2527:  Value().Set(index, boolValue);
        -: 2528:}
        -: 2529:
        -: 2530:inline void ObjectReference::Set(uint32_t index, double numberValue) {
        -: 2531:  HandleScope scope(_env);
        -: 2532:  Value().Set(index, numberValue);
        -: 2533:}
        -: 2534:
        -: 2535:////////////////////////////////////////////////////////////////////////////////
        -: 2536:// FunctionReference class
        -: 2537:////////////////////////////////////////////////////////////////////////////////
        -: 2538:
        -: 2539:inline FunctionReference::FunctionReference(): Reference<Function>() {
        -: 2540:}
        -: 2541:
        -: 2542:inline FunctionReference::FunctionReference(napi_env env, napi_ref ref)
        -: 2543:  : Reference<Function>(env, ref) {
        -: 2544:}
        -: 2545:
function _ZN4Napi17FunctionReferenceC2EONS_9ReferenceINS_8FunctionEEE called 281 returned 100% blocks executed 100%
      281: 2546:inline FunctionReference::FunctionReference(Reference<Function>&& other)
      281: 2547:  : Reference<Function>(std::move(other)) {
      281: 2548:}
        -: 2549:
        -: 2550:inline FunctionReference& FunctionReference::operator =(Reference<Function>&& other) {
        -: 2551:  static_cast<Reference<Function>*>(this)->operator=(std::move(other));
        -: 2552:  return *this;
        -: 2553:}
        -: 2554:
        -: 2555:inline FunctionReference::FunctionReference(FunctionReference&& other)
        -: 2556:  : Reference<Function>(std::move(other)) {
        -: 2557:}
        -: 2558:
        -: 2559:inline FunctionReference& FunctionReference::operator =(FunctionReference&& other) {
        -: 2560:  static_cast<Reference<Function>*>(this)->operator=(std::move(other));
        -: 2561:  return *this;
        -: 2562:}
        -: 2563:
        -: 2564:inline Napi::Value FunctionReference::operator ()(
        -: 2565:    const std::initializer_list<napi_value>& args) const {
        -: 2566:  EscapableHandleScope scope(_env);
        -: 2567:  return scope.Escape(Value()(args));
        -: 2568:}
        -: 2569:
        -: 2570:inline Napi::Value FunctionReference::Call(const std::initializer_list<napi_value>& args) const {
        -: 2571:  EscapableHandleScope scope(_env);
        -: 2572:  Napi::Value result = Value().Call(args);
        -: 2573:  if (scope.Env().IsExceptionPending()) {
        -: 2574:    return Value();
        -: 2575:  }
        -: 2576:  return scope.Escape(result);
        -: 2577:}
        -: 2578:
        -: 2579:inline Napi::Value FunctionReference::Call(const std::vector<napi_value>& args) const {
        -: 2580:  EscapableHandleScope scope(_env);
        -: 2581:  Napi::Value result = Value().Call(args);
        -: 2582:  if (scope.Env().IsExceptionPending()) {
        -: 2583:    return Value();
        -: 2584:  }
        -: 2585:  return scope.Escape(result);
        -: 2586:}
        -: 2587:
function _ZNK4Napi17FunctionReference4CallEP12napi_value__RKSt16initializer_listIS2_E called 0 returned 0% blocks executed 0%
    #####: 2588:inline Napi::Value FunctionReference::Call(
        -: 2589:    napi_value recv, const std::initializer_list<napi_value>& args) const {
    #####: 2590:  EscapableHandleScope scope(_env);
    #####: 2591:  Napi::Value result = Value().Call(recv, args);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2592:  if (scope.Env().IsExceptionPending()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2593:    return Value();
branch  0 never executed
branch  1 never executed
        -: 2594:  }
    #####: 2595:  return scope.Escape(result);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2596:}
        -: 2597:
function _ZNK4Napi17FunctionReference4CallEP12napi_value__RKSt6vectorIS2_SaIS2_EE called 0 returned 0% blocks executed 0%
    #####: 2598:inline Napi::Value FunctionReference::Call(
        -: 2599:    napi_value recv, const std::vector<napi_value>& args) const {
    #####: 2600:  EscapableHandleScope scope(_env);
    #####: 2601:  Napi::Value result = Value().Call(recv, args);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2602:  if (scope.Env().IsExceptionPending()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2603:    return Value();
branch  0 never executed
branch  1 never executed
        -: 2604:  }
    #####: 2605:  return scope.Escape(result);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2606:}
        -: 2607:
        -: 2608:inline Napi::Value FunctionReference::Call(
        -: 2609:    napi_value recv, size_t argc, const napi_value* args) const {
        -: 2610:  EscapableHandleScope scope(_env);
        -: 2611:  Napi::Value result = Value().Call(recv, argc, args);
        -: 2612:  if (scope.Env().IsExceptionPending()) {
        -: 2613:    return Value();
        -: 2614:  }
        -: 2615:  return scope.Escape(result);
        -: 2616:}
        -: 2617:
        -: 2618:inline Napi::Value FunctionReference::MakeCallback(
        -: 2619:    napi_value recv,
        -: 2620:    const std::initializer_list<napi_value>& args,
        -: 2621:    napi_async_context context) const {
        -: 2622:  EscapableHandleScope scope(_env);
        -: 2623:  Napi::Value result = Value().MakeCallback(recv, args, context);
        -: 2624:  if (scope.Env().IsExceptionPending()) {
        -: 2625:    return Value();
        -: 2626:  }
        -: 2627:  return scope.Escape(result);
        -: 2628:}
        -: 2629:
        -: 2630:inline Napi::Value FunctionReference::MakeCallback(
        -: 2631:    napi_value recv,
        -: 2632:    const std::vector<napi_value>& args,
        -: 2633:    napi_async_context context) const {
        -: 2634:  EscapableHandleScope scope(_env);
        -: 2635:  Napi::Value result = Value().MakeCallback(recv, args, context);
        -: 2636:  if (scope.Env().IsExceptionPending()) {
        -: 2637:    return Value();
        -: 2638:  }
        -: 2639:  return scope.Escape(result);
        -: 2640:}
        -: 2641:
        -: 2642:inline Napi::Value FunctionReference::MakeCallback(
        -: 2643:    napi_value recv,
        -: 2644:    size_t argc,
        -: 2645:    const napi_value* args,
        -: 2646:    napi_async_context context) const {
        -: 2647:  EscapableHandleScope scope(_env);
        -: 2648:  Napi::Value result = Value().MakeCallback(recv, argc, args, context);
        -: 2649:  if (scope.Env().IsExceptionPending()) {
        -: 2650:    return Value();
        -: 2651:  }
        -: 2652:  return scope.Escape(result);
        -: 2653:}
        -: 2654:
        -: 2655:inline Object FunctionReference::New(const std::initializer_list<napi_value>& args) const {
        -: 2656:  EscapableHandleScope scope(_env);
        -: 2657:  return scope.Escape(Value().New(args)).As<Object>();
        -: 2658:}
        -: 2659:
        -: 2660:inline Object FunctionReference::New(const std::vector<napi_value>& args) const {
        -: 2661:  EscapableHandleScope scope(_env);
        -: 2662:  return scope.Escape(Value().New(args)).As<Object>();
        -: 2663:}
        -: 2664:
        -: 2665:////////////////////////////////////////////////////////////////////////////////
        -: 2666:// CallbackInfo class
        -: 2667:////////////////////////////////////////////////////////////////////////////////
        -: 2668:
        -: 2669:inline CallbackInfo::CallbackInfo(napi_env env, napi_callback_info info)
        -: 2670:    : _env(env), _info(info), _this(nullptr), _dynamicArgs(nullptr), _data(nullptr) {
        -: 2671:  _argc = _staticArgCount;
        -: 2672:  _argv = _staticArgs;
        -: 2673:  napi_status status = napi_get_cb_info(env, info, &_argc, _argv, &_this, &_data);
        -: 2674:  NAPI_THROW_IF_FAILED_VOID(_env, status);
        -: 2675:
        -: 2676:  if (_argc > _staticArgCount) {
        -: 2677:    // Use either a fixed-size array (on the stack) or a dynamically-allocated
        -: 2678:    // array (on the heap) depending on the number of args.
        -: 2679:    _dynamicArgs = new napi_value[_argc];
        -: 2680:    _argv = _dynamicArgs;
        -: 2681:
        -: 2682:    status = napi_get_cb_info(env, info, &_argc, _argv, nullptr, nullptr);
        -: 2683:    NAPI_THROW_IF_FAILED_VOID(_env, status);
        -: 2684:  }
        -: 2685:}
        -: 2686:
        -: 2687:inline CallbackInfo::~CallbackInfo() {
        -: 2688:  if (_dynamicArgs != nullptr) {
        -: 2689:    delete[] _dynamicArgs;
        -: 2690:  }
        -: 2691:}
        -: 2692:
        -: 2693:inline Value CallbackInfo::NewTarget() const {
        -: 2694:  napi_value newTarget;
        -: 2695:  napi_status status = napi_get_new_target(_env, _info, &newTarget);
        -: 2696:  NAPI_THROW_IF_FAILED(_env, status, Value());
        -: 2697:  return Value(_env, newTarget);
        -: 2698:}
        -: 2699:
        -: 2700:inline bool CallbackInfo::IsConstructCall() const {
        -: 2701:  return !NewTarget().IsEmpty();
        -: 2702:}
        -: 2703:
function _ZNK4Napi12CallbackInfo3EnvEv called 294 returned 100% blocks executed 100%
      294: 2704:inline Napi::Env CallbackInfo::Env() const {
      294: 2705:  return Napi::Env(_env);
        -: 2706:}
        -: 2707:
function _ZNK4Napi12CallbackInfo6LengthEv called 576 returned 100% blocks executed 100%
      576: 2708:inline size_t CallbackInfo::Length() const {
      576: 2709:  return _argc;
        -: 2710:}
        -: 2711:
function _ZNK4Napi12CallbackInfoixEm called 1145 returned 100% blocks executed 80%
     1145: 2712:inline const Value CallbackInfo::operator [](size_t index) const {
     1145: 2713:  return index < _argc ? Value(_env, _argv[index]) : Env().Undefined();
branch  0 taken 100%
branch  1 taken 0%
        -: 2714:}
        -: 2715:
        -: 2716:inline Value CallbackInfo::This() const {
        -: 2717:  if (_this == nullptr) {
        -: 2718:    return Env().Undefined();
        -: 2719:  }
        -: 2720:  return Object(_env, _this);
        -: 2721:}
        -: 2722:
        -: 2723:inline void* CallbackInfo::Data() const {
        -: 2724:  return _data;
        -: 2725:}
        -: 2726:
        -: 2727:inline void CallbackInfo::SetData(void* data) {
        -: 2728:  _data = data;
        -: 2729:}
        -: 2730:
        -: 2731:////////////////////////////////////////////////////////////////////////////////
        -: 2732:// PropertyDescriptor class
        -: 2733:////////////////////////////////////////////////////////////////////////////////
        -: 2734:
        -: 2735:template <typename Getter>
        -: 2736:inline PropertyDescriptor
        -: 2737:PropertyDescriptor::Accessor(Napi::Env env,
        -: 2738:                             Napi::Object object,
        -: 2739:                             const char* utf8name,
        -: 2740:                             Getter getter,
        -: 2741:                             napi_property_attributes attributes,
        -: 2742:                             void* data) {
        -: 2743:  typedef details::CallbackData<Getter, Napi::Value> CbData;
        -: 2744:  auto callbackData = new CbData({ getter, data });
        -: 2745:
        -: 2746:  napi_status status = AttachData(env, object, callbackData);
        -: 2747:  if (status != napi_ok) {
        -: 2748:    delete callbackData;
        -: 2749:    NAPI_THROW_IF_FAILED(env, status, napi_property_descriptor());
        -: 2750:  }
        -: 2751:
        -: 2752:  return PropertyDescriptor({
        -: 2753:    utf8name,
        -: 2754:    nullptr,
        -: 2755:    nullptr,
        -: 2756:    CbData::Wrapper,
        -: 2757:    nullptr,
        -: 2758:    nullptr,
        -: 2759:    attributes,
        -: 2760:    callbackData
        -: 2761:  });
        -: 2762:}
        -: 2763:
        -: 2764:template <typename Getter>
        -: 2765:inline PropertyDescriptor PropertyDescriptor::Accessor(Napi::Env env,
        -: 2766:                                                       Napi::Object object,
        -: 2767:                                                       const std::string& utf8name,
        -: 2768:                                                       Getter getter,
        -: 2769:                                                       napi_property_attributes attributes,
        -: 2770:                                                       void* data) {
        -: 2771:  return Accessor(env, object, utf8name.c_str(), getter, attributes, data);
        -: 2772:}
        -: 2773:
        -: 2774:template <typename Getter>
        -: 2775:inline PropertyDescriptor PropertyDescriptor::Accessor(Napi::Env env,
        -: 2776:                                                       Napi::Object object,
        -: 2777:                                                       Name name,
        -: 2778:                                                       Getter getter,
        -: 2779:                                                       napi_property_attributes attributes,
        -: 2780:                                                       void* data) {
        -: 2781:  typedef details::CallbackData<Getter, Napi::Value> CbData;
        -: 2782:  auto callbackData = new CbData({ getter, data });
        -: 2783:
        -: 2784:  napi_status status = AttachData(env, object, callbackData);
        -: 2785:  if (status != napi_ok) {
        -: 2786:    delete callbackData;
        -: 2787:    NAPI_THROW_IF_FAILED(env, status, napi_property_descriptor());
        -: 2788:  }
        -: 2789:
        -: 2790:  return PropertyDescriptor({
        -: 2791:    nullptr,
        -: 2792:    name,
        -: 2793:    nullptr,
        -: 2794:    CbData::Wrapper,
        -: 2795:    nullptr,
        -: 2796:    nullptr,
        -: 2797:    attributes,
        -: 2798:    callbackData
        -: 2799:  });
        -: 2800:}
        -: 2801:
        -: 2802:template <typename Getter, typename Setter>
        -: 2803:inline PropertyDescriptor PropertyDescriptor::Accessor(Napi::Env env,
        -: 2804:                                                       Napi::Object object,
        -: 2805:                                                       const char* utf8name,
        -: 2806:                                                       Getter getter,
        -: 2807:                                                       Setter setter,
        -: 2808:                                                       napi_property_attributes attributes,
        -: 2809:                                                       void* data) {
        -: 2810:  typedef details::AccessorCallbackData<Getter, Setter> CbData;
        -: 2811:  auto callbackData = new CbData({ getter, setter, data });
        -: 2812:
        -: 2813:  napi_status status = AttachData(env, object, callbackData);
        -: 2814:  if (status != napi_ok) {
        -: 2815:    delete callbackData;
        -: 2816:    NAPI_THROW_IF_FAILED(env, status, napi_property_descriptor());
        -: 2817:  }
        -: 2818:
        -: 2819:  return PropertyDescriptor({
        -: 2820:    utf8name,
        -: 2821:    nullptr,
        -: 2822:    nullptr,
        -: 2823:    CbData::GetterWrapper,
        -: 2824:    CbData::SetterWrapper,
        -: 2825:    nullptr,
        -: 2826:    attributes,
        -: 2827:    callbackData
        -: 2828:  });
        -: 2829:}
        -: 2830:
        -: 2831:template <typename Getter, typename Setter>
        -: 2832:inline PropertyDescriptor PropertyDescriptor::Accessor(Napi::Env env,
        -: 2833:                                                       Napi::Object object,
        -: 2834:                                                       const std::string& utf8name,
        -: 2835:                                                       Getter getter,
        -: 2836:                                                       Setter setter,
        -: 2837:                                                       napi_property_attributes attributes,
        -: 2838:                                                       void* data) {
        -: 2839:  return Accessor(env, object, utf8name.c_str(), getter, setter, attributes, data);
        -: 2840:}
        -: 2841:
        -: 2842:template <typename Getter, typename Setter>
        -: 2843:inline PropertyDescriptor PropertyDescriptor::Accessor(Napi::Env env,
        -: 2844:                                                       Napi::Object object,
        -: 2845:                                                       Name name,
        -: 2846:                                                       Getter getter,
        -: 2847:                                                       Setter setter,
        -: 2848:                                                       napi_property_attributes attributes,
        -: 2849:                                                       void* data) {
        -: 2850:  typedef details::AccessorCallbackData<Getter, Setter> CbData;
        -: 2851:  auto callbackData = new CbData({ getter, setter, data });
        -: 2852:
        -: 2853:  napi_status status = AttachData(env, object, callbackData);
        -: 2854:  if (status != napi_ok) {
        -: 2855:    delete callbackData;
        -: 2856:    NAPI_THROW_IF_FAILED(env, status, napi_property_descriptor());
        -: 2857:  }
        -: 2858:
        -: 2859:  return PropertyDescriptor({
        -: 2860:    nullptr,
        -: 2861:    name,
        -: 2862:    nullptr,
        -: 2863:    CbData::GetterWrapper,
        -: 2864:    CbData::SetterWrapper,
        -: 2865:    nullptr,
        -: 2866:    attributes,
        -: 2867:    callbackData
        -: 2868:  });
        -: 2869:}
        -: 2870:
        -: 2871:template <typename Callable>
        -: 2872:inline PropertyDescriptor PropertyDescriptor::Function(Napi::Env env,
        -: 2873:                                                       Napi::Object /*object*/,
        -: 2874:                                                       const char* utf8name,
        -: 2875:                                                       Callable cb,
        -: 2876:                                                       napi_property_attributes attributes,
        -: 2877:                                                       void* data) {
        -: 2878:  return PropertyDescriptor({
        -: 2879:    utf8name,
        -: 2880:    nullptr,
        -: 2881:    nullptr,
        -: 2882:    nullptr,
        -: 2883:    nullptr,
        -: 2884:    Napi::Function::New(env, cb, utf8name, data),
        -: 2885:    attributes,
        -: 2886:    nullptr
        -: 2887:  });
        -: 2888:}
        -: 2889:
        -: 2890:template <typename Callable>
        -: 2891:inline PropertyDescriptor PropertyDescriptor::Function(Napi::Env env,
        -: 2892:                                                       Napi::Object object,
        -: 2893:                                                       const std::string& utf8name,
        -: 2894:                                                       Callable cb,
        -: 2895:                                                       napi_property_attributes attributes,
        -: 2896:                                                       void* data) {
        -: 2897:  return Function(env, object, utf8name.c_str(), cb, attributes, data);
        -: 2898:}
        -: 2899:
        -: 2900:template <typename Callable>
        -: 2901:inline PropertyDescriptor PropertyDescriptor::Function(Napi::Env env,
        -: 2902:                                                       Napi::Object /*object*/,
        -: 2903:                                                       Name name,
        -: 2904:                                                       Callable cb,
        -: 2905:                                                       napi_property_attributes attributes,
        -: 2906:                                                       void* data) {
        -: 2907:  return PropertyDescriptor({
        -: 2908:    nullptr,
        -: 2909:    name,
        -: 2910:    nullptr,
        -: 2911:    nullptr,
        -: 2912:    nullptr,
        -: 2913:    Napi::Function::New(env, cb, nullptr, data),
        -: 2914:    attributes,
        -: 2915:    nullptr
        -: 2916:  });
        -: 2917:}
        -: 2918:
        -: 2919:inline PropertyDescriptor PropertyDescriptor::Value(const char* utf8name,
        -: 2920:                                                    napi_value value,
        -: 2921:                                                    napi_property_attributes attributes) {
        -: 2922:  return PropertyDescriptor({
        -: 2923:    utf8name, nullptr, nullptr, nullptr, nullptr, value, attributes, nullptr
        -: 2924:  });
        -: 2925:}
        -: 2926:
        -: 2927:inline PropertyDescriptor PropertyDescriptor::Value(const std::string& utf8name,
        -: 2928:                                                    napi_value value,
        -: 2929:                                                    napi_property_attributes attributes) {
        -: 2930:  return Value(utf8name.c_str(), value, attributes);
        -: 2931:}
        -: 2932:
        -: 2933:inline PropertyDescriptor PropertyDescriptor::Value(napi_value name,
        -: 2934:                                                    napi_value value,
        -: 2935:                                                    napi_property_attributes attributes) {
        -: 2936:  return PropertyDescriptor({
        -: 2937:    nullptr, name, nullptr, nullptr, nullptr, value, attributes, nullptr
        -: 2938:  });
        -: 2939:}
        -: 2940:
        -: 2941:inline PropertyDescriptor PropertyDescriptor::Value(Name name,
        -: 2942:                                                    Napi::Value value,
        -: 2943:                                                    napi_property_attributes attributes) {
        -: 2944:  napi_value nameValue = name;
        -: 2945:  napi_value valueValue = value;
        -: 2946:  return PropertyDescriptor::Value(nameValue, valueValue, attributes);
        -: 2947:}
        -: 2948:
        -: 2949:inline PropertyDescriptor::PropertyDescriptor(napi_property_descriptor desc)
        -: 2950:  : _desc(desc) {
        -: 2951:}
        -: 2952:
        -: 2953:inline PropertyDescriptor::operator napi_property_descriptor&() {
        -: 2954:  return _desc;
        -: 2955:}
        -: 2956:
        -: 2957:inline PropertyDescriptor::operator const napi_property_descriptor&() const {
        -: 2958:  return _desc;
        -: 2959:}
        -: 2960:
        -: 2961:////////////////////////////////////////////////////////////////////////////////
        -: 2962:// ObjectWrap<T> class
        -: 2963:////////////////////////////////////////////////////////////////////////////////
        -: 2964:
        -: 2965:template <typename T>
        -: 2966:inline ObjectWrap<T>::ObjectWrap(const Napi::CallbackInfo& callbackInfo) {
        -: 2967:  napi_env env = callbackInfo.Env();
        -: 2968:  napi_value wrapper = callbackInfo.This();
        -: 2969:  napi_status status;
        -: 2970:  napi_ref ref;
        -: 2971:  T* instance = static_cast<T*>(this);
        -: 2972:  status = napi_wrap(env, wrapper, instance, FinalizeCallback, nullptr, &ref);
        -: 2973:  NAPI_THROW_IF_FAILED_VOID(env, status);
        -: 2974:
        -: 2975:  Reference<Object>* instanceRef = instance;
        -: 2976:  *instanceRef = Reference<Object>(env, ref);
        -: 2977:}
        -: 2978:
        -: 2979:template<typename T>
        -: 2980:inline ObjectWrap<T>::~ObjectWrap() {}
        -: 2981:
        -: 2982:template<typename T>
        -: 2983:inline T* ObjectWrap<T>::Unwrap(Object wrapper) {
        -: 2984:  T* unwrapped;
        -: 2985:  napi_status status = napi_unwrap(wrapper.Env(), wrapper, reinterpret_cast<void**>(&unwrapped));
        -: 2986:  NAPI_THROW_IF_FAILED(wrapper.Env(), status, nullptr);
        -: 2987:  return unwrapped;
        -: 2988:}
        -: 2989:
        -: 2990:template <typename T>
        -: 2991:inline Function
        -: 2992:ObjectWrap<T>::DefineClass(Napi::Env env,
        -: 2993:                           const char* utf8name,
        -: 2994:                           const size_t props_count,
        -: 2995:                           const napi_property_descriptor* descriptors,
        -: 2996:                           void* data) {
        -: 2997:  napi_status status;
        -: 2998:  std::vector<napi_property_descriptor> props(props_count);
        -: 2999:
        -: 3000:  // We copy the descriptors to a local array because before defining the class
        -: 3001:  // we must replace static method property descriptors with value property
        -: 3002:  // descriptors such that the value is a function-valued `napi_value` created
        -: 3003:  // with `CreateFunction()`.
        -: 3004:  //
        -: 3005:  // This replacement could be made for instance methods as well, but V8 aborts
        -: 3006:  // if we do that, because it expects methods defined on the prototype template
        -: 3007:  // to have `FunctionTemplate`s.
        -: 3008:  for (size_t index = 0; index < props_count; index++) {
        -: 3009:    props[index] = descriptors[index];
        -: 3010:    napi_property_descriptor* prop = &props[index];
        -: 3011:    if (prop->method == T::StaticMethodCallbackWrapper) {
        -: 3012:      status = CreateFunction(env,
        -: 3013:               utf8name,
        -: 3014:               prop->method,
        -: 3015:               static_cast<StaticMethodCallbackData*>(prop->data),
        -: 3016:               &(prop->value));
        -: 3017:      NAPI_THROW_IF_FAILED(env, status, Function());
        -: 3018:      prop->method = nullptr;
        -: 3019:      prop->data = nullptr;
        -: 3020:    } else if (prop->method == T::StaticVoidMethodCallbackWrapper) {
        -: 3021:      status = CreateFunction(env,
        -: 3022:               utf8name,
        -: 3023:               prop->method,
        -: 3024:               static_cast<StaticVoidMethodCallbackData*>(prop->data),
        -: 3025:               &(prop->value));
        -: 3026:      NAPI_THROW_IF_FAILED(env, status, Function());
        -: 3027:      prop->method = nullptr;
        -: 3028:      prop->data = nullptr;
        -: 3029:    }
        -: 3030:  }
        -: 3031:
        -: 3032:  napi_value value;
        -: 3033:  status = napi_define_class(env,
        -: 3034:                             utf8name,
        -: 3035:                             NAPI_AUTO_LENGTH,
        -: 3036:                             T::ConstructorCallbackWrapper,
        -: 3037:                             data,
        -: 3038:                             props_count,
        -: 3039:                             props.data(),
        -: 3040:                             &value);
        -: 3041:  NAPI_THROW_IF_FAILED(env, status, Function());
        -: 3042:
        -: 3043:  // After defining the class we iterate once more over the property descriptors
        -: 3044:  // and attach the data associated with accessors and instance methods to the
        -: 3045:  // newly created JavaScript class.
        -: 3046:  for (size_t idx = 0; idx < props_count; idx++) {
        -: 3047:    const napi_property_descriptor* prop = &props[idx];
        -: 3048:
        -: 3049:    if (prop->getter == T::StaticGetterCallbackWrapper ||
        -: 3050:        prop->setter == T::StaticSetterCallbackWrapper) {
        -: 3051:      status = Napi::details::AttachData(env,
        -: 3052:                          value,
        -: 3053:                          static_cast<StaticAccessorCallbackData*>(prop->data));
        -: 3054:      NAPI_THROW_IF_FAILED(env, status, Function());
        -: 3055:    } else if (prop->getter == T::InstanceGetterCallbackWrapper ||
        -: 3056:        prop->setter == T::InstanceSetterCallbackWrapper) {
        -: 3057:      status = Napi::details::AttachData(env,
        -: 3058:                          value,
        -: 3059:                          static_cast<InstanceAccessorCallbackData*>(prop->data));
        -: 3060:      NAPI_THROW_IF_FAILED(env, status, Function());
        -: 3061:    } else if (prop->method != nullptr && !(prop->attributes & napi_static)) {
        -: 3062:      if (prop->method == T::InstanceVoidMethodCallbackWrapper) {
        -: 3063:        status = Napi::details::AttachData(env,
        -: 3064:                      value,
        -: 3065:                      static_cast<InstanceVoidMethodCallbackData*>(prop->data));
        -: 3066:        NAPI_THROW_IF_FAILED(env, status, Function());
        -: 3067:      } else if (prop->method == T::InstanceMethodCallbackWrapper) {
        -: 3068:        status = Napi::details::AttachData(env,
        -: 3069:                          value,
        -: 3070:                          static_cast<InstanceMethodCallbackData*>(prop->data));
        -: 3071:        NAPI_THROW_IF_FAILED(env, status, Function());
        -: 3072:      }
        -: 3073:    }
        -: 3074:  }
        -: 3075:
        -: 3076:  return Function(env, value);
        -: 3077:}
        -: 3078:
        -: 3079:template <typename T>
        -: 3080:inline Function ObjectWrap<T>::DefineClass(
        -: 3081:    Napi::Env env,
        -: 3082:    const char* utf8name,
        -: 3083:    const std::initializer_list<ClassPropertyDescriptor<T>>& properties,
        -: 3084:    void* data) {
        -: 3085:  return DefineClass(env,
        -: 3086:          utf8name,
        -: 3087:          properties.size(),
        -: 3088:          reinterpret_cast<const napi_property_descriptor*>(properties.begin()),
        -: 3089:          data);
        -: 3090:}
        -: 3091:
        -: 3092:template <typename T>
        -: 3093:inline Function ObjectWrap<T>::DefineClass(
        -: 3094:    Napi::Env env,
        -: 3095:    const char* utf8name,
        -: 3096:    const std::vector<ClassPropertyDescriptor<T>>& properties,
        -: 3097:    void* data) {
        -: 3098:  return DefineClass(env,
        -: 3099:           utf8name,
        -: 3100:           properties.size(),
        -: 3101:           reinterpret_cast<const napi_property_descriptor*>(properties.data()),
        -: 3102:           data);
        -: 3103:}
        -: 3104:
        -: 3105:template <typename T>
        -: 3106:inline ClassPropertyDescriptor<T> ObjectWrap<T>::StaticMethod(
        -: 3107:    const char* utf8name,
        -: 3108:    StaticVoidMethodCallback method,
        -: 3109:    napi_property_attributes attributes,
        -: 3110:    void* data) {
        -: 3111:  StaticVoidMethodCallbackData* callbackData = new StaticVoidMethodCallbackData({ method, data });
        -: 3112:
        -: 3113:  napi_property_descriptor desc = napi_property_descriptor();
        -: 3114:  desc.utf8name = utf8name;
        -: 3115:  desc.method = T::StaticVoidMethodCallbackWrapper;
        -: 3116:  desc.data = callbackData;
        -: 3117:  desc.attributes = static_cast<napi_property_attributes>(attributes | napi_static);
        -: 3118:  return desc;
        -: 3119:}
        -: 3120:
        -: 3121:template <typename T>
        -: 3122:inline ClassPropertyDescriptor<T> ObjectWrap<T>::StaticMethod(
        -: 3123:    const char* utf8name,
        -: 3124:    StaticMethodCallback method,
        -: 3125:    napi_property_attributes attributes,
        -: 3126:    void* data) {
        -: 3127:  StaticMethodCallbackData* callbackData = new StaticMethodCallbackData({ method, data });
        -: 3128:
        -: 3129:  napi_property_descriptor desc = napi_property_descriptor();
        -: 3130:  desc.utf8name = utf8name;
        -: 3131:  desc.method = T::StaticMethodCallbackWrapper;
        -: 3132:  desc.data = callbackData;
        -: 3133:  desc.attributes = static_cast<napi_property_attributes>(attributes | napi_static);
        -: 3134:  return desc;
        -: 3135:}
        -: 3136:
        -: 3137:template <typename T>
        -: 3138:inline ClassPropertyDescriptor<T> ObjectWrap<T>::StaticMethod(
        -: 3139:    Symbol name,
        -: 3140:    StaticVoidMethodCallback method,
        -: 3141:    napi_property_attributes attributes,
        -: 3142:    void* data) {
        -: 3143:  StaticVoidMethodCallbackData* callbackData = new StaticVoidMethodCallbackData({ method, data });
        -: 3144:
        -: 3145:  napi_property_descriptor desc = napi_property_descriptor();
        -: 3146:  desc.name = name;
        -: 3147:  desc.method = T::StaticVoidMethodCallbackWrapper;
        -: 3148:  desc.data = callbackData;
        -: 3149:  desc.attributes = static_cast<napi_property_attributes>(attributes | napi_static);
        -: 3150:  return desc;
        -: 3151:}
        -: 3152:
        -: 3153:template <typename T>
        -: 3154:inline ClassPropertyDescriptor<T> ObjectWrap<T>::StaticMethod(
        -: 3155:    Symbol name,
        -: 3156:    StaticMethodCallback method,
        -: 3157:    napi_property_attributes attributes,
        -: 3158:    void* data) {
        -: 3159:  StaticMethodCallbackData* callbackData = new StaticMethodCallbackData({ method, data });
        -: 3160:
        -: 3161:  napi_property_descriptor desc = napi_property_descriptor();
        -: 3162:  desc.name = name;
        -: 3163:  desc.method = T::StaticMethodCallbackWrapper;
        -: 3164:  desc.data = callbackData;
        -: 3165:  desc.attributes = static_cast<napi_property_attributes>(attributes | napi_static);
        -: 3166:  return desc;
        -: 3167:}
        -: 3168:
        -: 3169:template <typename T>
        -: 3170:inline ClassPropertyDescriptor<T> ObjectWrap<T>::StaticAccessor(
        -: 3171:    const char* utf8name,
        -: 3172:    StaticGetterCallback getter,
        -: 3173:    StaticSetterCallback setter,
        -: 3174:    napi_property_attributes attributes,
        -: 3175:    void* data) {
        -: 3176:  StaticAccessorCallbackData* callbackData =
        -: 3177:    new StaticAccessorCallbackData({ getter, setter, data });
        -: 3178:
        -: 3179:  napi_property_descriptor desc = napi_property_descriptor();
        -: 3180:  desc.utf8name = utf8name;
        -: 3181:  desc.getter = getter != nullptr ? T::StaticGetterCallbackWrapper : nullptr;
        -: 3182:  desc.setter = setter != nullptr ? T::StaticSetterCallbackWrapper : nullptr;
        -: 3183:  desc.data = callbackData;
        -: 3184:  desc.attributes = static_cast<napi_property_attributes>(attributes | napi_static);
        -: 3185:  return desc;
        -: 3186:}
        -: 3187:
        -: 3188:template <typename T>
        -: 3189:inline ClassPropertyDescriptor<T> ObjectWrap<T>::StaticAccessor(
        -: 3190:    Symbol name,
        -: 3191:    StaticGetterCallback getter,
        -: 3192:    StaticSetterCallback setter,
        -: 3193:    napi_property_attributes attributes,
        -: 3194:    void* data) {
        -: 3195:  StaticAccessorCallbackData* callbackData =
        -: 3196:    new StaticAccessorCallbackData({ getter, setter, data });
        -: 3197:
        -: 3198:  napi_property_descriptor desc = napi_property_descriptor();
        -: 3199:  desc.name = name;
        -: 3200:  desc.getter = getter != nullptr ? T::StaticGetterCallbackWrapper : nullptr;
        -: 3201:  desc.setter = setter != nullptr ? T::StaticSetterCallbackWrapper : nullptr;
        -: 3202:  desc.data = callbackData;
        -: 3203:  desc.attributes = static_cast<napi_property_attributes>(attributes | napi_static);
        -: 3204:  return desc;
        -: 3205:}
        -: 3206:
        -: 3207:template <typename T>
        -: 3208:inline ClassPropertyDescriptor<T> ObjectWrap<T>::InstanceMethod(
        -: 3209:    const char* utf8name,
        -: 3210:    InstanceVoidMethodCallback method,
        -: 3211:    napi_property_attributes attributes,
        -: 3212:    void* data) {
        -: 3213:  InstanceVoidMethodCallbackData* callbackData =
        -: 3214:    new InstanceVoidMethodCallbackData({ method, data});
        -: 3215:
        -: 3216:  napi_property_descriptor desc = napi_property_descriptor();
        -: 3217:  desc.utf8name = utf8name;
        -: 3218:  desc.method = T::InstanceVoidMethodCallbackWrapper;
        -: 3219:  desc.data = callbackData;
        -: 3220:  desc.attributes = attributes;
        -: 3221:  return desc;
        -: 3222:}
        -: 3223:
        -: 3224:template <typename T>
        -: 3225:inline ClassPropertyDescriptor<T> ObjectWrap<T>::InstanceMethod(
        -: 3226:    const char* utf8name,
        -: 3227:    InstanceMethodCallback method,
        -: 3228:    napi_property_attributes attributes,
        -: 3229:    void* data) {
        -: 3230:  InstanceMethodCallbackData* callbackData = new InstanceMethodCallbackData({ method, data });
        -: 3231:
        -: 3232:  napi_property_descriptor desc = napi_property_descriptor();
        -: 3233:  desc.utf8name = utf8name;
        -: 3234:  desc.method = T::InstanceMethodCallbackWrapper;
        -: 3235:  desc.data = callbackData;
        -: 3236:  desc.attributes = attributes;
        -: 3237:  return desc;
        -: 3238:}
        -: 3239:
        -: 3240:template <typename T>
        -: 3241:inline ClassPropertyDescriptor<T> ObjectWrap<T>::InstanceMethod(
        -: 3242:    Symbol name,
        -: 3243:    InstanceVoidMethodCallback method,
        -: 3244:    napi_property_attributes attributes,
        -: 3245:    void* data) {
        -: 3246:  InstanceVoidMethodCallbackData* callbackData =
        -: 3247:    new InstanceVoidMethodCallbackData({ method, data});
        -: 3248:
        -: 3249:  napi_property_descriptor desc = napi_property_descriptor();
        -: 3250:  desc.name = name;
        -: 3251:  desc.method = T::InstanceVoidMethodCallbackWrapper;
        -: 3252:  desc.data = callbackData;
        -: 3253:  desc.attributes = attributes;
        -: 3254:  return desc;
        -: 3255:}
        -: 3256:
        -: 3257:template <typename T>
        -: 3258:inline ClassPropertyDescriptor<T> ObjectWrap<T>::InstanceMethod(
        -: 3259:    Symbol name,
        -: 3260:    InstanceMethodCallback method,
        -: 3261:    napi_property_attributes attributes,
        -: 3262:    void* data) {
        -: 3263:  InstanceMethodCallbackData* callbackData = new InstanceMethodCallbackData({ method, data });
        -: 3264:
        -: 3265:  napi_property_descriptor desc = napi_property_descriptor();
        -: 3266:  desc.name = name;
        -: 3267:  desc.method = T::InstanceMethodCallbackWrapper;
        -: 3268:  desc.data = callbackData;
        -: 3269:  desc.attributes = attributes;
        -: 3270:  return desc;
        -: 3271:}
        -: 3272:
        -: 3273:template <typename T>
        -: 3274:inline ClassPropertyDescriptor<T> ObjectWrap<T>::InstanceAccessor(
        -: 3275:    const char* utf8name,
        -: 3276:    InstanceGetterCallback getter,
        -: 3277:    InstanceSetterCallback setter,
        -: 3278:    napi_property_attributes attributes,
        -: 3279:    void* data) {
        -: 3280:  InstanceAccessorCallbackData* callbackData =
        -: 3281:    new InstanceAccessorCallbackData({ getter, setter, data });
        -: 3282:
        -: 3283:  napi_property_descriptor desc = napi_property_descriptor();
        -: 3284:  desc.utf8name = utf8name;
        -: 3285:  desc.getter = getter != nullptr ? T::InstanceGetterCallbackWrapper : nullptr;
        -: 3286:  desc.setter = setter != nullptr ? T::InstanceSetterCallbackWrapper : nullptr;
        -: 3287:  desc.data = callbackData;
        -: 3288:  desc.attributes = attributes;
        -: 3289:  return desc;
        -: 3290:}
        -: 3291:
        -: 3292:template <typename T>
        -: 3293:inline ClassPropertyDescriptor<T> ObjectWrap<T>::InstanceAccessor(
        -: 3294:    Symbol name,
        -: 3295:    InstanceGetterCallback getter,
        -: 3296:    InstanceSetterCallback setter,
        -: 3297:    napi_property_attributes attributes,
        -: 3298:    void* data) {
        -: 3299:  InstanceAccessorCallbackData* callbackData =
        -: 3300:    new InstanceAccessorCallbackData({ getter, setter, data });
        -: 3301:
        -: 3302:  napi_property_descriptor desc = napi_property_descriptor();
        -: 3303:  desc.name = name;
        -: 3304:  desc.getter = getter != nullptr ? T::InstanceGetterCallbackWrapper : nullptr;
        -: 3305:  desc.setter = setter != nullptr ? T::InstanceSetterCallbackWrapper : nullptr;
        -: 3306:  desc.data = callbackData;
        -: 3307:  desc.attributes = attributes;
        -: 3308:  return desc;
        -: 3309:}
        -: 3310:
        -: 3311:template <typename T>
        -: 3312:inline ClassPropertyDescriptor<T> ObjectWrap<T>::StaticValue(const char* utf8name,
        -: 3313:    Napi::Value value, napi_property_attributes attributes) {
        -: 3314:  napi_property_descriptor desc = napi_property_descriptor();
        -: 3315:  desc.utf8name = utf8name;
        -: 3316:  desc.value = value;
        -: 3317:  desc.attributes = static_cast<napi_property_attributes>(attributes | napi_static);
        -: 3318:  return desc;
        -: 3319:}
        -: 3320:
        -: 3321:template <typename T>
        -: 3322:inline ClassPropertyDescriptor<T> ObjectWrap<T>::StaticValue(Symbol name,
        -: 3323:    Napi::Value value, napi_property_attributes attributes) {
        -: 3324:  napi_property_descriptor desc = napi_property_descriptor();
        -: 3325:  desc.name = name;
        -: 3326:  desc.value = value;
        -: 3327:  desc.attributes = static_cast<napi_property_attributes>(attributes | napi_static);
        -: 3328:  return desc;
        -: 3329:}
        -: 3330:
        -: 3331:template <typename T>
        -: 3332:inline ClassPropertyDescriptor<T> ObjectWrap<T>::InstanceValue(
        -: 3333:    const char* utf8name,
        -: 3334:    Napi::Value value,
        -: 3335:    napi_property_attributes attributes) {
        -: 3336:  napi_property_descriptor desc = napi_property_descriptor();
        -: 3337:  desc.utf8name = utf8name;
        -: 3338:  desc.value = value;
        -: 3339:  desc.attributes = attributes;
        -: 3340:  return desc;
        -: 3341:}
        -: 3342:
        -: 3343:template <typename T>
        -: 3344:inline ClassPropertyDescriptor<T> ObjectWrap<T>::InstanceValue(
        -: 3345:    Symbol name,
        -: 3346:    Napi::Value value,
        -: 3347:    napi_property_attributes attributes) {
        -: 3348:  napi_property_descriptor desc = napi_property_descriptor();
        -: 3349:  desc.name = name;
        -: 3350:  desc.value = value;
        -: 3351:  desc.attributes = attributes;
        -: 3352:  return desc;
        -: 3353:}
        -: 3354:
        -: 3355:template <typename T>
        -: 3356:inline void ObjectWrap<T>::Finalize(Napi::Env /*env*/) {}
        -: 3357:
        -: 3358:template <typename T>
        -: 3359:inline napi_value ObjectWrap<T>::ConstructorCallbackWrapper(
        -: 3360:    napi_env env,
        -: 3361:    napi_callback_info info) {
        -: 3362:  napi_value new_target;
        -: 3363:  napi_status status = napi_get_new_target(env, info, &new_target);
        -: 3364:  if (status != napi_ok) return nullptr;
        -: 3365:
        -: 3366:  bool isConstructCall = (new_target != nullptr);
        -: 3367:  if (!isConstructCall) {
        -: 3368:    napi_throw_type_error(env, nullptr, "Class constructors cannot be invoked without 'new'");
        -: 3369:    return nullptr;
        -: 3370:  }
        -: 3371:
        -: 3372:  T* instance;
        -: 3373:  napi_value wrapper = details::WrapCallback([&] {
        -: 3374:    CallbackInfo callbackInfo(env, info);
        -: 3375:    instance = new T(callbackInfo);
        -: 3376:    return callbackInfo.This();
        -: 3377:  });
        -: 3378:
        -: 3379:  return wrapper;
        -: 3380:}
        -: 3381:
        -: 3382:template <typename T>
        -: 3383:inline napi_value ObjectWrap<T>::StaticVoidMethodCallbackWrapper(
        -: 3384:    napi_env env,
        -: 3385:    napi_callback_info info) {
        -: 3386:  return details::WrapCallback([&] {
        -: 3387:    CallbackInfo callbackInfo(env, info);
        -: 3388:    StaticVoidMethodCallbackData* callbackData =
        -: 3389:      reinterpret_cast<StaticVoidMethodCallbackData*>(callbackInfo.Data());
        -: 3390:    callbackInfo.SetData(callbackData->data);
        -: 3391:    callbackData->callback(callbackInfo);
        -: 3392:    return nullptr;
        -: 3393:  });
        -: 3394:}
        -: 3395:
        -: 3396:template <typename T>
        -: 3397:inline napi_value ObjectWrap<T>::StaticMethodCallbackWrapper(
        -: 3398:    napi_env env,
        -: 3399:    napi_callback_info info) {
        -: 3400:  return details::WrapCallback([&] {
        -: 3401:    CallbackInfo callbackInfo(env, info);
        -: 3402:    StaticMethodCallbackData* callbackData =
        -: 3403:      reinterpret_cast<StaticMethodCallbackData*>(callbackInfo.Data());
        -: 3404:    callbackInfo.SetData(callbackData->data);
        -: 3405:    return callbackData->callback(callbackInfo);
        -: 3406:  });
        -: 3407:}
        -: 3408:
        -: 3409:template <typename T>
        -: 3410:inline napi_value ObjectWrap<T>::StaticGetterCallbackWrapper(
        -: 3411:    napi_env env,
        -: 3412:    napi_callback_info info) {
        -: 3413:  return details::WrapCallback([&] {
        -: 3414:    CallbackInfo callbackInfo(env, info);
        -: 3415:    StaticAccessorCallbackData* callbackData =
        -: 3416:      reinterpret_cast<StaticAccessorCallbackData*>(callbackInfo.Data());
        -: 3417:    callbackInfo.SetData(callbackData->data);
        -: 3418:    return callbackData->getterCallback(callbackInfo);
        -: 3419:  });
        -: 3420:}
        -: 3421:
        -: 3422:template <typename T>
        -: 3423:inline napi_value ObjectWrap<T>::StaticSetterCallbackWrapper(
        -: 3424:    napi_env env,
        -: 3425:    napi_callback_info info) {
        -: 3426:  return details::WrapCallback([&] {
        -: 3427:    CallbackInfo callbackInfo(env, info);
        -: 3428:    StaticAccessorCallbackData* callbackData =
        -: 3429:      reinterpret_cast<StaticAccessorCallbackData*>(callbackInfo.Data());
        -: 3430:    callbackInfo.SetData(callbackData->data);
        -: 3431:    callbackData->setterCallback(callbackInfo, callbackInfo[0]);
        -: 3432:    return nullptr;
        -: 3433:  });
        -: 3434:}
        -: 3435:
        -: 3436:template <typename T>
        -: 3437:inline napi_value ObjectWrap<T>::InstanceVoidMethodCallbackWrapper(
        -: 3438:    napi_env env,
        -: 3439:    napi_callback_info info) {
        -: 3440:  return details::WrapCallback([&] {
        -: 3441:    CallbackInfo callbackInfo(env, info);
        -: 3442:    InstanceVoidMethodCallbackData* callbackData =
        -: 3443:      reinterpret_cast<InstanceVoidMethodCallbackData*>(callbackInfo.Data());
        -: 3444:    callbackInfo.SetData(callbackData->data);
        -: 3445:    T* instance = Unwrap(callbackInfo.This().As<Object>());
        -: 3446:    auto cb = callbackData->callback;
        -: 3447:    (instance->*cb)(callbackInfo);
        -: 3448:    return nullptr;
        -: 3449:  });
        -: 3450:}
        -: 3451:
        -: 3452:template <typename T>
        -: 3453:inline napi_value ObjectWrap<T>::InstanceMethodCallbackWrapper(
        -: 3454:    napi_env env,
        -: 3455:    napi_callback_info info) {
        -: 3456:  return details::WrapCallback([&] {
        -: 3457:    CallbackInfo callbackInfo(env, info);
        -: 3458:    InstanceMethodCallbackData* callbackData =
        -: 3459:      reinterpret_cast<InstanceMethodCallbackData*>(callbackInfo.Data());
        -: 3460:    callbackInfo.SetData(callbackData->data);
        -: 3461:    T* instance = Unwrap(callbackInfo.This().As<Object>());
        -: 3462:    auto cb = callbackData->callback;
        -: 3463:    return (instance->*cb)(callbackInfo);
        -: 3464:  });
        -: 3465:}
        -: 3466:
        -: 3467:template <typename T>
        -: 3468:inline napi_value ObjectWrap<T>::InstanceGetterCallbackWrapper(
        -: 3469:    napi_env env,
        -: 3470:    napi_callback_info info) {
        -: 3471:  return details::WrapCallback([&] {
        -: 3472:    CallbackInfo callbackInfo(env, info);
        -: 3473:    InstanceAccessorCallbackData* callbackData =
        -: 3474:      reinterpret_cast<InstanceAccessorCallbackData*>(callbackInfo.Data());
        -: 3475:    callbackInfo.SetData(callbackData->data);
        -: 3476:    T* instance = Unwrap(callbackInfo.This().As<Object>());
        -: 3477:    auto cb = callbackData->getterCallback;
        -: 3478:    return (instance->*cb)(callbackInfo);
        -: 3479:  });
        -: 3480:}
        -: 3481:
        -: 3482:template <typename T>
        -: 3483:inline napi_value ObjectWrap<T>::InstanceSetterCallbackWrapper(
        -: 3484:    napi_env env,
        -: 3485:    napi_callback_info info) {
        -: 3486:  return details::WrapCallback([&] {
        -: 3487:    CallbackInfo callbackInfo(env, info);
        -: 3488:    InstanceAccessorCallbackData* callbackData =
        -: 3489:      reinterpret_cast<InstanceAccessorCallbackData*>(callbackInfo.Data());
        -: 3490:    callbackInfo.SetData(callbackData->data);
        -: 3491:    T* instance = Unwrap(callbackInfo.This().As<Object>());
        -: 3492:    auto cb = callbackData->setterCallback;
        -: 3493:    (instance->*cb)(callbackInfo, callbackInfo[0]);
        -: 3494:    return nullptr;
        -: 3495:  });
        -: 3496:}
        -: 3497:
        -: 3498:template <typename T>
        -: 3499:inline void ObjectWrap<T>::FinalizeCallback(napi_env env, void* data, void* /*hint*/) {
        -: 3500:  T* instance = reinterpret_cast<T*>(data);
        -: 3501:  instance->Finalize(Napi::Env(env));
        -: 3502:  delete instance;
        -: 3503:}
        -: 3504:
        -: 3505:////////////////////////////////////////////////////////////////////////////////
        -: 3506:// HandleScope class
        -: 3507:////////////////////////////////////////////////////////////////////////////////
        -: 3508:
        -: 3509:inline HandleScope::HandleScope(napi_env env, napi_handle_scope scope)
        -: 3510:    : _env(env), _scope(scope) {
        -: 3511:}
        -: 3512:
function _ZN4Napi11HandleScopeC2ENS_3EnvE called 0 returned 0% blocks executed 0%
    #####: 3513:inline HandleScope::HandleScope(Napi::Env env) : _env(env) {
    #####: 3514:  napi_status status = napi_open_handle_scope(_env, &_scope);
    #####: 3515:  NAPI_THROW_IF_FAILED_VOID(_env, status);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3516:}
        -: 3517:
function _ZN4Napi11HandleScopeD2Ev called 0 returned 0% blocks executed 0%
    #####: 3518:inline HandleScope::~HandleScope() {
    #####: 3519:  napi_status status = napi_close_handle_scope(_env, _scope);
branch  0 never executed
branch  1 never executed
    #####: 3520:  NAPI_FATAL_IF_FAILED(status,
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 3521:                       "HandleScope::~HandleScope",
        -: 3522:                       "napi_close_handle_scope");
    #####: 3523:}
        -: 3524:
        -: 3525:inline HandleScope::operator napi_handle_scope() const {
        -: 3526:  return _scope;
        -: 3527:}
        -: 3528:
        -: 3529:inline Napi::Env HandleScope::Env() const {
        -: 3530:  return Napi::Env(_env);
        -: 3531:}
        -: 3532:
        -: 3533:////////////////////////////////////////////////////////////////////////////////
        -: 3534:// EscapableHandleScope class
        -: 3535:////////////////////////////////////////////////////////////////////////////////
        -: 3536:
        -: 3537:inline EscapableHandleScope::EscapableHandleScope(
        -: 3538:  napi_env env, napi_escapable_handle_scope scope) : _env(env), _scope(scope) {
        -: 3539:}
        -: 3540:
function _ZN4Napi20EscapableHandleScopeC2ENS_3EnvE called 0 returned 0% blocks executed 0%
    #####: 3541:inline EscapableHandleScope::EscapableHandleScope(Napi::Env env) : _env(env) {
    #####: 3542:  napi_status status = napi_open_escapable_handle_scope(_env, &_scope);
    #####: 3543:  NAPI_THROW_IF_FAILED_VOID(_env, status);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3544:}
        -: 3545:
function _ZN4Napi20EscapableHandleScopeD2Ev called 0 returned 0% blocks executed 0%
    #####: 3546:inline EscapableHandleScope::~EscapableHandleScope() {
    #####: 3547:  napi_status status = napi_close_escapable_handle_scope(_env, _scope);
branch  0 never executed
branch  1 never executed
    #####: 3548:  NAPI_FATAL_IF_FAILED(status,
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 3549:                       "EscapableHandleScope::~EscapableHandleScope",
        -: 3550:                       "napi_close_escapable_handle_scope");
    #####: 3551:}
        -: 3552:
        -: 3553:inline EscapableHandleScope::operator napi_escapable_handle_scope() const {
        -: 3554:  return _scope;
        -: 3555:}
        -: 3556:
function _ZNK4Napi20EscapableHandleScope3EnvEv called 0 returned 0% blocks executed 0%
    #####: 3557:inline Napi::Env EscapableHandleScope::Env() const {
    #####: 3558:  return Napi::Env(_env);
        -: 3559:}
        -: 3560:
function _ZN4Napi20EscapableHandleScope6EscapeEP12napi_value__ called 0 returned 0% blocks executed 0%
    #####: 3561:inline Value EscapableHandleScope::Escape(napi_value escapee) {
        -: 3562:  napi_value result;
    #####: 3563:  napi_status status = napi_escape_handle(_env, _scope, escapee, &result);
    #####: 3564:  NAPI_THROW_IF_FAILED(_env, status, Value());
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3565:  return Value(_env, result);
    #####: 3566:}
        -: 3567:
        -: 3568:
        -: 3569:#if (NAPI_VERSION > 2)
        -: 3570:////////////////////////////////////////////////////////////////////////////////
        -: 3571:// CallbackScope class
        -: 3572:////////////////////////////////////////////////////////////////////////////////
        -: 3573:
        -: 3574:inline CallbackScope::CallbackScope(
        -: 3575:  napi_env env, napi_callback_scope scope) : _env(env), _scope(scope) {
        -: 3576:}
        -: 3577:
        -: 3578:inline CallbackScope::CallbackScope(napi_env env, napi_async_context context)
        -: 3579:    : _env(env) {
        -: 3580:  napi_status status = napi_open_callback_scope(
        -: 3581:      _env, Object::New(env), context, &_scope);
        -: 3582:  NAPI_THROW_IF_FAILED_VOID(_env, status);
        -: 3583:}
        -: 3584:
function _ZN4Napi13CallbackScopeD0Ev called 0 returned 0% blocks executed 0%
function _ZN4Napi13CallbackScopeD2Ev called 0 returned 0% blocks executed 0%
    #####: 3585:inline CallbackScope::~CallbackScope() {
    #####: 3586:  napi_status status = napi_close_callback_scope(_env, _scope);
branch  0 never executed
branch  1 never executed
    #####: 3587:  NAPI_FATAL_IF_FAILED(status,
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 3588:                       "CallbackScope::~CallbackScope",
        -: 3589:                       "napi_close_callback_scope");
    #####: 3590:}
        -: 3591:
        -: 3592:inline CallbackScope::operator napi_callback_scope() const {
        -: 3593:  return _scope;
        -: 3594:}
        -: 3595:
        -: 3596:inline Napi::Env CallbackScope::Env() const {
        -: 3597:  return Napi::Env(_env);
        -: 3598:}
        -: 3599:#endif
        -: 3600:
        -: 3601:////////////////////////////////////////////////////////////////////////////////
        -: 3602:// AsyncContext class
        -: 3603:////////////////////////////////////////////////////////////////////////////////
        -: 3604:
        -: 3605:inline AsyncContext::AsyncContext(napi_env env, const char* resource_name)
        -: 3606:  : AsyncContext(env, resource_name, Object::New(env)) {
        -: 3607:}
        -: 3608:
        -: 3609:inline AsyncContext::AsyncContext(napi_env env,
        -: 3610:		                  const char* resource_name,
        -: 3611:                                  const Object& resource)
        -: 3612:  : _env(env),
        -: 3613:    _context(nullptr) {
        -: 3614:  napi_value resource_id;
        -: 3615:  napi_status status = napi_create_string_utf8(
        -: 3616:      _env, resource_name, NAPI_AUTO_LENGTH, &resource_id);
        -: 3617:  NAPI_THROW_IF_FAILED_VOID(_env, status);
        -: 3618:
        -: 3619:  status = napi_async_init(_env, resource, resource_id, &_context);
        -: 3620:  NAPI_THROW_IF_FAILED_VOID(_env, status);
        -: 3621:}
        -: 3622:
function _ZN4Napi12AsyncContextD0Ev called 0 returned 0% blocks executed 0%
function _ZN4Napi12AsyncContextD2Ev called 0 returned 0% blocks executed 0%
    #####: 3623:inline AsyncContext::~AsyncContext() {
    #####: 3624:  if (_context != nullptr) {
branch  0 never executed
branch  1 never executed
    #####: 3625:    napi_async_destroy(_env, _context);
branch  0 never executed
branch  1 never executed
    #####: 3626:    _context = nullptr;
    #####: 3627:  }
    #####: 3628:}
        -: 3629:
        -: 3630:inline AsyncContext::AsyncContext(AsyncContext&& other) {
        -: 3631:  _env = other._env;
        -: 3632:  other._env = nullptr;
        -: 3633:  _context = other._context;
        -: 3634:  other._context = nullptr;
        -: 3635:}
        -: 3636:
        -: 3637:inline AsyncContext& AsyncContext::operator =(AsyncContext&& other) {
        -: 3638:  _env = other._env;
        -: 3639:  other._env = nullptr;
        -: 3640:  _context = other._context;
        -: 3641:  other._context = nullptr;
        -: 3642:  return *this;
        -: 3643:}
        -: 3644:
        -: 3645:inline AsyncContext::operator napi_async_context() const {
        -: 3646:  return _context;
        -: 3647:}
        -: 3648:
        -: 3649:inline Napi::Env AsyncContext::Env() const {
        -: 3650:  return Napi::Env(_env);
        -: 3651:}
        -: 3652:
        -: 3653:////////////////////////////////////////////////////////////////////////////////
        -: 3654:// AsyncWorker class
        -: 3655:////////////////////////////////////////////////////////////////////////////////
        -: 3656:
function _ZN4Napi11AsyncWorkerC2ERKNS_8FunctionE called 281 returned 100% blocks executed 100%
      281: 3657:inline AsyncWorker::AsyncWorker(const Function& callback)
      281: 3658:  : AsyncWorker(callback, "generic") {
      281: 3659:}
        -: 3660:
function _ZN4Napi11AsyncWorkerC2ERKNS_8FunctionEPKc called 281 returned 100% blocks executed 100%
      281: 3661:inline AsyncWorker::AsyncWorker(const Function& callback,
        -: 3662:                                const char* resource_name)
      281: 3663:  : AsyncWorker(callback, resource_name, Object::New(callback.Env())) {
      281: 3664:}
        -: 3665:
function _ZN4Napi11AsyncWorkerC2ERKNS_8FunctionEPKcRKNS_6ObjectE called 281 returned 100% blocks executed 100%
      281: 3666:inline AsyncWorker::AsyncWorker(const Function& callback,
        -: 3667:                                const char* resource_name,
        -: 3668:                                const Object& resource)
      562: 3669:  : AsyncWorker(Object::New(callback.Env()),
      281: 3670:                callback,
      281: 3671:                resource_name,
      281: 3672:                resource) {
      281: 3673:}
        -: 3674:
        -: 3675:inline AsyncWorker::AsyncWorker(const Object& receiver,
        -: 3676:                                const Function& callback)
        -: 3677:  : AsyncWorker(receiver, callback, "generic") {
        -: 3678:}
        -: 3679:
        -: 3680:inline AsyncWorker::AsyncWorker(const Object& receiver,
        -: 3681:                                const Function& callback,
        -: 3682:                                const char* resource_name)
        -: 3683:  : AsyncWorker(receiver,
        -: 3684:                callback,
        -: 3685:                resource_name,
        -: 3686:                Object::New(callback.Env())) {
        -: 3687:}
        -: 3688:
function _ZN4Napi11AsyncWorkerC2ERKNS_6ObjectERKNS_8FunctionEPKcS3_ called 281 returned 100% blocks executed 39%
      562: 3689:inline AsyncWorker::AsyncWorker(const Object& receiver,
branch  0 taken 100%
branch  1 taken 0%
        -: 3690:                                const Function& callback,
        -: 3691:                                const char* resource_name,
        -: 3692:                                const Object& resource)
      281: 3693:  : _env(callback.Env()),
      281: 3694:    _receiver(Napi::Persistent(receiver)),
      281: 3695:    _callback(Napi::Persistent(callback)),
branch  0 taken 100%
branch  1 taken 0%
      562: 3696:    _suppress_destruct(false) {
        -: 3697:  napi_value resource_id;
      281: 3698:  napi_status status = napi_create_string_latin1(
branch  0 taken 100%
branch  1 taken 0%
      281: 3699:      _env, resource_name, NAPI_AUTO_LENGTH, &resource_id);
      281: 3700:  NAPI_THROW_IF_FAILED_VOID(_env, status);
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 3701:
      281: 3702:  status = napi_create_async_work(_env, resource, resource_id, OnExecute,
branch  0 taken 0%
branch  1 taken 100%
branch  2 taken 0%
branch  3 taken 100%
branch  4 taken 0%
branch  5 taken 100%
      281: 3703:                                  OnWorkComplete, this, &_work);
      281: 3704:  NAPI_THROW_IF_FAILED_VOID(_env, status);
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
      281: 3705:}
        -: 3706:
        -: 3707:inline AsyncWorker::AsyncWorker(Napi::Env env)
        -: 3708:  : AsyncWorker(env, "generic") {
        -: 3709:}
        -: 3710:
        -: 3711:inline AsyncWorker::AsyncWorker(Napi::Env env,
        -: 3712:                                const char* resource_name)
        -: 3713:  : AsyncWorker(env, resource_name, Object::New(env)) {
        -: 3714:}
        -: 3715:
        -: 3716:inline AsyncWorker::AsyncWorker(Napi::Env env,
        -: 3717:                                const char* resource_name,
        -: 3718:                                const Object& resource)
        -: 3719:  : _env(env),
        -: 3720:    _receiver(),
        -: 3721:    _callback(),
        -: 3722:    _suppress_destruct(false) {
        -: 3723:  napi_value resource_id;
        -: 3724:  napi_status status = napi_create_string_latin1(
        -: 3725:      _env, resource_name, NAPI_AUTO_LENGTH, &resource_id);
        -: 3726:  NAPI_THROW_IF_FAILED_VOID(_env, status);
        -: 3727:
        -: 3728:  status = napi_create_async_work(_env, resource, resource_id, OnExecute,
        -: 3729:                                  OnWorkComplete, this, &_work);
        -: 3730:  NAPI_THROW_IF_FAILED_VOID(_env, status);
        -: 3731:}
        -: 3732:
function _ZN4Napi11AsyncWorkerD0Ev called 0 returned 0% blocks executed 0%
function _ZN4Napi11AsyncWorkerD2Ev called 0 returned 0% blocks executed 0%
    #####: 3733:inline AsyncWorker::~AsyncWorker() {
    #####: 3734:  if (_work != nullptr) {
branch  0 never executed
branch  1 never executed
    #####: 3735:    napi_delete_async_work(_env, _work);
branch  0 never executed
branch  1 never executed
    #####: 3736:    _work = nullptr;
    #####: 3737:  }
    #####: 3738:}
        -: 3739:
function _ZN4Napi11AsyncWorker7DestroyEv called 0 returned 0% blocks executed 0%
    #####: 3740:inline void AsyncWorker::Destroy() {
    #####: 3741:  delete this;
branch  0 never executed
branch  1 never executed
    #####: 3742:}
        -: 3743:
        -: 3744:inline AsyncWorker::AsyncWorker(AsyncWorker&& other) {
        -: 3745:  _env = other._env;
        -: 3746:  other._env = nullptr;
        -: 3747:  _work = other._work;
        -: 3748:  other._work = nullptr;
        -: 3749:  _receiver = std::move(other._receiver);
        -: 3750:  _callback = std::move(other._callback);
        -: 3751:  _error = std::move(other._error);
        -: 3752:  _suppress_destruct = other._suppress_destruct;
        -: 3753:}
        -: 3754:
        -: 3755:inline AsyncWorker& AsyncWorker::operator =(AsyncWorker&& other) {
        -: 3756:  _env = other._env;
        -: 3757:  other._env = nullptr;
        -: 3758:  _work = other._work;
        -: 3759:  other._work = nullptr;
        -: 3760:  _receiver = std::move(other._receiver);
        -: 3761:  _callback = std::move(other._callback);
        -: 3762:  _error = std::move(other._error);
        -: 3763:  _suppress_destruct = other._suppress_destruct;
        -: 3764:  return *this;
        -: 3765:}
        -: 3766:
        -: 3767:inline AsyncWorker::operator napi_async_work() const {
        -: 3768:  return _work;
        -: 3769:}
        -: 3770:
        -: 3771:inline Napi::Env AsyncWorker::Env() const {
        -: 3772:  return Napi::Env(_env);
        -: 3773:}
        -: 3774:
function _ZN4Napi11AsyncWorker5QueueEv called 281 returned 100% blocks executed 42%
      281: 3775:inline void AsyncWorker::Queue() {
      281: 3776:  napi_status status = napi_queue_async_work(_env, _work);
      281: 3777:  NAPI_THROW_IF_FAILED_VOID(_env, status);
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
      281: 3778:}
        -: 3779:
        -: 3780:inline void AsyncWorker::Cancel() {
        -: 3781:  napi_status status = napi_cancel_async_work(_env, _work);
        -: 3782:  NAPI_THROW_IF_FAILED_VOID(_env, status);
        -: 3783:}
        -: 3784:
        -: 3785:inline ObjectReference& AsyncWorker::Receiver() {
        -: 3786:  return _receiver;
        -: 3787:}
        -: 3788:
        -: 3789:inline FunctionReference& AsyncWorker::Callback() {
        -: 3790:  return _callback;
        -: 3791:}
        -: 3792:
        -: 3793:inline void AsyncWorker::SuppressDestruct() {
        -: 3794:  _suppress_destruct = true;
        -: 3795:}
        -: 3796:
function _ZN4Napi11AsyncWorker4OnOKEv called 0 returned 0% blocks executed 0%
    #####: 3797:inline void AsyncWorker::OnOK() {
    #####: 3798:  if (!_callback.IsEmpty()) {
branch  0 never executed
branch  1 never executed
    #####: 3799:    _callback.Call(_receiver.Value(), GetResult(_callback.Env()));
branch  0 never executed
branch  1 never executed
    #####: 3800:  }
    #####: 3801:}
        -: 3802:
function _ZN4Napi11AsyncWorker7OnErrorERKNS_5ErrorE called 0 returned 0% blocks executed 0%
    #####: 3803:inline void AsyncWorker::OnError(const Error& e) {
    #####: 3804:  if (!_callback.IsEmpty()) {
branch  0 never executed
branch  1 never executed
    #####: 3805:    _callback.Call(_receiver.Value(), std::initializer_list<napi_value>{ e.Value() });
    #####: 3806:  }
    #####: 3807:}
        -: 3808:
function _ZN4Napi11AsyncWorker8SetErrorERKSs called 9 returned 100% blocks executed 100%
        9: 3809:inline void AsyncWorker::SetError(const std::string& error) {
        9: 3810:  _error = error;
        9: 3811:}
        -: 3812:
function _ZN4Napi11AsyncWorker9GetResultENS_3EnvE called 0 returned 0% blocks executed 0%
    #####: 3813:inline std::vector<napi_value> AsyncWorker::GetResult(Napi::Env /*env*/) {
    #####: 3814:  return {};
        -: 3815:}
        -: 3816:// The OnExecute method receives an napi_env argument. However, do NOT
        -: 3817:// use it within this method, as it does not run on the main thread and must
        -: 3818:// not run any method that would cause JavaScript to run. In practice, this
        -: 3819:// means that almost any use of napi_env will be incorrect.
function _ZN4Napi11AsyncWorker9OnExecuteEP10napi_env__Pv called 281 returned 100% blocks executed 26%
      281: 3820:inline void AsyncWorker::OnExecute(napi_env /*DO_NOT_USE*/, void* this_pointer) {
      281: 3821:  AsyncWorker* self = static_cast<AsyncWorker*>(this_pointer);
        -: 3822:#ifdef NAPI_CPP_EXCEPTIONS
        -: 3823:  try {
      281: 3824:    self->Execute();
branch  0 taken 100%
branch  1 taken 0%
      281: 3825:  } catch (const std::exception& e) {
branch  0 never executed
branch  1 never executed
    #####: 3826:    self->SetError(e.what());
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3827:  }
branch  0 never executed
branch  1 never executed
        -: 3828:#else // NAPI_CPP_EXCEPTIONS
        -: 3829:  self->Execute();
        -: 3830:#endif // NAPI_CPP_EXCEPTIONS
      281: 3831:}
        -: 3832:
function _ZN4Napi11AsyncWorker14OnWorkCompleteEP10napi_env__11napi_statusPv called 278 returned 99% blocks executed 77%
      278: 3833:inline void AsyncWorker::OnWorkComplete(
        -: 3834:    napi_env /*env*/, napi_status status, void* this_pointer) {
      278: 3835:  AsyncWorker* self = static_cast<AsyncWorker*>(this_pointer);
      278: 3836:  if (status != napi_cancelled) {
branch  0 taken 100%
branch  1 taken 0%
      278: 3837:    HandleScope scope(self->_env);
function _ZZN4Napi11AsyncWorker14OnWorkCompleteEP10napi_env__11napi_statusPvENKUlvE_clEv called 278 returned 99% blocks executed 87%
      556: 3838:    details::WrapCallback([&] {
branch  0 taken 100%
branch  1 taken 0%
      278: 3839:      if (self->_error.size() == 0) {
branch  0 taken 98%
branch  1 taken 2%
      272: 3840:        self->OnOK();
      272: 3841:      }
        -: 3842:      else {
        6: 3843:        self->OnError(Error::New(self->_env, self->_error));
branch  0 taken 80%
branch  1 taken 20%
        -: 3844:      }
      276: 3845:      return nullptr;
        1: 3846:    });
      277: 3847:  }
      277: 3848:  if (!self->_suppress_destruct) {
branch  0 taken 100%
branch  1 taken 0%
      277: 3849:    self->Destroy();
      277: 3850:  }
      277: 3851:}
        -: 3852:
        -: 3853:#if (NAPI_VERSION > 3)
        -: 3854:////////////////////////////////////////////////////////////////////////////////
        -: 3855:// ThreadSafeFunction class
        -: 3856:////////////////////////////////////////////////////////////////////////////////
        -: 3857:
        -: 3858:// static
        -: 3859:template <typename ResourceString>
        -: 3860:inline ThreadSafeFunction ThreadSafeFunction::New(napi_env env,
        -: 3861:                                  const Function& callback,
        -: 3862:                                  ResourceString resourceName,
        -: 3863:                                  size_t maxQueueSize,
        -: 3864:                                  size_t initialThreadCount) {
        -: 3865:  return New(env, callback, Object(), resourceName, maxQueueSize,
        -: 3866:             initialThreadCount);
        -: 3867:}
        -: 3868:
        -: 3869:// static
        -: 3870:template <typename ResourceString, typename ContextType>
        -: 3871:inline ThreadSafeFunction ThreadSafeFunction::New(napi_env env,
        -: 3872:                                  const Function& callback,
        -: 3873:                                  ResourceString resourceName,
        -: 3874:                                  size_t maxQueueSize,
        -: 3875:                                  size_t initialThreadCount,
        -: 3876:                                  ContextType* context) {
        -: 3877:  return New(env, callback, Object(), resourceName, maxQueueSize,
        -: 3878:             initialThreadCount, context);
        -: 3879:}
        -: 3880:
        -: 3881:// static
        -: 3882:template <typename ResourceString, typename Finalizer>
        -: 3883:inline ThreadSafeFunction ThreadSafeFunction::New(napi_env env,
        -: 3884:                                  const Function& callback,
        -: 3885:                                  ResourceString resourceName,
        -: 3886:                                  size_t maxQueueSize,
        -: 3887:                                  size_t initialThreadCount,
        -: 3888:                                  Finalizer finalizeCallback) {
        -: 3889:  return New(env, callback, Object(), resourceName, maxQueueSize,
        -: 3890:             initialThreadCount, finalizeCallback);
        -: 3891:}
        -: 3892:
        -: 3893:// static
        -: 3894:template <typename ResourceString, typename Finalizer,
        -: 3895:          typename FinalizerDataType>
        -: 3896:inline ThreadSafeFunction ThreadSafeFunction::New(napi_env env,
        -: 3897:                                  const Function& callback,
        -: 3898:                                  ResourceString resourceName,
        -: 3899:                                  size_t maxQueueSize,
        -: 3900:                                  size_t initialThreadCount,
        -: 3901:                                  Finalizer finalizeCallback,
        -: 3902:                                  FinalizerDataType* data) {
        -: 3903:  return New(env, callback, Object(), resourceName, maxQueueSize,
        -: 3904:             initialThreadCount, finalizeCallback, data);
        -: 3905:}
        -: 3906:
        -: 3907:// static
        -: 3908:template <typename ResourceString, typename ContextType, typename Finalizer>
        -: 3909:inline ThreadSafeFunction ThreadSafeFunction::New(napi_env env,
        -: 3910:                                  const Function& callback,
        -: 3911:                                  ResourceString resourceName,
        -: 3912:                                  size_t maxQueueSize,
        -: 3913:                                  size_t initialThreadCount,
        -: 3914:                                  ContextType* context,
        -: 3915:                                  Finalizer finalizeCallback) {
        -: 3916:  return New(env, callback, Object(), resourceName, maxQueueSize,
        -: 3917:             initialThreadCount, context, finalizeCallback);
        -: 3918:}
        -: 3919:
        -: 3920:// static
        -: 3921:template <typename ResourceString, typename ContextType,
        -: 3922:          typename Finalizer, typename FinalizerDataType>
        -: 3923:inline ThreadSafeFunction ThreadSafeFunction::New(napi_env env,
        -: 3924:                                                  const Function& callback,
        -: 3925:                                                  ResourceString resourceName,
        -: 3926:                                                  size_t maxQueueSize,
        -: 3927:                                                  size_t initialThreadCount,
        -: 3928:                                                  ContextType* context,
        -: 3929:                                                  Finalizer finalizeCallback,
        -: 3930:                                                  FinalizerDataType* data) {
        -: 3931:  return New(env, callback, Object(), resourceName, maxQueueSize,
        -: 3932:             initialThreadCount, context, finalizeCallback, data);
        -: 3933:}
        -: 3934:
        -: 3935:// static
        -: 3936:template <typename ResourceString>
        -: 3937:inline ThreadSafeFunction ThreadSafeFunction::New(napi_env env,
        -: 3938:                                  const Function& callback,
        -: 3939:                                  const Object& resource,
        -: 3940:                                  ResourceString resourceName,
        -: 3941:                                  size_t maxQueueSize,
        -: 3942:                                  size_t initialThreadCount) {
        -: 3943:  return New(env, callback, resource, resourceName, maxQueueSize,
        -: 3944:             initialThreadCount, static_cast<void*>(nullptr) /* context */);
        -: 3945:}
        -: 3946:
        -: 3947:// static
        -: 3948:template <typename ResourceString, typename ContextType>
        -: 3949:inline ThreadSafeFunction ThreadSafeFunction::New(napi_env env,
        -: 3950:                                  const Function& callback,
        -: 3951:                                  const Object& resource,
        -: 3952:                                  ResourceString resourceName,
        -: 3953:                                  size_t maxQueueSize,
        -: 3954:                                  size_t initialThreadCount,
        -: 3955:                                  ContextType* context) {
        -: 3956:  return New(env, callback, resource, resourceName, maxQueueSize,
        -: 3957:             initialThreadCount, context,
        -: 3958:             [](Env, ContextType*) {} /* empty finalizer */);
        -: 3959:}
        -: 3960:
        -: 3961:// static
        -: 3962:template <typename ResourceString, typename Finalizer>
        -: 3963:inline ThreadSafeFunction ThreadSafeFunction::New(napi_env env,
        -: 3964:                                  const Function& callback,
        -: 3965:                                  const Object& resource,
        -: 3966:                                  ResourceString resourceName,
        -: 3967:                                  size_t maxQueueSize,
        -: 3968:                                  size_t initialThreadCount,
        -: 3969:                                  Finalizer finalizeCallback) {
        -: 3970:  return New(env, callback, resource, resourceName, maxQueueSize,
        -: 3971:             initialThreadCount, static_cast<void*>(nullptr) /* context */,
        -: 3972:             finalizeCallback, static_cast<void*>(nullptr) /* data */,
        -: 3973:             details::ThreadSafeFinalize<void, Finalizer>::Wrapper);
        -: 3974:}
        -: 3975:
        -: 3976:// static
        -: 3977:template <typename ResourceString, typename Finalizer,
        -: 3978:          typename FinalizerDataType>
        -: 3979:inline ThreadSafeFunction ThreadSafeFunction::New(napi_env env,
        -: 3980:                                  const Function& callback,
        -: 3981:                                  const Object& resource,
        -: 3982:                                  ResourceString resourceName,
        -: 3983:                                  size_t maxQueueSize,
        -: 3984:                                  size_t initialThreadCount,
        -: 3985:                                  Finalizer finalizeCallback,
        -: 3986:                                  FinalizerDataType* data) {
        -: 3987:  return New(env, callback, resource, resourceName, maxQueueSize,
        -: 3988:             initialThreadCount, static_cast<void*>(nullptr) /* context */,
        -: 3989:             finalizeCallback, data,
        -: 3990:             details::ThreadSafeFinalize<
        -: 3991:                 void, Finalizer, FinalizerDataType>::FinalizeWrapperWithData);
        -: 3992:}
        -: 3993:
        -: 3994:// static
        -: 3995:template <typename ResourceString, typename ContextType, typename Finalizer>
        -: 3996:inline ThreadSafeFunction ThreadSafeFunction::New(napi_env env,
        -: 3997:                                  const Function& callback,
        -: 3998:                                  const Object& resource,
        -: 3999:                                  ResourceString resourceName,
        -: 4000:                                  size_t maxQueueSize,
        -: 4001:                                  size_t initialThreadCount,
        -: 4002:                                  ContextType* context,
        -: 4003:                                  Finalizer finalizeCallback) {
        -: 4004:  return New(env, callback, resource, resourceName, maxQueueSize,
        -: 4005:             initialThreadCount, context, finalizeCallback,
        -: 4006:             static_cast<void*>(nullptr) /* data */,
        -: 4007:             details::ThreadSafeFinalize<
        -: 4008:                 ContextType, Finalizer>::FinalizeWrapperWithContext);
        -: 4009:}
        -: 4010:
        -: 4011:// static
        -: 4012:template <typename ResourceString, typename ContextType,
        -: 4013:          typename Finalizer, typename FinalizerDataType>
        -: 4014:inline ThreadSafeFunction ThreadSafeFunction::New(napi_env env,
        -: 4015:                                                  const Function& callback,
        -: 4016:                                                  const Object& resource,
        -: 4017:                                                  ResourceString resourceName,
        -: 4018:                                                  size_t maxQueueSize,
        -: 4019:                                                  size_t initialThreadCount,
        -: 4020:                                                  ContextType* context,
        -: 4021:                                                  Finalizer finalizeCallback,
        -: 4022:                                                  FinalizerDataType* data) {
        -: 4023:  return New(env, callback, resource, resourceName, maxQueueSize,
        -: 4024:             initialThreadCount, context, finalizeCallback, data,
        -: 4025:             details::ThreadSafeFinalize<ContextType, Finalizer,
        -: 4026:                 FinalizerDataType>::FinalizeFinalizeWrapperWithDataAndContext);
        -: 4027:}
        -: 4028:
        -: 4029:inline ThreadSafeFunction::ThreadSafeFunction()
        -: 4030:  : _tsfn() {
        -: 4031:}
        -: 4032:
        -: 4033:inline ThreadSafeFunction::ThreadSafeFunction(
        -: 4034:    napi_threadsafe_function tsfn)
        -: 4035:  : _tsfn(tsfn) {
        -: 4036:}
        -: 4037:
        -: 4038:inline ThreadSafeFunction::operator napi_threadsafe_function() const {
        -: 4039:  return _tsfn;
        -: 4040:}
        -: 4041:
        -: 4042:inline napi_status ThreadSafeFunction::BlockingCall() const {
        -: 4043:  return CallInternal(nullptr, napi_tsfn_blocking);
        -: 4044:}
        -: 4045:
        -: 4046:template <>
        -: 4047:inline napi_status ThreadSafeFunction::BlockingCall(
        -: 4048:    void* data) const {
        -: 4049:  return napi_call_threadsafe_function(_tsfn, data, napi_tsfn_blocking);
        -: 4050:}
        -: 4051:
        -: 4052:template <typename Callback>
        -: 4053:inline napi_status ThreadSafeFunction::BlockingCall(
        -: 4054:    Callback callback) const {
        -: 4055:  return CallInternal(new CallbackWrapper(callback), napi_tsfn_blocking);
        -: 4056:}
        -: 4057:
        -: 4058:template <typename DataType, typename Callback>
        -: 4059:inline napi_status ThreadSafeFunction::BlockingCall(
        -: 4060:    DataType* data, Callback callback) const {
        -: 4061:  auto wrapper = [data, callback](Env env, Function jsCallback) {
        -: 4062:    callback(env, jsCallback, data);
        -: 4063:  };
        -: 4064:  return CallInternal(new CallbackWrapper(wrapper), napi_tsfn_blocking);
        -: 4065:}
        -: 4066:
        -: 4067:inline napi_status ThreadSafeFunction::NonBlockingCall() const {
        -: 4068:  return CallInternal(nullptr, napi_tsfn_nonblocking);
        -: 4069:}
        -: 4070:
        -: 4071:template <>
        -: 4072:inline napi_status ThreadSafeFunction::NonBlockingCall(
        -: 4073:    void* data) const {
        -: 4074:  return napi_call_threadsafe_function(_tsfn, data, napi_tsfn_nonblocking);
        -: 4075:}
        -: 4076:
        -: 4077:template <typename Callback>
        -: 4078:inline napi_status ThreadSafeFunction::NonBlockingCall(
        -: 4079:    Callback callback) const {
        -: 4080:  return CallInternal(new CallbackWrapper(callback), napi_tsfn_nonblocking);
        -: 4081:}
        -: 4082:
        -: 4083:template <typename DataType, typename Callback>
        -: 4084:inline napi_status ThreadSafeFunction::NonBlockingCall(
        -: 4085:    DataType* data, Callback callback) const {
        -: 4086:  auto wrapper = [data, callback](Env env, Function jsCallback) {
        -: 4087:    callback(env, jsCallback, data);
        -: 4088:  };
        -: 4089:  return CallInternal(new CallbackWrapper(wrapper), napi_tsfn_nonblocking);
        -: 4090:}
        -: 4091:
        -: 4092:inline void ThreadSafeFunction::Ref(napi_env env) const {
        -: 4093:  if (_tsfn != nullptr) {
        -: 4094:    napi_status status = napi_ref_threadsafe_function(env, _tsfn);
        -: 4095:    NAPI_THROW_IF_FAILED_VOID(env, status);
        -: 4096:  }
        -: 4097:}
        -: 4098:
        -: 4099:inline void ThreadSafeFunction::Unref(napi_env env) const {
        -: 4100:  if (_tsfn != nullptr) {
        -: 4101:    napi_status status = napi_unref_threadsafe_function(env, _tsfn);
        -: 4102:    NAPI_THROW_IF_FAILED_VOID(env, status);
        -: 4103:  }
        -: 4104:}
        -: 4105:
        -: 4106:inline napi_status ThreadSafeFunction::Acquire() const {
        -: 4107:  return napi_acquire_threadsafe_function(_tsfn);
        -: 4108:}
        -: 4109:
        -: 4110:inline napi_status ThreadSafeFunction::Release() {
        -: 4111:  return napi_release_threadsafe_function(_tsfn, napi_tsfn_release);
        -: 4112:}
        -: 4113:
        -: 4114:inline napi_status ThreadSafeFunction::Abort() {
        -: 4115:  return napi_release_threadsafe_function(_tsfn, napi_tsfn_abort);
        -: 4116:}
        -: 4117:
        -: 4118:inline ThreadSafeFunction::ConvertibleContext
        -: 4119:ThreadSafeFunction::GetContext() const {
        -: 4120:  void* context;
        -: 4121:  napi_status status = napi_get_threadsafe_function_context(_tsfn, &context);
        -: 4122:  NAPI_FATAL_IF_FAILED(status, "ThreadSafeFunction::GetContext", "napi_get_threadsafe_function_context");
        -: 4123:  return ConvertibleContext({ context });
        -: 4124:}
        -: 4125:
        -: 4126:// static
        -: 4127:template <typename ResourceString, typename ContextType,
        -: 4128:          typename Finalizer, typename FinalizerDataType>
        -: 4129:inline ThreadSafeFunction ThreadSafeFunction::New(napi_env env,
        -: 4130:                                                  const Function& callback,
        -: 4131:                                                  const Object& resource,
        -: 4132:                                                  ResourceString resourceName,
        -: 4133:                                                  size_t maxQueueSize,
        -: 4134:                                                  size_t initialThreadCount,
        -: 4135:                                                  ContextType* context,
        -: 4136:                                                  Finalizer finalizeCallback,
        -: 4137:                                                  FinalizerDataType* data,
        -: 4138:                                                  napi_finalize wrapper) {
        -: 4139:  static_assert(details::can_make_string<ResourceString>::value
        -: 4140:      || std::is_convertible<ResourceString, napi_value>::value,
        -: 4141:      "Resource name should be convertible to the string type");
        -: 4142:
        -: 4143:  ThreadSafeFunction tsfn;
        -: 4144:  auto* finalizeData = new details::ThreadSafeFinalize<ContextType, Finalizer,
        -: 4145:      FinalizerDataType>({ data, finalizeCallback, &tsfn._tsfn });
        -: 4146:  napi_status status = napi_create_threadsafe_function(env, callback, resource,
        -: 4147:      Value::From(env, resourceName), maxQueueSize, initialThreadCount,
        -: 4148:      finalizeData, wrapper, context, CallJS, &tsfn._tsfn);
        -: 4149:  if (status != napi_ok) {
        -: 4150:    delete finalizeData;
        -: 4151:    NAPI_THROW_IF_FAILED(env, status, ThreadSafeFunction());
        -: 4152:  }
        -: 4153:
        -: 4154:  return tsfn;
        -: 4155:}
        -: 4156:
        -: 4157:inline napi_status ThreadSafeFunction::CallInternal(
        -: 4158:    CallbackWrapper* callbackWrapper,
        -: 4159:    napi_threadsafe_function_call_mode mode) const {
        -: 4160:  napi_status status = napi_call_threadsafe_function(
        -: 4161:      _tsfn, callbackWrapper, mode);
        -: 4162:  if (status != napi_ok && callbackWrapper != nullptr) {
        -: 4163:    delete callbackWrapper;
        -: 4164:  }
        -: 4165:
        -: 4166:  return status;
        -: 4167:}
        -: 4168:
        -: 4169:// static
        -: 4170:inline void ThreadSafeFunction::CallJS(napi_env env,
        -: 4171:                                       napi_value jsCallback,
        -: 4172:                                       void* /* context */,
        -: 4173:                                       void* data) {
        -: 4174:  if (env == nullptr && jsCallback == nullptr) {
        -: 4175:    return;
        -: 4176:  }
        -: 4177:
        -: 4178:  if (data != nullptr) {
        -: 4179:    auto* callbackWrapper = static_cast<CallbackWrapper*>(data);
        -: 4180:    (*callbackWrapper)(env, Function(env, jsCallback));
        -: 4181:    delete callbackWrapper;
        -: 4182:  } else if (jsCallback != nullptr) {
        -: 4183:    Function(env, jsCallback).Call({});
        -: 4184:  }
        -: 4185:}
        -: 4186:
        -: 4187:////////////////////////////////////////////////////////////////////////////////
        -: 4188:// Async Progress Worker class
        -: 4189:////////////////////////////////////////////////////////////////////////////////
        -: 4190:
        -: 4191:template<class T>
        -: 4192:inline AsyncProgressWorker<T>::AsyncProgressWorker(const Function& callback)
        -: 4193:  : AsyncProgressWorker(callback, "generic") {
        -: 4194:}
        -: 4195:
        -: 4196:template<class T>
        -: 4197:inline AsyncProgressWorker<T>::AsyncProgressWorker(const Function& callback,
        -: 4198:                                const char* resource_name)
        -: 4199:  : AsyncProgressWorker(callback, resource_name, Object::New(callback.Env())) {
        -: 4200:}
        -: 4201:
        -: 4202:template<class T>
        -: 4203:inline AsyncProgressWorker<T>::AsyncProgressWorker(const Function& callback,
        -: 4204:                                const char* resource_name,
        -: 4205:                                const Object& resource)
        -: 4206:  : AsyncProgressWorker(Object::New(callback.Env()),
        -: 4207:                callback,
        -: 4208:                resource_name,
        -: 4209:                resource) {
        -: 4210:}
        -: 4211:
        -: 4212:template<class T>
        -: 4213:inline AsyncProgressWorker<T>::AsyncProgressWorker(const Object& receiver,
        -: 4214:                                const Function& callback)
        -: 4215:  : AsyncProgressWorker(receiver, callback, "generic") {
        -: 4216:}
        -: 4217:
        -: 4218:template<class T>
        -: 4219:inline AsyncProgressWorker<T>::AsyncProgressWorker(const Object& receiver,
        -: 4220:                                const Function& callback,
        -: 4221:                                const char* resource_name)
        -: 4222:  : AsyncProgressWorker(receiver,
        -: 4223:                callback,
        -: 4224:                resource_name,
        -: 4225:                Object::New(callback.Env())) {
        -: 4226:}
        -: 4227:
        -: 4228:template<class T>
        -: 4229:inline AsyncProgressWorker<T>::AsyncProgressWorker(const Object& receiver,
        -: 4230:                                                   const Function& callback,
        -: 4231:                                                   const char* resource_name,
        -: 4232:                                                   const Object& resource)
        -: 4233:  : AsyncWorker(receiver, callback, resource_name, resource),
        -: 4234:    _asyncdata(nullptr),
        -: 4235:    _asyncsize(0) {
        -: 4236:  _tsfn = ThreadSafeFunction::New(callback.Env(), callback, resource_name, 1, 1);
        -: 4237:}
        -: 4238:
        -: 4239:#if NAPI_VERSION > 4
        -: 4240:template<class T>
        -: 4241:inline AsyncProgressWorker<T>::AsyncProgressWorker(Napi::Env env)
        -: 4242:  : AsyncProgressWorker(env, "generic") {
        -: 4243:}
        -: 4244:
        -: 4245:template<class T>
        -: 4246:inline AsyncProgressWorker<T>::AsyncProgressWorker(Napi::Env env,
        -: 4247:                                const char* resource_name)
        -: 4248:  : AsyncProgressWorker(env, resource_name, Object::New(env)) {
        -: 4249:}
        -: 4250:
        -: 4251:template<class T>
        -: 4252:inline AsyncProgressWorker<T>::AsyncProgressWorker(Napi::Env env,
        -: 4253:                                const char* resource_name,
        -: 4254:                                const Object& resource)
        -: 4255:  : AsyncWorker(env, resource_name, resource),
        -: 4256:    _asyncdata(nullptr),
        -: 4257:    _asyncsize(0) {
        -: 4258:  // TODO: Once the changes to make the callback optional for threadsafe
        -: 4259:  // functions are no longer optional we can remove the dummy Function here.
        -: 4260:  Function callback;
        -: 4261:  _tsfn = ThreadSafeFunction::New(env, callback, resource_name, 1, 1);
        -: 4262:}
        -: 4263:#endif
        -: 4264:
        -: 4265:template<class T>
        -: 4266:inline AsyncProgressWorker<T>::~AsyncProgressWorker() {
        -: 4267:  // Abort pending tsfn call.
        -: 4268:  // Don't send progress events after we've already completed.
        -: 4269:  _tsfn.Abort();
        -: 4270:  {
        -: 4271:    std::lock_guard<std::mutex> lock(_mutex);
        -: 4272:    _asyncdata = nullptr;
        -: 4273:    _asyncsize = 0;
        -: 4274:  }
        -: 4275:  _tsfn.Release();
        -: 4276:}
        -: 4277:
        -: 4278:template<class T>
        -: 4279:inline void AsyncProgressWorker<T>::Execute() {
        -: 4280:  ExecutionProgress progress(this);
        -: 4281:  Execute(progress);
        -: 4282:}
        -: 4283:
        -: 4284:template<class T>
        -: 4285:inline void AsyncProgressWorker<T>::WorkProgress_(Napi::Env /* env */, Napi::Function /* jsCallback */, void* _data) {
        -: 4286:  AsyncProgressWorker* self = static_cast<AsyncProgressWorker*>(_data);
        -: 4287:
        -: 4288:  T* data;
        -: 4289:  size_t size;
        -: 4290:  {
        -: 4291:    std::lock_guard<std::mutex> lock(self->_mutex);
        -: 4292:    data = self->_asyncdata;
        -: 4293:    size = self->_asyncsize;
        -: 4294:    self->_asyncdata = nullptr;
        -: 4295:    self->_asyncsize = 0;
        -: 4296:  }
        -: 4297:
        -: 4298:  self->OnProgress(data, size);
        -: 4299:  delete[] data;
        -: 4300:}
        -: 4301:
        -: 4302:template<class T>
        -: 4303:inline void AsyncProgressWorker<T>::SendProgress_(const T* data, size_t count) {
        -: 4304:    T* new_data = new T[count];
        -: 4305:    std::copy(data, data + count, new_data);
        -: 4306:
        -: 4307:    T* old_data;
        -: 4308:    {
        -: 4309:      std::lock_guard<std::mutex> lock(_mutex);
        -: 4310:      old_data = _asyncdata;
        -: 4311:      _asyncdata = new_data;
        -: 4312:      _asyncsize = count;
        -: 4313:    }
        -: 4314:    _tsfn.NonBlockingCall(this, WorkProgress_);
        -: 4315:
        -: 4316:    delete[] old_data;
        -: 4317:}
        -: 4318:
        -: 4319:template<class T>
        -: 4320:inline void AsyncProgressWorker<T>::Signal() const {
        -: 4321:  _tsfn.NonBlockingCall(this, WorkProgress_);
        -: 4322:}
        -: 4323:
        -: 4324:template<class T>
        -: 4325:inline void AsyncProgressWorker<T>::ExecutionProgress::Signal() const {
        -: 4326:  _worker->Signal();
        -: 4327:}
        -: 4328:
        -: 4329:template<class T>
        -: 4330:inline void AsyncProgressWorker<T>::ExecutionProgress::Send(const T* data, size_t count) const {
        -: 4331:  _worker->SendProgress_(data, count);
        -: 4332:}
        -: 4333:
        -: 4334:#endif
        -: 4335:
        -: 4336:////////////////////////////////////////////////////////////////////////////////
        -: 4337:// Memory Management class
        -: 4338:////////////////////////////////////////////////////////////////////////////////
        -: 4339:
function _ZN4Napi16MemoryManagement20AdjustExternalMemoryENS_3EnvEl called 2 returned 100% blocks executed 37%
        2: 4340:inline int64_t MemoryManagement::AdjustExternalMemory(Env env, int64_t change_in_bytes) {
        -: 4341:  int64_t result;
        2: 4342:  napi_status status = napi_adjust_external_memory(env, change_in_bytes, &result);
        2: 4343:  NAPI_THROW_IF_FAILED(env, status, 0);
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        2: 4344:  return result;
    #####: 4345:}
        -: 4346:
        -: 4347:////////////////////////////////////////////////////////////////////////////////
        -: 4348:// Version Management class
        -: 4349:////////////////////////////////////////////////////////////////////////////////
        -: 4350:
        -: 4351:inline uint32_t VersionManagement::GetNapiVersion(Env env) {
        -: 4352:  uint32_t result;
        -: 4353:  napi_status status = napi_get_version(env, &result);
        -: 4354:  NAPI_THROW_IF_FAILED(env, status, 0);
        -: 4355:  return result;
        -: 4356:}
        -: 4357:
        -: 4358:inline const napi_node_version* VersionManagement::GetNodeVersion(Env env) {
        -: 4359:  const napi_node_version* result;
        -: 4360:  napi_status status = napi_get_node_version(env, &result);
        -: 4361:  NAPI_THROW_IF_FAILED(env, status, 0);
        -: 4362:  return result;
        -: 4363:}
        -: 4364:
        -: 4365:} // namespace Napi
        -: 4366:
        -: 4367:#endif // SRC_NAPI_INL_H_
