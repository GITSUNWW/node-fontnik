        -:    0:Source:/home/travis/build/GITSUNWW/node-fontnik/mason_packages/.link/include/boost/geometry/index/detail/rtree/visitors/destroy.hpp
        -:    0:Graph:/home/travis/build/GITSUNWW/node-fontnik/build/Debug/obj.target/fontnik/src/glyphs.gcno
        -:    0:Data:/home/travis/build/GITSUNWW/node-fontnik/build/Debug/obj.target/fontnik/src/glyphs.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Boost.Geometry Index
        -:    2://
        -:    3:// R-tree destroying visitor implementation
        -:    4://
        -:    5:// Copyright (c) 2011-2014 Adam Wulkiewicz, Lodz, Poland.
        -:    6://
        -:    7:// Use, modification and distribution is subject to the Boost Software License,
        -:    8:// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
        -:    9:// http://www.boost.org/LICENSE_1_0.txt)
        -:   10:
        -:   11:#ifndef BOOST_GEOMETRY_INDEX_DETAIL_RTREE_VISITORS_DELETE_HPP
        -:   12:#define BOOST_GEOMETRY_INDEX_DETAIL_RTREE_VISITORS_DELETE_HPP
        -:   13:
        -:   14:namespace boost { namespace geometry { namespace index {
        -:   15:
        -:   16:namespace detail { namespace rtree { namespace visitors {
        -:   17:
        -:   18:template <typename Value, typename Options, typename Translator, typename Box, typename Allocators>
        -:   19:class destroy
        -:   20:    : public rtree::visitor<Value, typename Options::parameters_type, Box, Allocators, typename Options::node_tag, false>::type
        -:   21:{
        -:   22:public:
        -:   23:    typedef typename rtree::node<Value, typename Options::parameters_type, Box, Allocators, typename Options::node_tag>::type node;
        -:   24:    typedef typename rtree::internal_node<Value, typename Options::parameters_type, Box, Allocators, typename Options::node_tag>::type internal_node;
        -:   25:    typedef typename rtree::leaf<Value, typename Options::parameters_type, Box, Allocators, typename Options::node_tag>::type leaf;
        -:   26:
        -:   27:    typedef typename Allocators::node_pointer node_pointer;
        -:   28:
function _ZN5boost8geometry5index6detail5rtree8visitors7destroyISt4pairINS0_5model3boxINS7_5pointIfLm2ENS0_2cs9cartesianEEEEES6_ISC_SC_EENS3_7optionsINS1_5rstarILm16ELm4ELm4ELm32EEENS3_19insert_reinsert_tagENS3_26choose_by_overlap_diff_tagENS3_17split_default_tagENS3_9rstar_tagENS3_23node_variant_static_tagEEENS2_10translatorINS1_9indexableISF_EENS1_8equal_toISF_EEEESD_NS3_10allocatorsINS_9container13new_allocatorISF_EESF_SI_SD_SN_EEEC2EPNS_7variantINS3_12variant_leafISF_SI_SD_SZ_SN_EEJNS3_21variant_internal_nodeISF_SI_SD_SZ_SN_EEEEERSZ_ called 1674 returned 100% blocks executed 100%
     1674:   29:    inline destroy(node_pointer root_node, Allocators & allocators)
     1674:   30:        : m_current_node(root_node)
     1674:   31:        , m_allocators(allocators)
     3348:   32:    {}
        -:   33:
function _ZN5boost8geometry5index6detail5rtree8visitors7destroyISt4pairINS0_5model3boxINS7_5pointIfLm2ENS0_2cs9cartesianEEEEES6_ISC_SC_EENS3_7optionsINS1_5rstarILm16ELm4ELm4ELm32EEENS3_19insert_reinsert_tagENS3_26choose_by_overlap_diff_tagENS3_17split_default_tagENS3_9rstar_tagENS3_23node_variant_static_tagEEENS2_10translatorINS1_9indexableISF_EENS1_8equal_toISF_EEEESD_NS3_10allocatorsINS_9container13new_allocatorISF_EESF_SI_SD_SN_EEEclERNS3_21variant_internal_nodeISF_SI_SD_SZ_SN_EE called 1323 returned 100% blocks executed 80%
     1323:   34:    inline void operator()(internal_node & n)
        -:   35:    {
     1323:   36:        BOOST_GEOMETRY_INDEX_ASSERT(&n == &rtree::get<internal_node>(*m_current_node), "invalid pointers");
branch  0 taken 100%
branch  1 taken 0%
        -:   37:
     1323:   38:        node_pointer node_to_destroy = m_current_node;
        -:   39:
        -:   40:        typedef typename rtree::elements_type<internal_node>::type elements_type;
     1323:   41:        elements_type & elements = rtree::elements(n);
        -:   42:
     7599:   43:        for (typename elements_type::iterator it = elements.begin();
branch  0 taken 83%
branch  1 taken 17%
     7599:   44:             it != elements.end(); ++it)
        -:   45:        {
     6276:   46:            m_current_node = it->second;
     6276:   47:            rtree::apply_visitor(*this, *m_current_node);
     6276:   48:            it->second = 0;
     6276:   49:        }
        -:   50:
     1323:   51:        rtree::destroy_node<Allocators, internal_node>::apply(m_allocators, node_to_destroy);
     1323:   52:    }
        -:   53:
function _ZN5boost8geometry5index6detail5rtree8visitors7destroyISt4pairINS0_5model3boxINS7_5pointIfLm2ENS0_2cs9cartesianEEEEES6_ISC_SC_EENS3_7optionsINS1_5rstarILm16ELm4ELm4ELm32EEENS3_19insert_reinsert_tagENS3_26choose_by_overlap_diff_tagENS3_17split_default_tagENS3_9rstar_tagENS3_23node_variant_static_tagEEENS2_10translatorINS1_9indexableISF_EENS1_8equal_toISF_EEEESD_NS3_10allocatorsINS_9container13new_allocatorISF_EESF_SI_SD_SN_EEEclERNS3_12variant_leafISF_SI_SD_SZ_SN_EE called 6627 returned 100% blocks executed 66%
     6627:   54:    inline void operator()(leaf & l)
        -:   55:    {
     6627:   56:        boost::ignore_unused(l);
     6627:   57:        BOOST_GEOMETRY_INDEX_ASSERT(&l == &rtree::get<leaf>(*m_current_node), "invalid pointers");
branch  0 taken 100%
branch  1 taken 0%
        -:   58:
     6627:   59:        rtree::destroy_node<Allocators, leaf>::apply(m_allocators, m_current_node);
     6627:   60:    }
        -:   61:
        -:   62:private:
        -:   63:    node_pointer m_current_node;
        -:   64:    Allocators & m_allocators;
        -:   65:};
        -:   66:
        -:   67:}}} // namespace detail::rtree::visitors
        -:   68:
        -:   69:}}} // namespace boost::geometry::index
        -:   70:
        -:   71:#endif // BOOST_GEOMETRY_INDEX_DETAIL_RTREE_VISITORS_DELETE_HPP
