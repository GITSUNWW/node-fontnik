        -:    0:Source:/home/travis/build/GITSUNWW/node-fontnik/node_modules/node-addon-api/napi.h
        -:    0:Graph:/home/travis/build/GITSUNWW/node-fontnik/build/Debug/obj.target/fontnik/src/glyphs.gcno
        -:    0:Data:/home/travis/build/GITSUNWW/node-fontnik/build/Debug/obj.target/fontnik/src/glyphs.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#ifndef SRC_NAPI_H_
        -:    2:#define SRC_NAPI_H_
        -:    3:
        -:    4:#include <node_api.h>
        -:    5:#include <functional>
        -:    6:#include <initializer_list>
        -:    7:#include <memory>
        -:    8:#include <mutex>
        -:    9:#include <string>
        -:   10:#include <vector>
        -:   11:
        -:   12:// VS2015 RTM has bugs with constexpr, so require min of VS2015 Update 3 (known good version)
        -:   13:#if !defined(_MSC_VER) || _MSC_FULL_VER >= 190024210
        -:   14:#define NAPI_HAS_CONSTEXPR 1
        -:   15:#endif
        -:   16:
        -:   17:// VS2013 does not support char16_t literal strings, so we'll work around it using wchar_t strings
        -:   18:// and casting them. This is safe as long as the character sizes are the same.
        -:   19:#if defined(_MSC_VER) && _MSC_VER <= 1800
        -:   20:static_assert(sizeof(char16_t) == sizeof(wchar_t), "Size mismatch between char16_t and wchar_t");
        -:   21:#define NAPI_WIDE_TEXT(x) reinterpret_cast<char16_t*>(L ## x)
        -:   22:#else
        -:   23:#define NAPI_WIDE_TEXT(x) u ## x
        -:   24:#endif
        -:   25:
        -:   26:// If C++ exceptions are not explicitly enabled or disabled, enable them
        -:   27:// if exceptions were enabled in the compiler settings.
        -:   28:#if !defined(NAPI_CPP_EXCEPTIONS) && !defined(NAPI_DISABLE_CPP_EXCEPTIONS)
        -:   29:  #if defined(_CPPUNWIND) || defined (__EXCEPTIONS)
        -:   30:    #define NAPI_CPP_EXCEPTIONS
        -:   31:  #else
        -:   32:    #error Exception support not detected. \
        -:   33:      Define either NAPI_CPP_EXCEPTIONS or NAPI_DISABLE_CPP_EXCEPTIONS.
        -:   34:  #endif
        -:   35:#endif
        -:   36:
        -:   37:#ifdef _NOEXCEPT
        -:   38:  #define NAPI_NOEXCEPT _NOEXCEPT
        -:   39:#else
        -:   40:  #define NAPI_NOEXCEPT noexcept
        -:   41:#endif
        -:   42:
        -:   43:#ifdef NAPI_CPP_EXCEPTIONS
        -:   44:
        -:   45:// When C++ exceptions are enabled, Errors are thrown directly. There is no need
        -:   46:// to return anything after the throw statements. The variadic parameter is an
        -:   47:// optional return value that is ignored.
        -:   48:// We need _VOID versions of the macros to avoid warnings resulting from
        -:   49:// leaving the NAPI_THROW_* `...` argument empty.
        -:   50:
        -:   51:#define NAPI_THROW(e, ...)  throw e
        -:   52:#define NAPI_THROW_VOID(e)  throw e
        -:   53:
        -:   54:#define NAPI_THROW_IF_FAILED(env, status, ...)           \
        -:   55:  if ((status) != napi_ok) throw Napi::Error::New(env);
        -:   56:
        -:   57:#define NAPI_THROW_IF_FAILED_VOID(env, status)           \
        -:   58:  if ((status) != napi_ok) throw Napi::Error::New(env);
        -:   59:
        -:   60:#else // NAPI_CPP_EXCEPTIONS
        -:   61:
        -:   62:// When C++ exceptions are disabled, Errors are thrown as JavaScript exceptions,
        -:   63:// which are pending until the callback returns to JS.  The variadic parameter
        -:   64:// is an optional return value; usually it is an empty result.
        -:   65:// We need _VOID versions of the macros to avoid warnings resulting from
        -:   66:// leaving the NAPI_THROW_* `...` argument empty.
        -:   67:
        -:   68:#define NAPI_THROW(e, ...)                               \
        -:   69:  do {                                                   \
        -:   70:    (e).ThrowAsJavaScriptException();                    \
        -:   71:    return __VA_ARGS__;                                  \
        -:   72:  } while (0)
        -:   73:
        -:   74:#define NAPI_THROW_VOID(e)                               \
        -:   75:  do {                                                   \
        -:   76:    (e).ThrowAsJavaScriptException();                    \
        -:   77:    return;                                              \
        -:   78:  } while (0)
        -:   79:
        -:   80:#define NAPI_THROW_IF_FAILED(env, status, ...)           \
        -:   81:  if ((status) != napi_ok) {                             \
        -:   82:    Napi::Error::New(env).ThrowAsJavaScriptException();  \
        -:   83:    return __VA_ARGS__;                                  \
        -:   84:  }
        -:   85:
        -:   86:#define NAPI_THROW_IF_FAILED_VOID(env, status)           \
        -:   87:  if ((status) != napi_ok) {                             \
        -:   88:    Napi::Error::New(env).ThrowAsJavaScriptException();  \
        -:   89:    return;                                              \
        -:   90:  }
        -:   91:
        -:   92:#endif // NAPI_CPP_EXCEPTIONS
        -:   93:
        -:   94:#define NAPI_FATAL_IF_FAILED(status, location, message)  \
        -:   95:  do {                                                   \
        -:   96:    if ((status) != napi_ok) {                           \
        -:   97:      Napi::Error::Fatal((location), (message));         \
        -:   98:    }                                                    \
        -:   99:  } while (0)
        -:  100:
        -:  101:////////////////////////////////////////////////////////////////////////////////
        -:  102:/// N-API C++ Wrapper Classes
        -:  103:///
        -:  104:/// These classes wrap the "N-API" ABI-stable C APIs for Node.js, providing a
        -:  105:/// C++ object model and C++ exception-handling semantics with low overhead.
        -:  106:/// The wrappers are all header-only so that they do not affect the ABI.
        -:  107:////////////////////////////////////////////////////////////////////////////////
        -:  108:namespace Napi {
        -:  109:
        -:  110:  // Forward declarations
        -:  111:  class Env;
        -:  112:  class Value;
        -:  113:  class Boolean;
        -:  114:  class Number;
        -:  115:// Currently experimental guard with the definition of NAPI_EXPERIMENTAL.
        -:  116:// Once it is no longer experimental guard with the NAPI_VERSION in which it is
        -:  117:// released instead.
        -:  118:#ifdef NAPI_EXPERIMENTAL
        -:  119:  class BigInt;
        -:  120:#endif  // NAPI_EXPERIMENTAL
        -:  121:#if (NAPI_VERSION > 4)
        -:  122:  class Date;
        -:  123:#endif
        -:  124:  class String;
        -:  125:  class Object;
        -:  126:  class Array;
        -:  127:  class Function;
        -:  128:  template <typename T> class Buffer;
        -:  129:  class Error;
        -:  130:  class PropertyDescriptor;
        -:  131:  class CallbackInfo;
        -:  132:  template <typename T> class Reference;
        -:  133:  class TypedArray;
        -:  134:  template <typename T> class TypedArrayOf;
        -:  135:
        -:  136:  typedef TypedArrayOf<int8_t> Int8Array;     ///< Typed-array of signed 8-bit integers
        -:  137:  typedef TypedArrayOf<uint8_t> Uint8Array;   ///< Typed-array of unsigned 8-bit integers
        -:  138:  typedef TypedArrayOf<int16_t> Int16Array;   ///< Typed-array of signed 16-bit integers
        -:  139:  typedef TypedArrayOf<uint16_t> Uint16Array; ///< Typed-array of unsigned 16-bit integers
        -:  140:  typedef TypedArrayOf<int32_t> Int32Array;   ///< Typed-array of signed 32-bit integers
        -:  141:  typedef TypedArrayOf<uint32_t> Uint32Array; ///< Typed-array of unsigned 32-bit integers
        -:  142:  typedef TypedArrayOf<float> Float32Array;   ///< Typed-array of 32-bit floating-point values
        -:  143:  typedef TypedArrayOf<double> Float64Array;  ///< Typed-array of 64-bit floating-point values
        -:  144:// Currently experimental guard with the definition of NAPI_EXPERIMENTAL.
        -:  145:// Once it is no longer experimental guard with the NAPI_VERSION in which it is
        -:  146:// released instead.
        -:  147:#ifdef NAPI_EXPERIMENTAL
        -:  148:  typedef TypedArrayOf<int64_t> BigInt64Array;   ///< Typed array of signed 64-bit integers
        -:  149:  typedef TypedArrayOf<uint64_t> BigUint64Array; ///< Typed array of unsigned 64-bit integers
        -:  150:#endif  // NAPI_EXPERIMENTAL
        -:  151:
        -:  152:  /// Defines the signature of a N-API C++ module's registration callback (init) function.
        -:  153:  typedef Object (*ModuleRegisterCallback)(Env env, Object exports);
        -:  154:
        -:  155:  class MemoryManagement;
        -:  156:
        -:  157:  /// Environment for N-API values and operations.
        -:  158:  ///
        -:  159:  /// All N-API values and operations must be associated with an environment. An environment
        -:  160:  /// instance is always provided to callback functions; that environment must then be used for any
        -:  161:  /// creation of N-API values or other N-API operations within the callback. (Many methods infer
        -:  162:  /// the environment from the `this` instance that the method is called on.)
        -:  163:  ///
        -:  164:  /// In the future, multiple environments per process may be supported, although current
        -:  165:  /// implementations only support one environment per process.
        -:  166:  ///
        -:  167:  /// In the V8 JavaScript engine, a N-API environment approximately corresponds to an Isolate.
        -:  168:  class Env {
        -:  169:  public:
        -:  170:    Env(napi_env env);
        -:  171:
        -:  172:    operator napi_env() const;
        -:  173:
        -:  174:    Object Global() const;
        -:  175:    Value Undefined() const;
        -:  176:    Value Null() const;
        -:  177:
        -:  178:    bool IsExceptionPending() const;
        -:  179:    Error GetAndClearPendingException();
        -:  180:
        -:  181:  private:
        -:  182:    napi_env _env;
        -:  183:  };
        -:  184:
        -:  185:  /// A JavaScript value of unknown type.
        -:  186:  ///
        -:  187:  /// For type-specific operations, convert to one of the Value subclasses using a `To*` or `As()`
        -:  188:  /// method. The `To*` methods do type coercion; the `As()` method does not.
        -:  189:  ///
        -:  190:  ///     Napi::Value value = ...
        -:  191:  ///     if (!value.IsString()) throw Napi::TypeError::New(env, "Invalid arg...");
        -:  192:  ///     Napi::String str = value.As<Napi::String>(); // Cast to a string value
        -:  193:  ///
        -:  194:  ///     Napi::Value anotherValue = ...
        -:  195:  ///     bool isTruthy = anotherValue.ToBoolean(); // Coerce to a boolean value
        -:  196:  class Value {
        -:  197:  public:
        -:  198:    Value();                               ///< Creates a new _empty_ Value instance.
        -:  199:    Value(napi_env env, napi_value value); ///< Wraps a N-API value primitive.
        -:  200:
        -:  201:    /// Creates a JS value from a C++ primitive.
        -:  202:    ///
        -:  203:    /// `value` may be any of:
        -:  204:    /// - bool
        -:  205:    /// - Any integer type
        -:  206:    /// - Any floating point type
        -:  207:    /// - const char* (encoded using UTF-8, null-terminated)
        -:  208:    /// - const char16_t* (encoded using UTF-16-LE, null-terminated)
        -:  209:    /// - std::string (encoded using UTF-8)
        -:  210:    /// - std::u16string
        -:  211:    /// - napi::Value
        -:  212:    /// - napi_value
        -:  213:    template <typename T>
        -:  214:    static Value From(napi_env env, const T& value);
        -:  215:
        -:  216:    /// Converts to a N-API value primitive.
        -:  217:    ///
        -:  218:    /// If the instance is _empty_, this returns `nullptr`.
        -:  219:    operator napi_value() const;
        -:  220:
        -:  221:    /// Tests if this value strictly equals another value.
        -:  222:    bool operator ==(const Value& other) const;
        -:  223:
        -:  224:    /// Tests if this value does not strictly equal another value.
        -:  225:    bool operator !=(const Value& other) const;
        -:  226:
        -:  227:    /// Tests if this value strictly equals another value.
        -:  228:    bool StrictEquals(const Value& other) const;
        -:  229:
        -:  230:    /// Gets the environment the value is associated with.
        -:  231:    Napi::Env Env() const;
        -:  232:
        -:  233:    /// Checks if the value is empty (uninitialized).
        -:  234:    ///
        -:  235:    /// An empty value is invalid, and most attempts to perform an operation on an empty value
        -:  236:    /// will result in an exception. Note an empty value is distinct from JavaScript `null` or
        -:  237:    /// `undefined`, which are valid values.
        -:  238:    ///
        -:  239:    /// When C++ exceptions are disabled at compile time, a method with a `Value` return type may
        -:  240:    /// return an empty value to indicate a pending exception. So when not using C++ exceptions,
        -:  241:    /// callers should check whether the value is empty before attempting to use it.
        -:  242:    bool IsEmpty() const;
        -:  243:
        -:  244:    napi_valuetype Type() const; ///< Gets the type of the value.
        -:  245:
        -:  246:    bool IsUndefined() const;   ///< Tests if a value is an undefined JavaScript value.
        -:  247:    bool IsNull() const;        ///< Tests if a value is a null JavaScript value.
        -:  248:    bool IsBoolean() const;     ///< Tests if a value is a JavaScript boolean.
        -:  249:    bool IsNumber() const;      ///< Tests if a value is a JavaScript number.
        -:  250:// Currently experimental guard with the definition of NAPI_EXPERIMENTAL.
        -:  251:// Once it is no longer experimental guard with the NAPI_VERSION in which it is
        -:  252:// released instead.
        -:  253:#ifdef NAPI_EXPERIMENTAL
        -:  254:    bool IsBigInt() const;      ///< Tests if a value is a JavaScript bigint.
        -:  255:#endif  // NAPI_EXPERIMENTAL
        -:  256:#if (NAPI_VERSION > 4)
        -:  257:    bool IsDate() const;        ///< Tests if a value is a JavaScript date.
        -:  258:#endif
        -:  259:    bool IsString() const;      ///< Tests if a value is a JavaScript string.
        -:  260:    bool IsSymbol() const;      ///< Tests if a value is a JavaScript symbol.
        -:  261:    bool IsArray() const;       ///< Tests if a value is a JavaScript array.
        -:  262:    bool IsArrayBuffer() const; ///< Tests if a value is a JavaScript array buffer.
        -:  263:    bool IsTypedArray() const;  ///< Tests if a value is a JavaScript typed array.
        -:  264:    bool IsObject() const;      ///< Tests if a value is a JavaScript object.
        -:  265:    bool IsFunction() const;    ///< Tests if a value is a JavaScript function.
        -:  266:    bool IsPromise() const;     ///< Tests if a value is a JavaScript promise.
        -:  267:    bool IsDataView() const;    ///< Tests if a value is a JavaScript data view.
        -:  268:    bool IsBuffer() const;      ///< Tests if a value is a Node buffer.
        -:  269:    bool IsExternal() const;    ///< Tests if a value is a pointer to external data.
        -:  270:
        -:  271:    /// Casts to another type of `Napi::Value`, when the actual type is known or assumed.
        -:  272:    ///
        -:  273:    /// This conversion does NOT coerce the type. Calling any methods inappropriate for the actual
        -:  274:    /// value type will throw `Napi::Error`.
        -:  275:    template <typename T> T As() const;
        -:  276:
        -:  277:    Boolean ToBoolean() const; ///< Coerces a value to a JavaScript boolean.
        -:  278:    Number ToNumber() const;   ///< Coerces a value to a JavaScript number.
        -:  279:    String ToString() const;   ///< Coerces a value to a JavaScript string.
        -:  280:    Object ToObject() const;   ///< Coerces a value to a JavaScript object.
        -:  281:
        -:  282:  protected:
        -:  283:    /// !cond INTERNAL
        -:  284:    napi_env _env;
        -:  285:    napi_value _value;
        -:  286:    /// !endcond
        -:  287:  };
        -:  288:
        -:  289:  /// A JavaScript boolean value.
        -:  290:  class Boolean : public Value {
        -:  291:  public:
        -:  292:    static Boolean New(
        -:  293:      napi_env env, ///< N-API environment
        -:  294:      bool value    ///< Boolean value
        -:  295:    );
        -:  296:
        -:  297:    Boolean();                               ///< Creates a new _empty_ Boolean instance.
        -:  298:    Boolean(napi_env env, napi_value value); ///< Wraps a N-API value primitive.
        -:  299:
        -:  300:    operator bool() const; ///< Converts a Boolean value to a boolean primitive.
        -:  301:    bool Value() const;    ///< Converts a Boolean value to a boolean primitive.
        -:  302:  };
        -:  303:
        -:  304:  /// A JavaScript number value.
        -:  305:  class Number : public Value {
        -:  306:  public:
        -:  307:    static Number New(
        -:  308:      napi_env env, ///< N-API environment
        -:  309:      double value  ///< Number value
        -:  310:    );
        -:  311:
        -:  312:    Number();                               ///< Creates a new _empty_ Number instance.
        -:  313:    Number(napi_env env, napi_value value); ///< Wraps a N-API value primitive.
        -:  314:
        -:  315:    operator int32_t() const;  ///< Converts a Number value to a 32-bit signed integer value.
        -:  316:    operator uint32_t() const; ///< Converts a Number value to a 32-bit unsigned integer value.
        -:  317:    operator int64_t() const;  ///< Converts a Number value to a 64-bit signed integer value.
        -:  318:    operator float() const;    ///< Converts a Number value to a 32-bit floating-point value.
        -:  319:    operator double() const;   ///< Converts a Number value to a 64-bit floating-point value.
        -:  320:
        -:  321:    int32_t Int32Value() const;   ///< Converts a Number value to a 32-bit signed integer value.
        -:  322:    uint32_t Uint32Value() const; ///< Converts a Number value to a 32-bit unsigned integer value.
        -:  323:    int64_t Int64Value() const;   ///< Converts a Number value to a 64-bit signed integer value.
        -:  324:    float FloatValue() const;     ///< Converts a Number value to a 32-bit floating-point value.
        -:  325:    double DoubleValue() const;   ///< Converts a Number value to a 64-bit floating-point value.
        -:  326:  };
        -:  327:
        -:  328:// Currently experimental guard with the definition of NAPI_EXPERIMENTAL.
        -:  329:// Once it is no longer experimental guard with the NAPI_VERSION in which it is
        -:  330:// released instead.
        -:  331:#ifdef NAPI_EXPERIMENTAL
        -:  332:  /// A JavaScript bigint value.
        -:  333:  class BigInt : public Value {
        -:  334:  public:
        -:  335:    static BigInt New(
        -:  336:      napi_env env, ///< N-API environment
        -:  337:      int64_t value ///< Number value
        -:  338:    );
        -:  339:    static BigInt New(
        -:  340:      napi_env env,  ///< N-API environment
        -:  341:      uint64_t value ///< Number value
        -:  342:    );
        -:  343:
        -:  344:    /// Creates a new BigInt object using a specified sign bit and a
        -:  345:    /// specified list of digits/words.
        -:  346:    /// The resulting number is calculated as:
        -:  347:    /// (-1)^sign_bit * (words[0] * (2^64)^0 + words[1] * (2^64)^1 + ...)
        -:  348:    static BigInt New(
        -:  349:      napi_env env,          ///< N-API environment
        -:  350:      int sign_bit,          ///< Sign bit. 1 if negative.
        -:  351:      size_t word_count,     ///< Number of words in array
        -:  352:      const uint64_t* words  ///< Array of words
        -:  353:    );
        -:  354:
        -:  355:    BigInt();                               ///< Creates a new _empty_ BigInt instance.
        -:  356:    BigInt(napi_env env, napi_value value); ///< Wraps a N-API value primitive.
        -:  357:
        -:  358:    int64_t Int64Value(bool* lossless) const;   ///< Converts a BigInt value to a 64-bit signed integer value.
        -:  359:    uint64_t Uint64Value(bool* lossless) const; ///< Converts a BigInt value to a 64-bit unsigned integer value.
        -:  360:
        -:  361:    size_t WordCount() const; ///< The number of 64-bit words needed to store the result of ToWords().
        -:  362:
        -:  363:    /// Writes the contents of this BigInt to a specified memory location.
        -:  364:    /// `sign_bit` must be provided and will be set to 1 if this BigInt is negative.
        -:  365:    /// `*word_count` has to be initialized to the length of the `words` array.
        -:  366:    /// Upon return, it will be set to the actual number of words that would
        -:  367:    /// be needed to store this BigInt (i.e. the return value of `WordCount()`).
        -:  368:    void ToWords(int* sign_bit, size_t* word_count, uint64_t* words);
        -:  369:  };
        -:  370:#endif  // NAPI_EXPERIMENTAL
        -:  371:
        -:  372:#if (NAPI_VERSION > 4)
        -:  373:  /// A JavaScript date value.
        -:  374:  class Date : public Value {
        -:  375:  public:
        -:  376:    /// Creates a new Date value from a double primitive.
        -:  377:    static Date New(
        -:  378:      napi_env env, ///< N-API environment
        -:  379:      double value  ///< Number value
        -:  380:    );
        -:  381:
        -:  382:    Date();                               ///< Creates a new _empty_ Date instance.
        -:  383:    Date(napi_env env, napi_value value); ///< Wraps a N-API value primitive.
        -:  384:    operator double() const;              ///< Converts a Date value to double primitive
        -:  385:
        -:  386:    double ValueOf() const;   ///< Converts a Date value to a double primitive.
        -:  387:  };
        -:  388:  #endif
        -:  389:
        -:  390:  /// A JavaScript string or symbol value (that can be used as a property name).
        -:  391:  class Name : public Value {
        -:  392:  public:
        -:  393:    Name();                               ///< Creates a new _empty_ Name instance.
        -:  394:    Name(napi_env env, napi_value value); ///< Wraps a N-API value primitive.
        -:  395:  };
        -:  396:
        -:  397:  /// A JavaScript string value.
        -:  398:  class String : public Name {
        -:  399:  public:
        -:  400:    /// Creates a new String value from a UTF-8 encoded C++ string.
        -:  401:    static String New(
        -:  402:      napi_env env,            ///< N-API environment
        -:  403:      const std::string& value ///< UTF-8 encoded C++ string
        -:  404:    );
        -:  405:
        -:  406:    /// Creates a new String value from a UTF-16 encoded C++ string.
        -:  407:    static String New(
        -:  408:      napi_env env,               ///< N-API environment
        -:  409:      const std::u16string& value ///< UTF-16 encoded C++ string
        -:  410:    );
        -:  411:
        -:  412:    /// Creates a new String value from a UTF-8 encoded C string.
        -:  413:    static String New(
        -:  414:      napi_env env,     ///< N-API environment
        -:  415:      const char* value ///< UTF-8 encoded null-terminated C string
        -:  416:    );
        -:  417:
        -:  418:    /// Creates a new String value from a UTF-16 encoded C string.
        -:  419:    static String New(
        -:  420:      napi_env env,         ///< N-API environment
        -:  421:      const char16_t* value ///< UTF-16 encoded null-terminated C string
        -:  422:    );
        -:  423:
        -:  424:    /// Creates a new String value from a UTF-8 encoded C string with specified length.
        -:  425:    static String New(
        -:  426:      napi_env env,      ///< N-API environment
        -:  427:      const char* value, ///< UTF-8 encoded C string (not necessarily null-terminated)
        -:  428:      size_t length      ///< length of the string in bytes
        -:  429:    );
        -:  430:
        -:  431:    /// Creates a new String value from a UTF-16 encoded C string with specified length.
        -:  432:    static String New(
        -:  433:      napi_env env,          ///< N-API environment
        -:  434:      const char16_t* value, ///< UTF-16 encoded C string (not necessarily null-terminated)
        -:  435:      size_t length          ///< Length of the string in 2-byte code units
        -:  436:    );
        -:  437:
        -:  438:    /// Creates a new String based on the original object's type.
        -:  439:    ///
        -:  440:    /// `value` may be any of:
        -:  441:    /// - const char* (encoded using UTF-8, null-terminated)
        -:  442:    /// - const char16_t* (encoded using UTF-16-LE, null-terminated)
        -:  443:    /// - std::string (encoded using UTF-8)
        -:  444:    /// - std::u16string
        -:  445:    template <typename T>
        -:  446:    static String From(napi_env env, const T& value);
        -:  447:
        -:  448:    String();                               ///< Creates a new _empty_ String instance.
        -:  449:    String(napi_env env, napi_value value); ///< Wraps a N-API value primitive.
        -:  450:
        -:  451:    operator std::string() const;      ///< Converts a String value to a UTF-8 encoded C++ string.
        -:  452:    operator std::u16string() const;   ///< Converts a String value to a UTF-16 encoded C++ string.
        -:  453:    std::string Utf8Value() const;     ///< Converts a String value to a UTF-8 encoded C++ string.
        -:  454:    std::u16string Utf16Value() const; ///< Converts a String value to a UTF-16 encoded C++ string.
        -:  455:  };
        -:  456:
        -:  457:  /// A JavaScript symbol value.
        -:  458:  class Symbol : public Name {
        -:  459:  public:
        -:  460:    /// Creates a new Symbol value with an optional description.
        -:  461:    static Symbol New(
        -:  462:      napi_env env,                     ///< N-API environment
        -:  463:      const char* description = nullptr ///< Optional UTF-8 encoded null-terminated C string
        -:  464:                                        ///  describing the symbol
        -:  465:    );
        -:  466:
        -:  467:    /// Creates a new Symbol value with a description.
        -:  468:    static Symbol New(
        -:  469:      napi_env env,                  ///< N-API environment
        -:  470:      const std::string& description ///< UTF-8 encoded C++ string describing the symbol
        -:  471:    );
        -:  472:
        -:  473:    /// Creates a new Symbol value with a description.
        -:  474:    static Symbol New(
        -:  475:      napi_env env,      ///< N-API environment
        -:  476:      String description ///< String value describing the symbol
        -:  477:    );
        -:  478:
        -:  479:    /// Creates a new Symbol value with a description.
        -:  480:    static Symbol New(
        -:  481:      napi_env env,          ///< N-API environment
        -:  482:      napi_value description ///< String value describing the symbol
        -:  483:    );
        -:  484:
        -:  485:    /// Get a public Symbol (e.g. Symbol.iterator).
        -:  486:    static Symbol WellKnown(napi_env, const std::string& name);
        -:  487:
        -:  488:    Symbol();                               ///< Creates a new _empty_ Symbol instance.
        -:  489:    Symbol(napi_env env, napi_value value); ///< Wraps a N-API value primitive.
        -:  490:  };
        -:  491:
        -:  492:  /// A JavaScript object value.
        -:  493:  class Object : public Value {
        -:  494:  public:
        -:  495:    /// Enables property and element assignments using indexing syntax.
        -:  496:    ///
        -:  497:    /// Example:
        -:  498:    ///
        -:  499:    ///     Napi::Value propertyValue = object1['A'];
        -:  500:    ///     object2['A'] = propertyValue;
        -:  501:    ///     Napi::Value elementValue = array[0];
        -:  502:    ///     array[1] = elementValue;
        -:  503:    template <typename Key>
        -:  504:    class PropertyLValue {
        -:  505:    public:
        -:  506:      /// Converts an L-value to a value.
        -:  507:      operator Value() const;
        -:  508:
        -:  509:      /// Assigns a value to the property. The type of value can be
        -:  510:      /// anything supported by `Object::Set`.
        -:  511:      template <typename ValueType>
        -:  512:      PropertyLValue& operator =(ValueType value);
        -:  513:
        -:  514:    private:
        -:  515:      PropertyLValue() = delete;
        -:  516:      PropertyLValue(Object object, Key key);
        -:  517:      napi_env _env;
        -:  518:      napi_value _object;
        -:  519:      Key _key;
        -:  520:
        -:  521:      friend class Napi::Object;
        -:  522:    };
        -:  523:
        -:  524:    /// Creates a new Object value.
        -:  525:    static Object New(
        -:  526:      napi_env env ///< N-API environment
        -:  527:    );
        -:  528:
        -:  529:    Object();                               ///< Creates a new _empty_ Object instance.
        -:  530:    Object(napi_env env, napi_value value); ///< Wraps a N-API value primitive.
        -:  531:
        -:  532:    /// Gets or sets a named property.
        -:  533:    PropertyLValue<std::string> operator [](
        -:  534:      const char* utf8name ///< UTF-8 encoded null-terminated property name
        -:  535:    );
        -:  536:
        -:  537:    /// Gets or sets a named property.
        -:  538:    PropertyLValue<std::string> operator [](
        -:  539:      const std::string& utf8name ///< UTF-8 encoded property name
        -:  540:    );
        -:  541:
        -:  542:    /// Gets or sets an indexed property or array element.
        -:  543:    PropertyLValue<uint32_t> operator [](
        -:  544:      uint32_t index /// Property / element index
        -:  545:    );
        -:  546:
        -:  547:    /// Gets a named property.
        -:  548:    Value operator [](
        -:  549:      const char* utf8name ///< UTF-8 encoded null-terminated property name
        -:  550:    ) const;
        -:  551:
        -:  552:    /// Gets a named property.
        -:  553:    Value operator [](
        -:  554:      const std::string& utf8name ///< UTF-8 encoded property name
        -:  555:    ) const;
        -:  556:
        -:  557:    /// Gets an indexed property or array element.
        -:  558:    Value operator [](
        -:  559:      uint32_t index ///< Property / element index
        -:  560:    ) const;
        -:  561:
        -:  562:    /// Checks whether a property is present.
        -:  563:    bool Has(
        -:  564:      napi_value key ///< Property key primitive
        -:  565:    ) const;
        -:  566:
        -:  567:    /// Checks whether a property is present.
        -:  568:    bool Has(
        -:  569:      Value key ///< Property key
        -:  570:    ) const;
        -:  571:
        -:  572:    /// Checks whether a named property is present.
        -:  573:    bool Has(
        -:  574:      const char* utf8name ///< UTF-8 encoded null-terminated property name
        -:  575:    ) const;
        -:  576:
        -:  577:    /// Checks whether a named property is present.
        -:  578:    bool Has(
        -:  579:      const std::string& utf8name ///< UTF-8 encoded property name
        -:  580:    ) const;
        -:  581:
        -:  582:    /// Checks whether a own property is present.
        -:  583:    bool HasOwnProperty(
        -:  584:      napi_value key ///< Property key primitive
        -:  585:    ) const;
        -:  586:
        -:  587:    /// Checks whether a own property is present.
        -:  588:    bool HasOwnProperty(
        -:  589:      Value key ///< Property key
        -:  590:    ) const;
        -:  591:
        -:  592:    /// Checks whether a own property is present.
        -:  593:    bool HasOwnProperty(
        -:  594:      const char* utf8name ///< UTF-8 encoded null-terminated property name
        -:  595:    ) const;
        -:  596:
        -:  597:    /// Checks whether a own property is present.
        -:  598:    bool HasOwnProperty(
        -:  599:      const std::string& utf8name ///< UTF-8 encoded property name
        -:  600:    ) const;
        -:  601:
        -:  602:    /// Gets a property.
        -:  603:    Value Get(
        -:  604:      napi_value key ///< Property key primitive
        -:  605:    ) const;
        -:  606:
        -:  607:    /// Gets a property.
        -:  608:    Value Get(
        -:  609:      Value key ///< Property key
        -:  610:    ) const;
        -:  611:
        -:  612:    /// Gets a named property.
        -:  613:    Value Get(
        -:  614:      const char* utf8name ///< UTF-8 encoded null-terminated property name
        -:  615:    ) const;
        -:  616:
        -:  617:    /// Gets a named property.
        -:  618:    Value Get(
        -:  619:      const std::string& utf8name ///< UTF-8 encoded property name
        -:  620:    ) const;
        -:  621:
        -:  622:    /// Sets a property.
        -:  623:    template <typename ValueType>
        -:  624:    void Set(
        -:  625:      napi_value key,  ///< Property key primitive
        -:  626:      const ValueType& value ///< Property value primitive
        -:  627:    );
        -:  628:
        -:  629:    /// Sets a property.
        -:  630:    template <typename ValueType>
        -:  631:    void Set(
        -:  632:      Value key,  ///< Property key
        -:  633:      const ValueType& value ///< Property value
        -:  634:    );
        -:  635:
        -:  636:    /// Sets a named property.
        -:  637:    template <typename ValueType>
        -:  638:    void Set(
        -:  639:      const char* utf8name, ///< UTF-8 encoded null-terminated property name
        -:  640:      const ValueType& value
        -:  641:    );
        -:  642:
        -:  643:    /// Sets a named property.
        -:  644:    template <typename ValueType>
        -:  645:    void Set(
        -:  646:      const std::string& utf8name, ///< UTF-8 encoded property name
        -:  647:      const ValueType& value             ///< Property value primitive
        -:  648:    );
        -:  649:
        -:  650:    /// Delete property.
        -:  651:    bool Delete(
        -:  652:      napi_value key ///< Property key primitive
        -:  653:    );
        -:  654:
        -:  655:    /// Delete property.
        -:  656:    bool Delete(
        -:  657:      Value key ///< Property key
        -:  658:    );
        -:  659:
        -:  660:    /// Delete property.
        -:  661:    bool Delete(
        -:  662:      const char* utf8name ///< UTF-8 encoded null-terminated property name
        -:  663:    );
        -:  664:
        -:  665:    /// Delete property.
        -:  666:    bool Delete(
        -:  667:      const std::string& utf8name ///< UTF-8 encoded property name
        -:  668:    );
        -:  669:
        -:  670:    /// Checks whether an indexed property is present.
        -:  671:    bool Has(
        -:  672:      uint32_t index ///< Property / element index
        -:  673:    ) const;
        -:  674:
        -:  675:    /// Gets an indexed property or array element.
        -:  676:    Value Get(
        -:  677:      uint32_t index ///< Property / element index
        -:  678:    ) const;
        -:  679:
        -:  680:    /// Sets an indexed property or array element.
        -:  681:    template <typename ValueType>
        -:  682:    void Set(
        -:  683:      uint32_t index,  ///< Property / element index
        -:  684:      const ValueType& value ///< Property value primitive
        -:  685:    );
        -:  686:
        -:  687:    /// Deletes an indexed property or array element.
        -:  688:    bool Delete(
        -:  689:      uint32_t index ///< Property / element index
        -:  690:    );
        -:  691:
        -:  692:    Array GetPropertyNames() const; ///< Get all property names
        -:  693:
        -:  694:    /// Defines a property on the object.
        -:  695:    void DefineProperty(
        -:  696:      const PropertyDescriptor& property ///< Descriptor for the property to be defined
        -:  697:    );
        -:  698:
        -:  699:    /// Defines properties on the object.
        -:  700:    void DefineProperties(
        -:  701:      const std::initializer_list<PropertyDescriptor>& properties
        -:  702:        ///< List of descriptors for the properties to be defined
        -:  703:    );
        -:  704:
        -:  705:    /// Defines properties on the object.
        -:  706:    void DefineProperties(
        -:  707:      const std::vector<PropertyDescriptor>& properties
        -:  708:        ///< Vector of descriptors for the properties to be defined
        -:  709:    );
        -:  710:
        -:  711:    /// Checks if an object is an instance created by a constructor function.
        -:  712:    ///
        -:  713:    /// This is equivalent to the JavaScript `instanceof` operator.
        -:  714:    bool InstanceOf(
        -:  715:      const Function& constructor ///< Constructor function
        -:  716:    ) const;
        -:  717:
        -:  718:    template <typename Finalizer, typename T>
        -:  719:    inline void AddFinalizer(Finalizer finalizeCallback, T* data);
        -:  720:
        -:  721:    template <typename Finalizer, typename T, typename Hint>
        -:  722:    inline void AddFinalizer(Finalizer finalizeCallback,
        -:  723:                             T* data,
        -:  724:                             Hint* finalizeHint);
        -:  725:  };
        -:  726:
        -:  727:  template <typename T>
        -:  728:  class External : public Value {
        -:  729:  public:
        -:  730:    static External New(napi_env env, T* data);
        -:  731:
        -:  732:    // Finalizer must implement `void operator()(Env env, T* data)`.
        -:  733:    template <typename Finalizer>
        -:  734:    static External New(napi_env env,
        -:  735:                        T* data,
        -:  736:                        Finalizer finalizeCallback);
        -:  737:    // Finalizer must implement `void operator()(Env env, T* data, Hint* hint)`.
        -:  738:    template <typename Finalizer, typename Hint>
        -:  739:    static External New(napi_env env,
        -:  740:                        T* data,
        -:  741:                        Finalizer finalizeCallback,
        -:  742:                        Hint* finalizeHint);
        -:  743:
        -:  744:    External();
        -:  745:    External(napi_env env, napi_value value);
        -:  746:
        -:  747:    T* Data() const;
        -:  748:  };
        -:  749:
        -:  750:  class Array : public Object {
        -:  751:  public:
        -:  752:    static Array New(napi_env env);
        -:  753:    static Array New(napi_env env, size_t length);
        -:  754:
        -:  755:    Array();
        -:  756:    Array(napi_env env, napi_value value);
        -:  757:
        -:  758:    uint32_t Length() const;
        -:  759:  };
        -:  760:
        -:  761:  /// A JavaScript array buffer value.
        -:  762:  class ArrayBuffer : public Object {
        -:  763:  public:
        -:  764:    /// Creates a new ArrayBuffer instance over a new automatically-allocated buffer.
        -:  765:    static ArrayBuffer New(
        -:  766:      napi_env env,     ///< N-API environment
        -:  767:      size_t byteLength ///< Length of the buffer to be allocated, in bytes
        -:  768:    );
        -:  769:
        -:  770:    /// Creates a new ArrayBuffer instance, using an external buffer with specified byte length.
        -:  771:    static ArrayBuffer New(
        -:  772:      napi_env env,       ///< N-API environment
        -:  773:      void* externalData, ///< Pointer to the external buffer to be used by the array
        -:  774:      size_t byteLength   ///< Length of the external buffer to be used by the array, in bytes
        -:  775:    );
        -:  776:
        -:  777:    /// Creates a new ArrayBuffer instance, using an external buffer with specified byte length.
        -:  778:    template <typename Finalizer>
        -:  779:    static ArrayBuffer New(
        -:  780:      napi_env env,              ///< N-API environment
        -:  781:      void* externalData,        ///< Pointer to the external buffer to be used by the array
        -:  782:      size_t byteLength,         ///< Length of the external buffer to be used by the array,
        -:  783:                                 ///  in bytes
        -:  784:      Finalizer finalizeCallback ///< Function to be called when the array buffer is destroyed;
        -:  785:                                 ///  must implement `void operator()(Env env, void* externalData)`
        -:  786:    );
        -:  787:
        -:  788:    /// Creates a new ArrayBuffer instance, using an external buffer with specified byte length.
        -:  789:    template <typename Finalizer, typename Hint>
        -:  790:    static ArrayBuffer New(
        -:  791:      napi_env env,               ///< N-API environment
        -:  792:      void* externalData,         ///< Pointer to the external buffer to be used by the array
        -:  793:      size_t byteLength,          ///< Length of the external buffer to be used by the array,
        -:  794:                                  ///  in bytes
        -:  795:      Finalizer finalizeCallback, ///< Function to be called when the array buffer is destroyed;
        -:  796:                                  ///  must implement `void operator()(Env env, void* externalData, Hint* hint)`
        -:  797:      Hint* finalizeHint          ///< Hint (second parameter) to be passed to the finalize callback
        -:  798:    );
        -:  799:
        -:  800:    ArrayBuffer();                               ///< Creates a new _empty_ ArrayBuffer instance.
        -:  801:    ArrayBuffer(napi_env env, napi_value value); ///< Wraps a N-API value primitive.
        -:  802:
        -:  803:    void* Data();        ///< Gets a pointer to the data buffer.
        -:  804:    size_t ByteLength(); ///< Gets the length of the array buffer in bytes.
        -:  805:
        -:  806:  private:
        -:  807:    mutable void* _data;
        -:  808:    mutable size_t _length;
        -:  809:
        -:  810:    ArrayBuffer(napi_env env, napi_value value, void* data, size_t length);
        -:  811:    void EnsureInfo() const;
        -:  812:  };
        -:  813:
        -:  814:  /// A JavaScript typed-array value with unknown array type.
        -:  815:  ///
        -:  816:  /// For type-specific operations, cast to a `TypedArrayOf<T>` instance using the `As()`
        -:  817:  /// method:
        -:  818:  ///
        -:  819:  ///     Napi::TypedArray array = ...
        -:  820:  ///     if (t.TypedArrayType() == napi_int32_array) {
        -:  821:  ///         Napi::Int32Array int32Array = t.As<Napi::Int32Array>();
        -:  822:  ///     }
        -:  823:  class TypedArray : public Object {
        -:  824:  public:
        -:  825:    TypedArray();                               ///< Creates a new _empty_ TypedArray instance.
        -:  826:    TypedArray(napi_env env, napi_value value); ///< Wraps a N-API value primitive.
        -:  827:
        -:  828:    napi_typedarray_type TypedArrayType() const; ///< Gets the type of this typed-array.
        -:  829:    Napi::ArrayBuffer ArrayBuffer() const;       ///< Gets the backing array buffer.
        -:  830:
        -:  831:    uint8_t ElementSize() const;  ///< Gets the size in bytes of one element in the array.
        -:  832:    size_t ElementLength() const; ///< Gets the number of elements in the array.
        -:  833:    size_t ByteOffset() const;    ///< Gets the offset into the buffer where the array starts.
        -:  834:    size_t ByteLength() const;    ///< Gets the length of the array in bytes.
        -:  835:
        -:  836:  protected:
        -:  837:    /// !cond INTERNAL
        -:  838:    napi_typedarray_type _type;
        -:  839:    size_t _length;
        -:  840:
        -:  841:    TypedArray(napi_env env, napi_value value, napi_typedarray_type type, size_t length);
        -:  842:
        -:  843:    static const napi_typedarray_type unknown_array_type = static_cast<napi_typedarray_type>(-1);
        -:  844:
        -:  845:    template <typename T>
        -:  846:    static
        -:  847:#if defined(NAPI_HAS_CONSTEXPR)
        -:  848:    constexpr
        -:  849:#endif
        -:  850:    napi_typedarray_type TypedArrayTypeForPrimitiveType() {
        -:  851:      return std::is_same<T, int8_t>::value ? napi_int8_array
        -:  852:        : std::is_same<T, uint8_t>::value ? napi_uint8_array
        -:  853:        : std::is_same<T, int16_t>::value ? napi_int16_array
        -:  854:        : std::is_same<T, uint16_t>::value ? napi_uint16_array
        -:  855:        : std::is_same<T, int32_t>::value ? napi_int32_array
        -:  856:        : std::is_same<T, uint32_t>::value ? napi_uint32_array
        -:  857:        : std::is_same<T, float>::value ? napi_float32_array
        -:  858:        : std::is_same<T, double>::value ? napi_float64_array
        -:  859:// Currently experimental guard with the definition of NAPI_EXPERIMENTAL.
        -:  860:// Once it is no longer experimental guard with the NAPI_VERSION in which it is
        -:  861:// released instead.
        -:  862:#ifdef NAPI_EXPERIMENTAL
        -:  863:        : std::is_same<T, int64_t>::value ? napi_bigint64_array
        -:  864:        : std::is_same<T, uint64_t>::value ? napi_biguint64_array
        -:  865:#endif  // NAPI_EXPERIMENTAL
        -:  866:        : unknown_array_type;
        -:  867:    }
        -:  868:    /// !endcond
        -:  869:  };
        -:  870:
        -:  871:  /// A JavaScript typed-array value with known array type.
        -:  872:  ///
        -:  873:  /// Note while it is possible to create and access Uint8 "clamped" arrays using this class,
        -:  874:  /// the _clamping_ behavior is only applied in JavaScript.
        -:  875:  template <typename T>
        -:  876:  class TypedArrayOf : public TypedArray {
        -:  877:  public:
        -:  878:    /// Creates a new TypedArray instance over a new automatically-allocated array buffer.
        -:  879:    ///
        -:  880:    /// The array type parameter can normally be omitted (because it is inferred from the template
        -:  881:    /// parameter T), except when creating a "clamped" array:
        -:  882:    ///
        -:  883:    ///     Uint8Array::New(env, length, napi_uint8_clamped_array)
        -:  884:    static TypedArrayOf New(
        -:  885:      napi_env env,         ///< N-API environment
        -:  886:      size_t elementLength, ///< Length of the created array, as a number of elements
        -:  887:#if defined(NAPI_HAS_CONSTEXPR)
        -:  888:      napi_typedarray_type type = TypedArray::TypedArrayTypeForPrimitiveType<T>()
        -:  889:#else
        -:  890:      napi_typedarray_type type
        -:  891:#endif
        -:  892:        ///< Type of array, if different from the default array type for the template parameter T.
        -:  893:    );
        -:  894:
        -:  895:    /// Creates a new TypedArray instance over a provided array buffer.
        -:  896:    ///
        -:  897:    /// The array type parameter can normally be omitted (because it is inferred from the template
        -:  898:    /// parameter T), except when creating a "clamped" array:
        -:  899:    ///
        -:  900:    ///     Uint8Array::New(env, length, buffer, 0, napi_uint8_clamped_array)
        -:  901:    static TypedArrayOf New(
        -:  902:      napi_env env,                  ///< N-API environment
        -:  903:      size_t elementLength,          ///< Length of the created array, as a number of elements
        -:  904:      Napi::ArrayBuffer arrayBuffer, ///< Backing array buffer instance to use
        -:  905:      size_t bufferOffset,           ///< Offset into the array buffer where the typed-array starts
        -:  906:#if defined(NAPI_HAS_CONSTEXPR)
        -:  907:      napi_typedarray_type type = TypedArray::TypedArrayTypeForPrimitiveType<T>()
        -:  908:#else
        -:  909:      napi_typedarray_type type
        -:  910:#endif
        -:  911:        ///< Type of array, if different from the default array type for the template parameter T.
        -:  912:    );
        -:  913:
        -:  914:    TypedArrayOf();                               ///< Creates a new _empty_ TypedArrayOf instance.
        -:  915:    TypedArrayOf(napi_env env, napi_value value); ///< Wraps a N-API value primitive.
        -:  916:
        -:  917:    T& operator [](size_t index);             ///< Gets or sets an element in the array.
        -:  918:    const T& operator [](size_t index) const; ///< Gets an element in the array.
        -:  919:
        -:  920:    /// Gets a pointer to the array's backing buffer.
        -:  921:    ///
        -:  922:    /// This is not necessarily the same as the `ArrayBuffer::Data()` pointer, because the
        -:  923:    /// typed-array may have a non-zero `ByteOffset()` into the `ArrayBuffer`.
        -:  924:    T* Data();
        -:  925:
        -:  926:    /// Gets a pointer to the array's backing buffer.
        -:  927:    ///
        -:  928:    /// This is not necessarily the same as the `ArrayBuffer::Data()` pointer, because the
        -:  929:    /// typed-array may have a non-zero `ByteOffset()` into the `ArrayBuffer`.
        -:  930:    const T* Data() const;
        -:  931:
        -:  932:  private:
        -:  933:    T* _data;
        -:  934:
        -:  935:    TypedArrayOf(napi_env env,
        -:  936:                 napi_value value,
        -:  937:                 napi_typedarray_type type,
        -:  938:                 size_t length,
        -:  939:                 T* data);
        -:  940:  };
        -:  941:
        -:  942:  /// The DataView provides a low-level interface for reading/writing multiple
        -:  943:  /// number types in an ArrayBuffer irrespective of the platform's endianness.
        -:  944:  class DataView : public Object {
        -:  945:  public:
        -:  946:    static DataView New(napi_env env,
        -:  947:                        Napi::ArrayBuffer arrayBuffer);
        -:  948:    static DataView New(napi_env env,
        -:  949:                        Napi::ArrayBuffer arrayBuffer,
        -:  950:                        size_t byteOffset);
        -:  951:    static DataView New(napi_env env,
        -:  952:                        Napi::ArrayBuffer arrayBuffer,
        -:  953:                        size_t byteOffset,
        -:  954:                        size_t byteLength);
        -:  955:
        -:  956:    DataView();                               ///< Creates a new _empty_ DataView instance.
        -:  957:    DataView(napi_env env, napi_value value); ///< Wraps a N-API value primitive.
        -:  958:
        -:  959:    Napi::ArrayBuffer ArrayBuffer() const;    ///< Gets the backing array buffer.
        -:  960:    size_t ByteOffset() const;    ///< Gets the offset into the buffer where the array starts.
        -:  961:    size_t ByteLength() const;    ///< Gets the length of the array in bytes.
        -:  962:
        -:  963:    void* Data() const;
        -:  964:
        -:  965:    float GetFloat32(size_t byteOffset) const;
        -:  966:    double GetFloat64(size_t byteOffset) const;
        -:  967:    int8_t GetInt8(size_t byteOffset) const;
        -:  968:    int16_t GetInt16(size_t byteOffset) const;
        -:  969:    int32_t GetInt32(size_t byteOffset) const;
        -:  970:    uint8_t GetUint8(size_t byteOffset) const;
        -:  971:    uint16_t GetUint16(size_t byteOffset) const;
        -:  972:    uint32_t GetUint32(size_t byteOffset) const;
        -:  973:
        -:  974:    void SetFloat32(size_t byteOffset, float value) const;
        -:  975:    void SetFloat64(size_t byteOffset, double value) const;
        -:  976:    void SetInt8(size_t byteOffset, int8_t value) const;
        -:  977:    void SetInt16(size_t byteOffset, int16_t value) const;
        -:  978:    void SetInt32(size_t byteOffset, int32_t value) const;
        -:  979:    void SetUint8(size_t byteOffset, uint8_t value) const;
        -:  980:    void SetUint16(size_t byteOffset, uint16_t value) const;
        -:  981:    void SetUint32(size_t byteOffset, uint32_t value) const;
        -:  982:
        -:  983:  private:
        -:  984:    template <typename T>
        -:  985:    T ReadData(size_t byteOffset) const;
        -:  986:
        -:  987:    template <typename T>
        -:  988:    void WriteData(size_t byteOffset, T value) const;
        -:  989:
        -:  990:    void* _data;
        -:  991:    size_t _length;
        -:  992:  };
        -:  993:
        -:  994:  class Function : public Object {
        -:  995:  public:
        -:  996:    /// Callable must implement operator() accepting a const CallbackInfo&
        -:  997:    /// and return either void or Value.
        -:  998:    template <typename Callable>
        -:  999:    static Function New(napi_env env,
        -: 1000:                        Callable cb,
        -: 1001:                        const char* utf8name = nullptr,
        -: 1002:                        void* data = nullptr);
        -: 1003:    /// Callable must implement operator() accepting a const CallbackInfo&
        -: 1004:    /// and return either void or Value.
        -: 1005:    template <typename Callable>
        -: 1006:    static Function New(napi_env env,
        -: 1007:                        Callable cb,
        -: 1008:                        const std::string& utf8name,
        -: 1009:                        void* data = nullptr);
        -: 1010:
        -: 1011:    Function();
        -: 1012:    Function(napi_env env, napi_value value);
        -: 1013:
        -: 1014:    Value operator ()(const std::initializer_list<napi_value>& args) const;
        -: 1015:
        -: 1016:    Value Call(const std::initializer_list<napi_value>& args) const;
        -: 1017:    Value Call(const std::vector<napi_value>& args) const;
        -: 1018:    Value Call(size_t argc, const napi_value* args) const;
        -: 1019:    Value Call(napi_value recv, const std::initializer_list<napi_value>& args) const;
        -: 1020:    Value Call(napi_value recv, const std::vector<napi_value>& args) const;
        -: 1021:    Value Call(napi_value recv, size_t argc, const napi_value* args) const;
        -: 1022:
        -: 1023:    Value MakeCallback(napi_value recv,
        -: 1024:                       const std::initializer_list<napi_value>& args,
        -: 1025:                       napi_async_context context = nullptr) const;
        -: 1026:    Value MakeCallback(napi_value recv,
        -: 1027:                       const std::vector<napi_value>& args,
        -: 1028:                       napi_async_context context = nullptr) const;
        -: 1029:    Value MakeCallback(napi_value recv,
        -: 1030:                       size_t argc,
        -: 1031:                       const napi_value* args,
        -: 1032:                       napi_async_context context = nullptr) const;
        -: 1033:
        -: 1034:    Object New(const std::initializer_list<napi_value>& args) const;
        -: 1035:    Object New(const std::vector<napi_value>& args) const;
        -: 1036:    Object New(size_t argc, const napi_value* args) const;
        -: 1037:  };
        -: 1038:
        -: 1039:  class Promise : public Object {
        -: 1040:  public:
        -: 1041:    class Deferred {
        -: 1042:    public:
        -: 1043:      static Deferred New(napi_env env);
        -: 1044:      Deferred(napi_env env);
        -: 1045:
        -: 1046:      Napi::Promise Promise() const;
        -: 1047:      Napi::Env Env() const;
        -: 1048:
        -: 1049:      void Resolve(napi_value value) const;
        -: 1050:      void Reject(napi_value value) const;
        -: 1051:
        -: 1052:    private:
        -: 1053:      napi_env _env;
        -: 1054:      napi_deferred _deferred;
        -: 1055:      napi_value _promise;
        -: 1056:    };
        -: 1057:
        -: 1058:    Promise(napi_env env, napi_value value);
        -: 1059:  };
        -: 1060:
        -: 1061:  template <typename T>
        -: 1062:  class Buffer : public Uint8Array {
        -: 1063:  public:
        -: 1064:    static Buffer<T> New(napi_env env, size_t length);
        -: 1065:    static Buffer<T> New(napi_env env, T* data, size_t length);
        -: 1066:
        -: 1067:    // Finalizer must implement `void operator()(Env env, T* data)`.
        -: 1068:    template <typename Finalizer>
        -: 1069:    static Buffer<T> New(napi_env env, T* data,
        -: 1070:                         size_t length,
        -: 1071:                         Finalizer finalizeCallback);
        -: 1072:    // Finalizer must implement `void operator()(Env env, T* data, Hint* hint)`.
        -: 1073:    template <typename Finalizer, typename Hint>
        -: 1074:    static Buffer<T> New(napi_env env, T* data,
        -: 1075:                         size_t length,
        -: 1076:                         Finalizer finalizeCallback,
        -: 1077:                         Hint* finalizeHint);
        -: 1078:
        -: 1079:    static Buffer<T> Copy(napi_env env, const T* data, size_t length);
        -: 1080:
        -: 1081:    Buffer();
        -: 1082:    Buffer(napi_env env, napi_value value);
        -: 1083:    size_t Length() const;
        -: 1084:    T* Data() const;
        -: 1085:
        -: 1086:  private:
        -: 1087:    mutable size_t _length;
        -: 1088:    mutable T* _data;
        -: 1089:
        -: 1090:    Buffer(napi_env env, napi_value value, size_t length, T* data);
        -: 1091:    void EnsureInfo() const;
        -: 1092:  };
        -: 1093:
        -: 1094:  /// Holds a counted reference to a value; initially a weak reference unless otherwise specified,
        -: 1095:  /// may be changed to/from a strong reference by adjusting the refcount.
        -: 1096:  ///
        -: 1097:  /// The referenced value is not immediately destroyed when the reference count is zero; it is
        -: 1098:  /// merely then eligible for garbage-collection if there are no other references to the value.
        -: 1099:  template <typename T>
        -: 1100:  class Reference {
        -: 1101:  public:
        -: 1102:    static Reference<T> New(const T& value, uint32_t initialRefcount = 0);
        -: 1103:
        -: 1104:    Reference();
        -: 1105:    Reference(napi_env env, napi_ref ref);
        -: 1106:    ~Reference();
        -: 1107:
        -: 1108:    // A reference can be moved but cannot be copied.
        -: 1109:    Reference(Reference<T>&& other);
        -: 1110:    Reference<T>& operator =(Reference<T>&& other);
        -: 1111:    Reference<T>& operator =(Reference<T>&) = delete;
        -: 1112:
        -: 1113:    operator napi_ref() const;
        -: 1114:    bool operator ==(const Reference<T> &other) const;
        -: 1115:    bool operator !=(const Reference<T> &other) const;
        -: 1116:
        -: 1117:    Napi::Env Env() const;
        -: 1118:    bool IsEmpty() const;
        -: 1119:
        -: 1120:    // Note when getting the value of a Reference it is usually correct to do so
        -: 1121:    // within a HandleScope so that the value handle gets cleaned up efficiently.
        -: 1122:    T Value() const;
        -: 1123:
        -: 1124:    uint32_t Ref();
        -: 1125:    uint32_t Unref();
        -: 1126:    void Reset();
        -: 1127:    void Reset(const T& value, uint32_t refcount = 0);
        -: 1128:
        -: 1129:    // Call this on a reference that is declared as static data, to prevent its destructor
        -: 1130:    // from running at program shutdown time, which would attempt to reset the reference when
        -: 1131:    // the environment is no longer valid.
        -: 1132:    void SuppressDestruct();
        -: 1133:
        -: 1134:  protected:
        -: 1135:    Reference(const Reference<T>&);
        -: 1136:
        -: 1137:    /// !cond INTERNAL
        -: 1138:    napi_env _env;
        -: 1139:    napi_ref _ref;
        -: 1140:    /// !endcond
        -: 1141:
        -: 1142:  private:
        -: 1143:    bool _suppressDestruct;
        -: 1144:  };
        -: 1145:
function _ZN4Napi15ObjectReferenceD2Ev called 0 returned 0% blocks executed 0%
    #####: 1146:  class ObjectReference: public Reference<Object> {
        -: 1147:  public:
        -: 1148:    ObjectReference();
        -: 1149:    ObjectReference(napi_env env, napi_ref ref);
        -: 1150:
        -: 1151:    // A reference can be moved but cannot be copied.
        -: 1152:    ObjectReference(Reference<Object>&& other);
        -: 1153:    ObjectReference& operator =(Reference<Object>&& other);
        -: 1154:    ObjectReference(ObjectReference&& other);
        -: 1155:    ObjectReference& operator =(ObjectReference&& other);
        -: 1156:    ObjectReference& operator =(ObjectReference&) = delete;
        -: 1157:
        -: 1158:    Napi::Value Get(const char* utf8name) const;
        -: 1159:    Napi::Value Get(const std::string& utf8name) const;
        -: 1160:    void Set(const char* utf8name, napi_value value);
        -: 1161:    void Set(const char* utf8name, Napi::Value value);
        -: 1162:    void Set(const char* utf8name, const char* utf8value);
        -: 1163:    void Set(const char* utf8name, bool boolValue);
        -: 1164:    void Set(const char* utf8name, double numberValue);
        -: 1165:    void Set(const std::string& utf8name, napi_value value);
        -: 1166:    void Set(const std::string& utf8name, Napi::Value value);
        -: 1167:    void Set(const std::string& utf8name, std::string& utf8value);
        -: 1168:    void Set(const std::string& utf8name, bool boolValue);
        -: 1169:    void Set(const std::string& utf8name, double numberValue);
        -: 1170:
        -: 1171:    Napi::Value Get(uint32_t index) const;
        -: 1172:    void Set(uint32_t index, const napi_value value);
        -: 1173:    void Set(uint32_t index, const Napi::Value value);
        -: 1174:    void Set(uint32_t index, const char* utf8value);
        -: 1175:    void Set(uint32_t index, const std::string& utf8value);
        -: 1176:    void Set(uint32_t index, bool boolValue);
        -: 1177:    void Set(uint32_t index, double numberValue);
        -: 1178:
        -: 1179:  protected:
        -: 1180:    ObjectReference(const ObjectReference&);
        -: 1181:  };
        -: 1182:
function _ZN4Napi17FunctionReferenceD2Ev called 0 returned 0% blocks executed 0%
    #####: 1183:  class FunctionReference: public Reference<Function> {
        -: 1184:  public:
        -: 1185:    FunctionReference();
        -: 1186:    FunctionReference(napi_env env, napi_ref ref);
        -: 1187:
        -: 1188:    // A reference can be moved but cannot be copied.
        -: 1189:    FunctionReference(Reference<Function>&& other);
        -: 1190:    FunctionReference& operator =(Reference<Function>&& other);
        -: 1191:    FunctionReference(FunctionReference&& other);
        -: 1192:    FunctionReference& operator =(FunctionReference&& other);
        -: 1193:    FunctionReference(const FunctionReference&) = delete;
        -: 1194:    FunctionReference& operator =(FunctionReference&) = delete;
        -: 1195:
        -: 1196:    Napi::Value operator ()(const std::initializer_list<napi_value>& args) const;
        -: 1197:
        -: 1198:    Napi::Value Call(const std::initializer_list<napi_value>& args) const;
        -: 1199:    Napi::Value Call(const std::vector<napi_value>& args) const;
        -: 1200:    Napi::Value Call(napi_value recv, const std::initializer_list<napi_value>& args) const;
        -: 1201:    Napi::Value Call(napi_value recv, const std::vector<napi_value>& args) const;
        -: 1202:    Napi::Value Call(napi_value recv, size_t argc, const napi_value* args) const;
        -: 1203:
        -: 1204:    Napi::Value MakeCallback(napi_value recv,
        -: 1205:                             const std::initializer_list<napi_value>& args,
        -: 1206:                             napi_async_context context = nullptr) const;
        -: 1207:    Napi::Value MakeCallback(napi_value recv,
        -: 1208:                             const std::vector<napi_value>& args,
        -: 1209:                             napi_async_context context = nullptr) const;
        -: 1210:    Napi::Value MakeCallback(napi_value recv,
        -: 1211:                             size_t argc,
        -: 1212:                             const napi_value* args,
        -: 1213:                             napi_async_context context = nullptr) const;
        -: 1214:
        -: 1215:    Object New(const std::initializer_list<napi_value>& args) const;
        -: 1216:    Object New(const std::vector<napi_value>& args) const;
        -: 1217:  };
        -: 1218:
        -: 1219:  // Shortcuts to creating a new reference with inferred type and refcount = 0.
        -: 1220:  template <typename T> Reference<T> Weak(T value);
        -: 1221:  ObjectReference Weak(Object value);
        -: 1222:  FunctionReference Weak(Function value);
        -: 1223:
        -: 1224:  // Shortcuts to creating a new reference with inferred type and refcount = 1.
        -: 1225:  template <typename T> Reference<T> Persistent(T value);
        -: 1226:  ObjectReference Persistent(Object value);
        -: 1227:  FunctionReference Persistent(Function value);
        -: 1228:
        -: 1229:  /// A persistent reference to a JavaScript error object. Use of this class depends somewhat
        -: 1230:  /// on whether C++ exceptions are enabled at compile time.
        -: 1231:  ///
        -: 1232:  /// ### Handling Errors With C++ Exceptions
        -: 1233:  ///
        -: 1234:  /// If C++ exceptions are enabled, then the `Error` class extends `std::exception` and enables
        -: 1235:  /// integrated error-handling for C++ exceptions and JavaScript exceptions.
        -: 1236:  ///
        -: 1237:  /// If a N-API call fails without executing any JavaScript code (for example due to an invalid
        -: 1238:  /// argument), then the N-API wrapper automatically converts and throws the error as a C++
        -: 1239:  /// exception of type `Napi::Error`. Or if a JavaScript function called by C++ code via N-API
        -: 1240:  /// throws a JavaScript exception, then the N-API wrapper automatically converts and throws it as
        -: 1241:  /// a C++ exception of type `Napi::Error`.
        -: 1242:  ///
        -: 1243:  /// If a C++ exception of type `Napi::Error` escapes from a N-API C++ callback, then the N-API
        -: 1244:  /// wrapper automatically converts and throws it as a JavaScript exception. Therefore, catching
        -: 1245:  /// a C++ exception of type `Napi::Error` prevents a JavaScript exception from being thrown.
        -: 1246:  ///
        -: 1247:  /// #### Example 1A - Throwing a C++ exception:
        -: 1248:  ///
        -: 1249:  ///     Napi::Env env = ...
        -: 1250:  ///     throw Napi::Error::New(env, "Example exception");
        -: 1251:  ///
        -: 1252:  /// Following C++ statements will not be executed. The exception will bubble up as a C++
        -: 1253:  /// exception of type `Napi::Error`, until it is either caught while still in C++, or else
        -: 1254:  /// automatically propataged as a JavaScript exception when the callback returns to JavaScript.
        -: 1255:  ///
        -: 1256:  /// #### Example 2A - Propagating a N-API C++ exception:
        -: 1257:  ///
        -: 1258:  ///     Napi::Function jsFunctionThatThrows = someObj.As<Napi::Function>();
        -: 1259:  ///     Napi::Value result = jsFunctionThatThrows({ arg1, arg2 });
        -: 1260:  ///
        -: 1261:  /// Following C++ statements will not be executed. The exception will bubble up as a C++
        -: 1262:  /// exception of type `Napi::Error`, until it is either caught while still in C++, or else
        -: 1263:  /// automatically propagated as a JavaScript exception when the callback returns to JavaScript.
        -: 1264:  ///
        -: 1265:  /// #### Example 3A - Handling a N-API C++ exception:
        -: 1266:  ///
        -: 1267:  ///     Napi::Function jsFunctionThatThrows = someObj.As<Napi::Function>();
        -: 1268:  ///     Napi::Value result;
        -: 1269:  ///     try {
        -: 1270:  ///        result = jsFunctionThatThrows({ arg1, arg2 });
        -: 1271:  ///     } catch (const Napi::Error& e) {
        -: 1272:  ///       cerr << "Caught JavaScript exception: " + e.what();
        -: 1273:  ///     }
        -: 1274:  ///
        -: 1275:  /// Since the exception was caught here, it will not be propagated as a JavaScript exception.
        -: 1276:  ///
        -: 1277:  /// ### Handling Errors Without C++ Exceptions
        -: 1278:  ///
        -: 1279:  /// If C++ exceptions are disabled (by defining `NAPI_DISABLE_CPP_EXCEPTIONS`) then this class
        -: 1280:  /// does not extend `std::exception`, and APIs in the `Napi` namespace do not throw C++
        -: 1281:  /// exceptions when they fail. Instead, they raise _pending_ JavaScript exceptions and
        -: 1282:  /// return _empty_ `Value`s. Calling code should check `Value::IsEmpty()` before attempting
        -: 1283:  /// to use a returned value, and may use methods on the `Env` class to check for, get, and
        -: 1284:  /// clear a pending JavaScript exception. If the pending exception is not cleared, it will
        -: 1285:  /// be thrown when the native callback returns to JavaScript.
        -: 1286:  ///
        -: 1287:  /// #### Example 1B - Throwing a JS exception
        -: 1288:  ///
        -: 1289:  ///     Napi::Env env = ...
        -: 1290:  ///     Napi::Error::New(env, "Example exception").ThrowAsJavaScriptException();
        -: 1291:  ///     return;
        -: 1292:  ///
        -: 1293:  /// After throwing a JS exception, the code should generally return immediately from the native
        -: 1294:  /// callback, after performing any necessary cleanup.
        -: 1295:  ///
        -: 1296:  /// #### Example 2B - Propagating a N-API JS exception:
        -: 1297:  ///
        -: 1298:  ///     Napi::Function jsFunctionThatThrows = someObj.As<Napi::Function>();
        -: 1299:  ///     Napi::Value result = jsFunctionThatThrows({ arg1, arg2 });
        -: 1300:  ///     if (result.IsEmpty()) return;
        -: 1301:  ///
        -: 1302:  /// An empty value result from a N-API call indicates an error occurred, and a JavaScript
        -: 1303:  /// exception is pending. To let the exception propagate, the code should generally return
        -: 1304:  /// immediately from the native callback, after performing any necessary cleanup.
        -: 1305:  ///
        -: 1306:  /// #### Example 3B - Handling a N-API JS exception:
        -: 1307:  ///
        -: 1308:  ///     Napi::Function jsFunctionThatThrows = someObj.As<Napi::Function>();
        -: 1309:  ///     Napi::Value result = jsFunctionThatThrows({ arg1, arg2 });
        -: 1310:  ///     if (result.IsEmpty()) {
        -: 1311:  ///       Napi::Error e = env.GetAndClearPendingException();
        -: 1312:  ///       cerr << "Caught JavaScript exception: " + e.Message();
        -: 1313:  ///     }
        -: 1314:  ///
        -: 1315:  /// Since the exception was cleared here, it will not be propagated as a JavaScript exception
        -: 1316:  /// after the native callback returns.
function _ZN4Napi5ErrorD2Ev called 0 returned 0% blocks executed 0%
function _ZN4Napi5ErrorD0Ev called 0 returned 0% blocks executed 0%
    #####: 1317:  class Error : public ObjectReference
        -: 1318:#ifdef NAPI_CPP_EXCEPTIONS
        -: 1319:    , public std::exception
        -: 1320:#endif // NAPI_CPP_EXCEPTIONS
        -: 1321:    {
        -: 1322:  public:
        -: 1323:    static Error New(napi_env env);
        -: 1324:    static Error New(napi_env env, const char* message);
        -: 1325:    static Error New(napi_env env, const std::string& message);
        -: 1326:
        -: 1327:    static NAPI_NO_RETURN void Fatal(const char* location, const char* message);
        -: 1328:
        -: 1329:    Error();
        -: 1330:    Error(napi_env env, napi_value value);
        -: 1331:
        -: 1332:    // An error can be moved or copied.
        -: 1333:    Error(Error&& other);
        -: 1334:    Error& operator =(Error&& other);
        -: 1335:    Error(const Error&);
        -: 1336:    Error& operator =(Error&);
        -: 1337:
        -: 1338:    const std::string& Message() const NAPI_NOEXCEPT;
        -: 1339:    void ThrowAsJavaScriptException() const;
        -: 1340:
        -: 1341:#ifdef NAPI_CPP_EXCEPTIONS
        -: 1342:    const char* what() const NAPI_NOEXCEPT override;
        -: 1343:#endif // NAPI_CPP_EXCEPTIONS
        -: 1344:
        -: 1345:  protected:
        -: 1346:    /// !cond INTERNAL
        -: 1347:    typedef napi_status (*create_error_fn)(napi_env envb, napi_value code, napi_value msg, napi_value* result);
        -: 1348:
        -: 1349:    template <typename TError>
        -: 1350:    static TError New(napi_env env,
        -: 1351:                      const char* message,
        -: 1352:                      size_t length,
        -: 1353:                      create_error_fn create_error);
        -: 1354:    /// !endcond
        -: 1355:
        -: 1356:  private:
        -: 1357:    mutable std::string _message;
        -: 1358:  };
        -: 1359:
function _ZN4Napi9TypeErrorD2Ev called 13 returned 100% blocks executed 100%
function _ZN4Napi9TypeErrorD0Ev called 0 returned 0% blocks executed 0%
       13: 1360:  class TypeError : public Error {
        -: 1361:  public:
        -: 1362:    static TypeError New(napi_env env, const char* message);
        -: 1363:    static TypeError New(napi_env env, const std::string& message);
        -: 1364:
        -: 1365:    TypeError();
        -: 1366:    TypeError(napi_env env, napi_value value);
        -: 1367:  };
        -: 1368:
        -: 1369:  class RangeError : public Error {
        -: 1370:  public:
        -: 1371:    static RangeError New(napi_env env, const char* message);
        -: 1372:    static RangeError New(napi_env env, const std::string& message);
        -: 1373:
        -: 1374:    RangeError();
        -: 1375:    RangeError(napi_env env, napi_value value);
        -: 1376:  };
        -: 1377:
        -: 1378:  class CallbackInfo {
        -: 1379:  public:
        -: 1380:    CallbackInfo(napi_env env, napi_callback_info info);
        -: 1381:    ~CallbackInfo();
        -: 1382:
        -: 1383:    // Disallow copying to prevent multiple free of _dynamicArgs
        -: 1384:    CallbackInfo(CallbackInfo const &) = delete;
        -: 1385:    void operator=(CallbackInfo const &) = delete;
        -: 1386:
        -: 1387:    Napi::Env Env() const;
        -: 1388:    Value NewTarget() const;
        -: 1389:    bool IsConstructCall() const;
        -: 1390:    size_t Length() const;
        -: 1391:    const Value operator [](size_t index) const;
        -: 1392:    Value This() const;
        -: 1393:    void* Data() const;
        -: 1394:    void SetData(void* data);
        -: 1395:
        -: 1396:  private:
        -: 1397:    const size_t _staticArgCount = 6;
        -: 1398:    napi_env _env;
        -: 1399:    napi_callback_info _info;
        -: 1400:    napi_value _this;
        -: 1401:    size_t _argc;
        -: 1402:    napi_value* _argv;
        -: 1403:    napi_value _staticArgs[6];
        -: 1404:    napi_value* _dynamicArgs;
        -: 1405:    void* _data;
        -: 1406:  };
        -: 1407:
        -: 1408:  class PropertyDescriptor {
        -: 1409:  public:
        -: 1410:#ifndef NODE_ADDON_API_DISABLE_DEPRECATED
        -: 1411:    template <typename Getter>
        -: 1412:    static PropertyDescriptor Accessor(const char* utf8name,
        -: 1413:                                       Getter getter,
        -: 1414:                                       napi_property_attributes attributes = napi_default,
        -: 1415:                                       void* data = nullptr);
        -: 1416:    template <typename Getter>
        -: 1417:    static PropertyDescriptor Accessor(const std::string& utf8name,
        -: 1418:                                       Getter getter,
        -: 1419:                                       napi_property_attributes attributes = napi_default,
        -: 1420:                                       void* data = nullptr);
        -: 1421:    template <typename Getter>
        -: 1422:    static PropertyDescriptor Accessor(napi_value name,
        -: 1423:                                       Getter getter,
        -: 1424:                                       napi_property_attributes attributes = napi_default,
        -: 1425:                                       void* data = nullptr);
        -: 1426:    template <typename Getter>
        -: 1427:    static PropertyDescriptor Accessor(Name name,
        -: 1428:                                       Getter getter,
        -: 1429:                                       napi_property_attributes attributes = napi_default,
        -: 1430:                                       void* data = nullptr);
        -: 1431:    template <typename Getter, typename Setter>
        -: 1432:    static PropertyDescriptor Accessor(const char* utf8name,
        -: 1433:                                       Getter getter,
        -: 1434:                                       Setter setter,
        -: 1435:                                       napi_property_attributes attributes = napi_default,
        -: 1436:                                       void* data = nullptr);
        -: 1437:    template <typename Getter, typename Setter>
        -: 1438:    static PropertyDescriptor Accessor(const std::string& utf8name,
        -: 1439:                                       Getter getter,
        -: 1440:                                       Setter setter,
        -: 1441:                                       napi_property_attributes attributes = napi_default,
        -: 1442:                                       void* data = nullptr);
        -: 1443:    template <typename Getter, typename Setter>
        -: 1444:    static PropertyDescriptor Accessor(napi_value name,
        -: 1445:                                       Getter getter,
        -: 1446:                                       Setter setter,
        -: 1447:                                       napi_property_attributes attributes = napi_default,
        -: 1448:                                       void* data = nullptr);
        -: 1449:    template <typename Getter, typename Setter>
        -: 1450:    static PropertyDescriptor Accessor(Name name,
        -: 1451:                                       Getter getter,
        -: 1452:                                       Setter setter,
        -: 1453:                                       napi_property_attributes attributes = napi_default,
        -: 1454:                                       void* data = nullptr);
        -: 1455:    template <typename Callable>
        -: 1456:    static PropertyDescriptor Function(const char* utf8name,
        -: 1457:                                       Callable cb,
        -: 1458:                                       napi_property_attributes attributes = napi_default,
        -: 1459:                                       void* data = nullptr);
        -: 1460:    template <typename Callable>
        -: 1461:    static PropertyDescriptor Function(const std::string& utf8name,
        -: 1462:                                       Callable cb,
        -: 1463:                                       napi_property_attributes attributes = napi_default,
        -: 1464:                                       void* data = nullptr);
        -: 1465:    template <typename Callable>
        -: 1466:    static PropertyDescriptor Function(napi_value name,
        -: 1467:                                       Callable cb,
        -: 1468:                                       napi_property_attributes attributes = napi_default,
        -: 1469:                                       void* data = nullptr);
        -: 1470:    template <typename Callable>
        -: 1471:    static PropertyDescriptor Function(Name name,
        -: 1472:                                       Callable cb,
        -: 1473:                                       napi_property_attributes attributes = napi_default,
        -: 1474:                                       void* data = nullptr);
        -: 1475:#endif // !NODE_ADDON_API_DISABLE_DEPRECATED
        -: 1476:
        -: 1477:    template <typename Getter>
        -: 1478:    static PropertyDescriptor Accessor(Napi::Env env,
        -: 1479:                                       Napi::Object object,
        -: 1480:                                       const char* utf8name,
        -: 1481:                                       Getter getter,
        -: 1482:                                       napi_property_attributes attributes = napi_default,
        -: 1483:                                       void* data = nullptr);
        -: 1484:    template <typename Getter>
        -: 1485:    static PropertyDescriptor Accessor(Napi::Env env,
        -: 1486:                                       Napi::Object object,
        -: 1487:                                       const std::string& utf8name,
        -: 1488:                                       Getter getter,
        -: 1489:                                       napi_property_attributes attributes = napi_default,
        -: 1490:                                       void* data = nullptr);
        -: 1491:    template <typename Getter>
        -: 1492:    static PropertyDescriptor Accessor(Napi::Env env,
        -: 1493:                                       Napi::Object object,
        -: 1494:                                       Name name,
        -: 1495:                                       Getter getter,
        -: 1496:                                       napi_property_attributes attributes = napi_default,
        -: 1497:                                       void* data = nullptr);
        -: 1498:    template <typename Getter, typename Setter>
        -: 1499:    static PropertyDescriptor Accessor(Napi::Env env,
        -: 1500:                                       Napi::Object object,
        -: 1501:                                       const char* utf8name,
        -: 1502:                                       Getter getter,
        -: 1503:                                       Setter setter,
        -: 1504:                                       napi_property_attributes attributes = napi_default,
        -: 1505:                                       void* data = nullptr);
        -: 1506:    template <typename Getter, typename Setter>
        -: 1507:    static PropertyDescriptor Accessor(Napi::Env env,
        -: 1508:                                       Napi::Object object,
        -: 1509:                                       const std::string& utf8name,
        -: 1510:                                       Getter getter,
        -: 1511:                                       Setter setter,
        -: 1512:                                       napi_property_attributes attributes = napi_default,
        -: 1513:                                       void* data = nullptr);
        -: 1514:    template <typename Getter, typename Setter>
        -: 1515:    static PropertyDescriptor Accessor(Napi::Env env,
        -: 1516:                                       Napi::Object object,
        -: 1517:                                       Name name,
        -: 1518:                                       Getter getter,
        -: 1519:                                       Setter setter,
        -: 1520:                                       napi_property_attributes attributes = napi_default,
        -: 1521:                                       void* data = nullptr);
        -: 1522:    template <typename Callable>
        -: 1523:    static PropertyDescriptor Function(Napi::Env env,
        -: 1524:                                       Napi::Object object,
        -: 1525:                                       const char* utf8name,
        -: 1526:                                       Callable cb,
        -: 1527:                                       napi_property_attributes attributes = napi_default,
        -: 1528:                                       void* data = nullptr);
        -: 1529:    template <typename Callable>
        -: 1530:    static PropertyDescriptor Function(Napi::Env env,
        -: 1531:                                       Napi::Object object,
        -: 1532:                                       const std::string& utf8name,
        -: 1533:                                       Callable cb,
        -: 1534:                                       napi_property_attributes attributes = napi_default,
        -: 1535:                                       void* data = nullptr);
        -: 1536:    template <typename Callable>
        -: 1537:    static PropertyDescriptor Function(Napi::Env env,
        -: 1538:                                       Napi::Object object,
        -: 1539:                                       Name name,
        -: 1540:                                       Callable cb,
        -: 1541:                                       napi_property_attributes attributes = napi_default,
        -: 1542:                                       void* data = nullptr);
        -: 1543:    static PropertyDescriptor Value(const char* utf8name,
        -: 1544:                                    napi_value value,
        -: 1545:                                    napi_property_attributes attributes = napi_default);
        -: 1546:    static PropertyDescriptor Value(const std::string& utf8name,
        -: 1547:                                    napi_value value,
        -: 1548:                                    napi_property_attributes attributes = napi_default);
        -: 1549:    static PropertyDescriptor Value(napi_value name,
        -: 1550:                                    napi_value value,
        -: 1551:                                    napi_property_attributes attributes = napi_default);
        -: 1552:    static PropertyDescriptor Value(Name name,
        -: 1553:                                    Napi::Value value,
        -: 1554:                                    napi_property_attributes attributes = napi_default);
        -: 1555:
        -: 1556:    PropertyDescriptor(napi_property_descriptor desc);
        -: 1557:
        -: 1558:    operator napi_property_descriptor&();
        -: 1559:    operator const napi_property_descriptor&() const;
        -: 1560:
        -: 1561:  private:
        -: 1562:    napi_property_descriptor _desc;
        -: 1563:  };
        -: 1564:
        -: 1565:  /// Property descriptor for use with `ObjectWrap::DefineClass()`.
        -: 1566:  ///
        -: 1567:  /// This is different from the standalone `PropertyDescriptor` because it is specific to each
        -: 1568:  /// `ObjectWrap<T>` subclass. This prevents using descriptors from a different class when
        -: 1569:  /// defining a new class (preventing the callbacks from having incorrect `this` pointers).
        -: 1570:  template <typename T>
        -: 1571:  class ClassPropertyDescriptor {
        -: 1572:  public:
        -: 1573:    ClassPropertyDescriptor(napi_property_descriptor desc) : _desc(desc) {}
        -: 1574:
        -: 1575:    operator napi_property_descriptor&() { return _desc; }
        -: 1576:    operator const napi_property_descriptor&() const { return _desc; }
        -: 1577:
        -: 1578:  private:
        -: 1579:    napi_property_descriptor _desc;
        -: 1580:  };
        -: 1581:
        -: 1582:  /// Base class to be extended by C++ classes exposed to JavaScript; each C++ class instance gets
        -: 1583:  /// "wrapped" by a JavaScript object that is managed by this class.
        -: 1584:  ///
        -: 1585:  /// At initialization time, the `DefineClass()` method must be used to
        -: 1586:  /// hook up the accessor and method callbacks. It takes a list of
        -: 1587:  /// property descriptors, which can be constructed via the various
        -: 1588:  /// static methods on the base class.
        -: 1589:  ///
        -: 1590:  /// #### Example:
        -: 1591:  ///
        -: 1592:  ///     class Example: public Napi::ObjectWrap<Example> {
        -: 1593:  ///       public:
        -: 1594:  ///         static void Initialize(Napi::Env& env, Napi::Object& target) {
        -: 1595:  ///           Napi::Function constructor = DefineClass(env, "Example", {
        -: 1596:  ///             InstanceAccessor("value", &Example::GetSomething, &Example::SetSomething),
        -: 1597:  ///             InstanceMethod("doSomething", &Example::DoSomething),
        -: 1598:  ///           });
        -: 1599:  ///           target.Set("Example", constructor);
        -: 1600:  ///         }
        -: 1601:  ///
        -: 1602:  ///         Example(const Napi::CallbackInfo& info); // Constructor
        -: 1603:  ///         Napi::Value GetSomething(const Napi::CallbackInfo& info);
        -: 1604:  ///         void SetSomething(const Napi::CallbackInfo& info, const Napi::Value& value);
        -: 1605:  ///         Napi::Value DoSomething(const Napi::CallbackInfo& info);
        -: 1606:  ///     }
        -: 1607:  template <typename T>
        -: 1608:  class ObjectWrap : public Reference<Object> {
        -: 1609:  public:
        -: 1610:    ObjectWrap(const CallbackInfo& callbackInfo);
        -: 1611:    virtual ~ObjectWrap();
        -: 1612:
        -: 1613:    static T* Unwrap(Object wrapper);
        -: 1614:
        -: 1615:    // Methods exposed to JavaScript must conform to one of these callback signatures.
        -: 1616:    typedef void (*StaticVoidMethodCallback)(const CallbackInfo& info);
        -: 1617:    typedef Napi::Value (*StaticMethodCallback)(const CallbackInfo& info);
        -: 1618:    typedef Napi::Value (*StaticGetterCallback)(const CallbackInfo& info);
        -: 1619:    typedef void (*StaticSetterCallback)(const CallbackInfo& info, const Napi::Value& value);
        -: 1620:    typedef void (T::*InstanceVoidMethodCallback)(const CallbackInfo& info);
        -: 1621:    typedef Napi::Value (T::*InstanceMethodCallback)(const CallbackInfo& info);
        -: 1622:    typedef Napi::Value (T::*InstanceGetterCallback)(const CallbackInfo& info);
        -: 1623:    typedef void (T::*InstanceSetterCallback)(const CallbackInfo& info, const Napi::Value& value);
        -: 1624:
        -: 1625:    typedef ClassPropertyDescriptor<T> PropertyDescriptor;
        -: 1626:
        -: 1627:    static Function DefineClass(Napi::Env env,
        -: 1628:                                const char* utf8name,
        -: 1629:                                const std::initializer_list<PropertyDescriptor>& properties,
        -: 1630:                                void* data = nullptr);
        -: 1631:    static Function DefineClass(Napi::Env env,
        -: 1632:                                const char* utf8name,
        -: 1633:                                const std::vector<PropertyDescriptor>& properties,
        -: 1634:                                void* data = nullptr);
        -: 1635:    static PropertyDescriptor StaticMethod(const char* utf8name,
        -: 1636:                                           StaticVoidMethodCallback method,
        -: 1637:                                           napi_property_attributes attributes = napi_default,
        -: 1638:                                           void* data = nullptr);
        -: 1639:    static PropertyDescriptor StaticMethod(const char* utf8name,
        -: 1640:                                           StaticMethodCallback method,
        -: 1641:                                           napi_property_attributes attributes = napi_default,
        -: 1642:                                           void* data = nullptr);
        -: 1643:    static PropertyDescriptor StaticMethod(Symbol name,
        -: 1644:                                           StaticVoidMethodCallback method,
        -: 1645:                                           napi_property_attributes attributes = napi_default,
        -: 1646:                                           void* data = nullptr);
        -: 1647:    static PropertyDescriptor StaticMethod(Symbol name,
        -: 1648:                                           StaticMethodCallback method,
        -: 1649:                                           napi_property_attributes attributes = napi_default,
        -: 1650:                                           void* data = nullptr);
        -: 1651:    static PropertyDescriptor StaticAccessor(const char* utf8name,
        -: 1652:                                             StaticGetterCallback getter,
        -: 1653:                                             StaticSetterCallback setter,
        -: 1654:                                             napi_property_attributes attributes = napi_default,
        -: 1655:                                             void* data = nullptr);
        -: 1656:    static PropertyDescriptor StaticAccessor(Symbol name,
        -: 1657:                                             StaticGetterCallback getter,
        -: 1658:                                             StaticSetterCallback setter,
        -: 1659:                                             napi_property_attributes attributes = napi_default,
        -: 1660:                                             void* data = nullptr);
        -: 1661:    static PropertyDescriptor InstanceMethod(const char* utf8name,
        -: 1662:                                             InstanceVoidMethodCallback method,
        -: 1663:                                             napi_property_attributes attributes = napi_default,
        -: 1664:                                             void* data = nullptr);
        -: 1665:    static PropertyDescriptor InstanceMethod(const char* utf8name,
        -: 1666:                                             InstanceMethodCallback method,
        -: 1667:                                             napi_property_attributes attributes = napi_default,
        -: 1668:                                             void* data = nullptr);
        -: 1669:    static PropertyDescriptor InstanceMethod(Symbol name,
        -: 1670:                                             InstanceVoidMethodCallback method,
        -: 1671:                                             napi_property_attributes attributes = napi_default,
        -: 1672:                                             void* data = nullptr);
        -: 1673:    static PropertyDescriptor InstanceMethod(Symbol name,
        -: 1674:                                             InstanceMethodCallback method,
        -: 1675:                                             napi_property_attributes attributes = napi_default,
        -: 1676:                                             void* data = nullptr);
        -: 1677:    static PropertyDescriptor InstanceAccessor(const char* utf8name,
        -: 1678:                                               InstanceGetterCallback getter,
        -: 1679:                                               InstanceSetterCallback setter,
        -: 1680:                                               napi_property_attributes attributes = napi_default,
        -: 1681:                                               void* data = nullptr);
        -: 1682:    static PropertyDescriptor InstanceAccessor(Symbol name,
        -: 1683:                                               InstanceGetterCallback getter,
        -: 1684:                                               InstanceSetterCallback setter,
        -: 1685:                                               napi_property_attributes attributes = napi_default,
        -: 1686:                                               void* data = nullptr);
        -: 1687:    static PropertyDescriptor StaticValue(const char* utf8name,
        -: 1688:                                          Napi::Value value,
        -: 1689:                                          napi_property_attributes attributes = napi_default);
        -: 1690:    static PropertyDescriptor StaticValue(Symbol name,
        -: 1691:                                          Napi::Value value,
        -: 1692:                                          napi_property_attributes attributes = napi_default);
        -: 1693:    static PropertyDescriptor InstanceValue(const char* utf8name,
        -: 1694:                                            Napi::Value value,
        -: 1695:                                            napi_property_attributes attributes = napi_default);
        -: 1696:    static PropertyDescriptor InstanceValue(Symbol name,
        -: 1697:                                            Napi::Value value,
        -: 1698:                                            napi_property_attributes attributes = napi_default);
        -: 1699:    virtual void Finalize(Napi::Env env);
        -: 1700:
        -: 1701:  private:
        -: 1702:    static napi_value ConstructorCallbackWrapper(napi_env env, napi_callback_info info);
        -: 1703:    static napi_value StaticVoidMethodCallbackWrapper(napi_env env, napi_callback_info info);
        -: 1704:    static napi_value StaticMethodCallbackWrapper(napi_env env, napi_callback_info info);
        -: 1705:    static napi_value StaticGetterCallbackWrapper(napi_env env, napi_callback_info info);
        -: 1706:    static napi_value StaticSetterCallbackWrapper(napi_env env, napi_callback_info info);
        -: 1707:    static napi_value InstanceVoidMethodCallbackWrapper(napi_env env, napi_callback_info info);
        -: 1708:    static napi_value InstanceMethodCallbackWrapper(napi_env env, napi_callback_info info);
        -: 1709:    static napi_value InstanceGetterCallbackWrapper(napi_env env, napi_callback_info info);
        -: 1710:    static napi_value InstanceSetterCallbackWrapper(napi_env env, napi_callback_info info);
        -: 1711:    static void FinalizeCallback(napi_env env, void* data, void* hint);
        -: 1712:    static Function DefineClass(Napi::Env env,
        -: 1713:                                const char* utf8name,
        -: 1714:                                const size_t props_count,
        -: 1715:                                const napi_property_descriptor* props,
        -: 1716:                                void* data = nullptr);
        -: 1717:
        -: 1718:    template <typename TCallback>
        -: 1719:    struct MethodCallbackData {
        -: 1720:      TCallback callback;
        -: 1721:      void* data;
        -: 1722:    };
        -: 1723:    typedef MethodCallbackData<StaticVoidMethodCallback> StaticVoidMethodCallbackData;
        -: 1724:    typedef MethodCallbackData<StaticMethodCallback> StaticMethodCallbackData;
        -: 1725:    typedef MethodCallbackData<InstanceVoidMethodCallback> InstanceVoidMethodCallbackData;
        -: 1726:    typedef MethodCallbackData<InstanceMethodCallback> InstanceMethodCallbackData;
        -: 1727:
        -: 1728:    template <typename TGetterCallback, typename TSetterCallback>
        -: 1729:    struct AccessorCallbackData {
        -: 1730:      TGetterCallback getterCallback;
        -: 1731:      TSetterCallback setterCallback;
        -: 1732:      void* data;
        -: 1733:    };
        -: 1734:    typedef AccessorCallbackData<StaticGetterCallback, StaticSetterCallback>
        -: 1735:      StaticAccessorCallbackData;
        -: 1736:    typedef AccessorCallbackData<InstanceGetterCallback, InstanceSetterCallback>
        -: 1737:      InstanceAccessorCallbackData;
        -: 1738:  };
        -: 1739:
        -: 1740:  class HandleScope {
        -: 1741:  public:
        -: 1742:    HandleScope(napi_env env, napi_handle_scope scope);
        -: 1743:    explicit HandleScope(Napi::Env env);
        -: 1744:    ~HandleScope();
        -: 1745:
        -: 1746:    // Disallow copying to prevent double close of napi_handle_scope
        -: 1747:    HandleScope(HandleScope const &) = delete;
        -: 1748:    void operator=(HandleScope const &) = delete;
        -: 1749:
        -: 1750:    operator napi_handle_scope() const;
        -: 1751:
        -: 1752:    Napi::Env Env() const;
        -: 1753:
        -: 1754:  private:
        -: 1755:    napi_env _env;
        -: 1756:    napi_handle_scope _scope;
        -: 1757:  };
        -: 1758:
        -: 1759:  class EscapableHandleScope {
        -: 1760:  public:
        -: 1761:    EscapableHandleScope(napi_env env, napi_escapable_handle_scope scope);
        -: 1762:    explicit EscapableHandleScope(Napi::Env env);
        -: 1763:    ~EscapableHandleScope();
        -: 1764:
        -: 1765:    // Disallow copying to prevent double close of napi_escapable_handle_scope
        -: 1766:    EscapableHandleScope(EscapableHandleScope const &) = delete;
        -: 1767:    void operator=(EscapableHandleScope const &) = delete;
        -: 1768:
        -: 1769:    operator napi_escapable_handle_scope() const;
        -: 1770:
        -: 1771:    Napi::Env Env() const;
        -: 1772:    Value Escape(napi_value escapee);
        -: 1773:
        -: 1774:  private:
        -: 1775:    napi_env _env;
        -: 1776:    napi_escapable_handle_scope _scope;
        -: 1777:  };
        -: 1778:
        -: 1779:#if (NAPI_VERSION > 2)
        -: 1780:  class CallbackScope {
        -: 1781:  public:
        -: 1782:    CallbackScope(napi_env env, napi_callback_scope scope);
        -: 1783:    CallbackScope(napi_env env, napi_async_context context);
        -: 1784:    virtual ~CallbackScope();
        -: 1785:
        -: 1786:    // Disallow copying to prevent double close of napi_callback_scope
        -: 1787:    CallbackScope(CallbackScope const &) = delete;
        -: 1788:    void operator=(CallbackScope const &) = delete;
        -: 1789:
        -: 1790:    operator napi_callback_scope() const;
        -: 1791:
        -: 1792:    Napi::Env Env() const;
        -: 1793:
        -: 1794:  private:
        -: 1795:    napi_env _env;
        -: 1796:    napi_callback_scope _scope;
        -: 1797:  };
        -: 1798:#endif
        -: 1799:
        -: 1800:  class AsyncContext {
        -: 1801:  public:
        -: 1802:    explicit AsyncContext(napi_env env, const char* resource_name);
        -: 1803:    explicit AsyncContext(napi_env env, const char* resource_name, const Object& resource);
        -: 1804:    virtual ~AsyncContext();
        -: 1805:
        -: 1806:    AsyncContext(AsyncContext&& other);
        -: 1807:    AsyncContext& operator =(AsyncContext&& other);
        -: 1808:    AsyncContext(const AsyncContext&) = delete;
        -: 1809:    AsyncContext& operator =(AsyncContext&) = delete;
        -: 1810:
        -: 1811:    operator napi_async_context() const;
        -: 1812:
        -: 1813:    Napi::Env Env() const;
        -: 1814:
        -: 1815:  private:
        -: 1816:    napi_env _env;
        -: 1817:    napi_async_context _context;
        -: 1818:  };
        -: 1819:
        -: 1820:  class AsyncWorker {
        -: 1821:  public:
        -: 1822:    virtual ~AsyncWorker();
        -: 1823:
        -: 1824:    // An async worker can be moved but cannot be copied.
        -: 1825:    AsyncWorker(AsyncWorker&& other);
        -: 1826:    AsyncWorker& operator =(AsyncWorker&& other);
        -: 1827:    AsyncWorker(const AsyncWorker&) = delete;
        -: 1828:    AsyncWorker& operator =(AsyncWorker&) = delete;
        -: 1829:
        -: 1830:    operator napi_async_work() const;
        -: 1831:
        -: 1832:    Napi::Env Env() const;
        -: 1833:
        -: 1834:    void Queue();
        -: 1835:    void Cancel();
        -: 1836:    void SuppressDestruct();
        -: 1837:
        -: 1838:    ObjectReference& Receiver();
        -: 1839:    FunctionReference& Callback();
        -: 1840:
        -: 1841:  protected:
        -: 1842:    explicit AsyncWorker(const Function& callback);
        -: 1843:    explicit AsyncWorker(const Function& callback,
        -: 1844:                         const char* resource_name);
        -: 1845:    explicit AsyncWorker(const Function& callback,
        -: 1846:                         const char* resource_name,
        -: 1847:                         const Object& resource);
        -: 1848:    explicit AsyncWorker(const Object& receiver,
        -: 1849:                         const Function& callback);
        -: 1850:    explicit AsyncWorker(const Object& receiver,
        -: 1851:                         const Function& callback,
        -: 1852:                         const char* resource_name);
        -: 1853:    explicit AsyncWorker(const Object& receiver,
        -: 1854:                         const Function& callback,
        -: 1855:                         const char* resource_name,
        -: 1856:                         const Object& resource);
        -: 1857:
        -: 1858:    explicit AsyncWorker(Napi::Env env);
        -: 1859:    explicit AsyncWorker(Napi::Env env,
        -: 1860:                         const char* resource_name);
        -: 1861:    explicit AsyncWorker(Napi::Env env,
        -: 1862:                         const char* resource_name,
        -: 1863:                         const Object& resource);
        -: 1864:
        -: 1865:    virtual void Execute() = 0;
        -: 1866:    virtual void OnOK();
        -: 1867:    virtual void OnError(const Error& e);
        -: 1868:    virtual void Destroy();
        -: 1869:    virtual std::vector<napi_value> GetResult(Napi::Env env);
        -: 1870:
        -: 1871:    void SetError(const std::string& error);
        -: 1872:
        -: 1873:  private:
        -: 1874:    static void OnExecute(napi_env env, void* this_pointer);
        -: 1875:    static void OnWorkComplete(napi_env env,
        -: 1876:                               napi_status status,
        -: 1877:                               void* this_pointer);
        -: 1878:
        -: 1879:    napi_env _env;
        -: 1880:    napi_async_work _work;
        -: 1881:    ObjectReference _receiver;
        -: 1882:    FunctionReference _callback;
        -: 1883:    std::string _error;
        -: 1884:    bool _suppress_destruct;
        -: 1885:  };
        -: 1886:
        -: 1887:  #if (NAPI_VERSION > 3)
        -: 1888:  class ThreadSafeFunction {
        -: 1889:  public:
        -: 1890:    // This API may only be called from the main thread.
        -: 1891:    template <typename ResourceString>
        -: 1892:    static ThreadSafeFunction New(napi_env env,
        -: 1893:                                  const Function& callback,
        -: 1894:                                  ResourceString resourceName,
        -: 1895:                                  size_t maxQueueSize,
        -: 1896:                                  size_t initialThreadCount);
        -: 1897:
        -: 1898:    // This API may only be called from the main thread.
        -: 1899:    template <typename ResourceString, typename ContextType>
        -: 1900:    static ThreadSafeFunction New(napi_env env,
        -: 1901:                                  const Function& callback,
        -: 1902:                                  ResourceString resourceName,
        -: 1903:                                  size_t maxQueueSize,
        -: 1904:                                  size_t initialThreadCount,
        -: 1905:                                  ContextType* context);
        -: 1906:
        -: 1907:    // This API may only be called from the main thread.
        -: 1908:    template <typename ResourceString, typename Finalizer>
        -: 1909:    static ThreadSafeFunction New(napi_env env,
        -: 1910:                                  const Function& callback,
        -: 1911:                                  ResourceString resourceName,
        -: 1912:                                  size_t maxQueueSize,
        -: 1913:                                  size_t initialThreadCount,
        -: 1914:                                  Finalizer finalizeCallback);
        -: 1915:
        -: 1916:    // This API may only be called from the main thread.
        -: 1917:    template <typename ResourceString, typename Finalizer,
        -: 1918:              typename FinalizerDataType>
        -: 1919:    static ThreadSafeFunction New(napi_env env,
        -: 1920:                                  const Function& callback,
        -: 1921:                                  ResourceString resourceName,
        -: 1922:                                  size_t maxQueueSize,
        -: 1923:                                  size_t initialThreadCount,
        -: 1924:                                  Finalizer finalizeCallback,
        -: 1925:                                  FinalizerDataType* data);
        -: 1926:
        -: 1927:    // This API may only be called from the main thread.
        -: 1928:    template <typename ResourceString, typename ContextType, typename Finalizer>
        -: 1929:    static ThreadSafeFunction New(napi_env env,
        -: 1930:                                  const Function& callback,
        -: 1931:                                  ResourceString resourceName,
        -: 1932:                                  size_t maxQueueSize,
        -: 1933:                                  size_t initialThreadCount,
        -: 1934:                                  ContextType* context,
        -: 1935:                                  Finalizer finalizeCallback);
        -: 1936:
        -: 1937:    // This API may only be called from the main thread.
        -: 1938:    template <typename ResourceString, typename ContextType,
        -: 1939:              typename Finalizer, typename FinalizerDataType>
        -: 1940:    static ThreadSafeFunction New(napi_env env,
        -: 1941:                                  const Function& callback,
        -: 1942:                                  ResourceString resourceName,
        -: 1943:                                  size_t maxQueueSize,
        -: 1944:                                  size_t initialThreadCount,
        -: 1945:                                  ContextType* context,
        -: 1946:                                  Finalizer finalizeCallback,
        -: 1947:                                  FinalizerDataType* data);
        -: 1948:
        -: 1949:    // This API may only be called from the main thread.
        -: 1950:    template <typename ResourceString>
        -: 1951:    static ThreadSafeFunction New(napi_env env,
        -: 1952:                                  const Function& callback,
        -: 1953:                                  const Object& resource,
        -: 1954:                                  ResourceString resourceName,
        -: 1955:                                  size_t maxQueueSize,
        -: 1956:                                  size_t initialThreadCount);
        -: 1957:
        -: 1958:    // This API may only be called from the main thread.
        -: 1959:    template <typename ResourceString, typename ContextType>
        -: 1960:    static ThreadSafeFunction New(napi_env env,
        -: 1961:                                  const Function& callback,
        -: 1962:                                  const Object& resource,
        -: 1963:                                  ResourceString resourceName,
        -: 1964:                                  size_t maxQueueSize,
        -: 1965:                                  size_t initialThreadCount,
        -: 1966:                                  ContextType* context);
        -: 1967:
        -: 1968:    // This API may only be called from the main thread.
        -: 1969:    template <typename ResourceString, typename Finalizer>
        -: 1970:    static ThreadSafeFunction New(napi_env env,
        -: 1971:                                  const Function& callback,
        -: 1972:                                  const Object& resource,
        -: 1973:                                  ResourceString resourceName,
        -: 1974:                                  size_t maxQueueSize,
        -: 1975:                                  size_t initialThreadCount,
        -: 1976:                                  Finalizer finalizeCallback);
        -: 1977:
        -: 1978:    // This API may only be called from the main thread.
        -: 1979:    template <typename ResourceString, typename Finalizer,
        -: 1980:              typename FinalizerDataType>
        -: 1981:    static ThreadSafeFunction New(napi_env env,
        -: 1982:                                  const Function& callback,
        -: 1983:                                  const Object& resource,
        -: 1984:                                  ResourceString resourceName,
        -: 1985:                                  size_t maxQueueSize,
        -: 1986:                                  size_t initialThreadCount,
        -: 1987:                                  Finalizer finalizeCallback,
        -: 1988:                                  FinalizerDataType* data);
        -: 1989:
        -: 1990:    // This API may only be called from the main thread.
        -: 1991:    template <typename ResourceString, typename ContextType, typename Finalizer>
        -: 1992:    static ThreadSafeFunction New(napi_env env,
        -: 1993:                                  const Function& callback,
        -: 1994:                                  const Object& resource,
        -: 1995:                                  ResourceString resourceName,
        -: 1996:                                  size_t maxQueueSize,
        -: 1997:                                  size_t initialThreadCount,
        -: 1998:                                  ContextType* context,
        -: 1999:                                  Finalizer finalizeCallback);
        -: 2000:
        -: 2001:    // This API may only be called from the main thread.
        -: 2002:    template <typename ResourceString, typename ContextType,
        -: 2003:              typename Finalizer, typename FinalizerDataType>
        -: 2004:    static ThreadSafeFunction New(napi_env env,
        -: 2005:                                  const Function& callback,
        -: 2006:                                  const Object& resource,
        -: 2007:                                  ResourceString resourceName,
        -: 2008:                                  size_t maxQueueSize,
        -: 2009:                                  size_t initialThreadCount,
        -: 2010:                                  ContextType* context,
        -: 2011:                                  Finalizer finalizeCallback,
        -: 2012:                                  FinalizerDataType* data);
        -: 2013:
        -: 2014:    ThreadSafeFunction();
        -: 2015:    ThreadSafeFunction(napi_threadsafe_function tsFunctionValue);
        -: 2016:
        -: 2017:    operator napi_threadsafe_function() const;
        -: 2018:
        -: 2019:    // This API may be called from any thread.
        -: 2020:    napi_status BlockingCall() const;
        -: 2021:
        -: 2022:    // This API may be called from any thread.
        -: 2023:    template <typename Callback>
        -: 2024:    napi_status BlockingCall(Callback callback) const;
        -: 2025:
        -: 2026:    // This API may be called from any thread.
        -: 2027:    template <typename DataType, typename Callback>
        -: 2028:    napi_status BlockingCall(DataType* data, Callback callback) const;
        -: 2029:
        -: 2030:    // This API may be called from any thread.
        -: 2031:    napi_status NonBlockingCall() const;
        -: 2032:
        -: 2033:    // This API may be called from any thread.
        -: 2034:    template <typename Callback>
        -: 2035:    napi_status NonBlockingCall(Callback callback) const;
        -: 2036:
        -: 2037:    // This API may be called from any thread.
        -: 2038:    template <typename DataType, typename Callback>
        -: 2039:    napi_status NonBlockingCall(DataType* data, Callback callback) const;
        -: 2040:
        -: 2041:    // This API may only be called from the main thread.
        -: 2042:    void Ref(napi_env env) const;
        -: 2043:
        -: 2044:    // This API may only be called from the main thread.
        -: 2045:    void Unref(napi_env env) const;
        -: 2046:
        -: 2047:    // This API may be called from any thread.
        -: 2048:    napi_status Acquire() const;
        -: 2049:
        -: 2050:    // This API may be called from any thread.
        -: 2051:    napi_status Release();
        -: 2052:
        -: 2053:    // This API may be called from any thread.
        -: 2054:    napi_status Abort();
        -: 2055:
        -: 2056:    struct ConvertibleContext
        -: 2057:    {
        -: 2058:      template <class T>
        -: 2059:      operator T*() { return static_cast<T*>(context); }
        -: 2060:      void* context;
        -: 2061:    };
        -: 2062:
        -: 2063:    // This API may be called from any thread.
        -: 2064:    ConvertibleContext GetContext() const;
        -: 2065:
        -: 2066:  private:
        -: 2067:    using CallbackWrapper = std::function<void(Napi::Env, Napi::Function)>;
        -: 2068:
        -: 2069:    template <typename ResourceString, typename ContextType,
        -: 2070:              typename Finalizer, typename FinalizerDataType>
        -: 2071:    static ThreadSafeFunction New(napi_env env,
        -: 2072:                                  const Function& callback,
        -: 2073:                                  const Object& resource,
        -: 2074:                                  ResourceString resourceName,
        -: 2075:                                  size_t maxQueueSize,
        -: 2076:                                  size_t initialThreadCount,
        -: 2077:                                  ContextType* context,
        -: 2078:                                  Finalizer finalizeCallback,
        -: 2079:                                  FinalizerDataType* data,
        -: 2080:                                  napi_finalize wrapper);
        -: 2081:
        -: 2082:    napi_status CallInternal(CallbackWrapper* callbackWrapper,
        -: 2083:                        napi_threadsafe_function_call_mode mode) const;
        -: 2084:
        -: 2085:    static void CallJS(napi_env env,
        -: 2086:                       napi_value jsCallback,
        -: 2087:                       void* context,
        -: 2088:                       void* data);
        -: 2089:
        -: 2090:    napi_threadsafe_function _tsfn;
        -: 2091:  };
        -: 2092:
        -: 2093:  template<class T>
        -: 2094:  class AsyncProgressWorker : public AsyncWorker {
        -: 2095:    public:
        -: 2096:     virtual ~AsyncProgressWorker();
        -: 2097:
        -: 2098:     class ExecutionProgress {
        -: 2099:        friend class AsyncProgressWorker;
        -: 2100:       public:
        -: 2101:        void Signal() const;
        -: 2102:        void Send(const T* data, size_t count) const;
        -: 2103:       private:
        -: 2104:        explicit ExecutionProgress(AsyncProgressWorker* worker) : _worker(worker) {}
        -: 2105:        AsyncProgressWorker* const _worker;
        -: 2106:     };
        -: 2107:
        -: 2108:    protected:
        -: 2109:    explicit AsyncProgressWorker(const Function& callback);
        -: 2110:    explicit AsyncProgressWorker(const Function& callback,
        -: 2111:                         const char* resource_name);
        -: 2112:    explicit AsyncProgressWorker(const Function& callback,
        -: 2113:                         const char* resource_name,
        -: 2114:                         const Object& resource);
        -: 2115:    explicit AsyncProgressWorker(const Object& receiver,
        -: 2116:                         const Function& callback);
        -: 2117:    explicit AsyncProgressWorker(const Object& receiver,
        -: 2118:                         const Function& callback,
        -: 2119:                         const char* resource_name);
        -: 2120:    explicit AsyncProgressWorker(const Object& receiver,
        -: 2121:                         const Function& callback,
        -: 2122:                         const char* resource_name,
        -: 2123:                         const Object& resource);
        -: 2124:
        -: 2125:// Optional callback of Napi::ThreadSafeFunction only available after NAPI_VERSION 4.
        -: 2126:// Refs: https://github.com/nodejs/node/pull/27791
        -: 2127:#if NAPI_VERSION > 4
        -: 2128:    explicit AsyncProgressWorker(Napi::Env env);
        -: 2129:    explicit AsyncProgressWorker(Napi::Env env,
        -: 2130:                         const char* resource_name);
        -: 2131:    explicit AsyncProgressWorker(Napi::Env env,
        -: 2132:                         const char* resource_name,
        -: 2133:                         const Object& resource);
        -: 2134:#endif
        -: 2135:
        -: 2136:     virtual void Execute(const ExecutionProgress& progress) = 0;
        -: 2137:     virtual void OnProgress(const T* data, size_t count) = 0;
        -: 2138:
        -: 2139:    private:
        -: 2140:     static void WorkProgress_(Napi::Env env, Napi::Function jsCallback, void* data);
        -: 2141:
        -: 2142:     void Execute() override;
        -: 2143:     void Signal() const;
        -: 2144:     void SendProgress_(const T* data, size_t count);
        -: 2145:
        -: 2146:     std::mutex _mutex;
        -: 2147:     T* _asyncdata;
        -: 2148:     size_t _asyncsize;
        -: 2149:     ThreadSafeFunction _tsfn;
        -: 2150:  };
        -: 2151:  #endif
        -: 2152:
        -: 2153:  // Memory management.
        -: 2154:  class MemoryManagement {
        -: 2155:    public:
        -: 2156:      static int64_t AdjustExternalMemory(Env env, int64_t change_in_bytes);
        -: 2157:  };
        -: 2158:
        -: 2159:  // Version management
        -: 2160:  class VersionManagement {
        -: 2161:    public:
        -: 2162:      static uint32_t GetNapiVersion(Env env);
        -: 2163:      static const napi_node_version* GetNodeVersion(Env env);
        -: 2164:  };
        -: 2165:
        -: 2166:} // namespace Napi
        -: 2167:
        -: 2168:// Inline implementations of all the above class methods are included here.
        -: 2169:#include "napi-inl.h"
        -: 2170:
        -: 2171:#endif // SRC_NAPI_H_
