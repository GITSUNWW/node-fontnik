        -:    0:Source:/home/travis/build/GITSUNWW/node-fontnik/mason_packages/.link/include/boost/geometry/index/detail/rtree/node/variant_static.hpp
        -:    0:Graph:/home/travis/build/GITSUNWW/node-fontnik/build/Debug/obj.target/fontnik/src/glyphs.gcno
        -:    0:Data:/home/travis/build/GITSUNWW/node-fontnik/build/Debug/obj.target/fontnik/src/glyphs.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Boost.Geometry Index
        -:    2://
        -:    3:// R-tree nodes based on Boost.Variant, storing static-size containers
        -:    4://
        -:    5:// Copyright (c) 2011-2018 Adam Wulkiewicz, Lodz, Poland.
        -:    6://
        -:    7:// Use, modification and distribution is subject to the Boost Software License,
        -:    8:// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
        -:    9:// http://www.boost.org/LICENSE_1_0.txt)
        -:   10:
        -:   11:#ifndef BOOST_GEOMETRY_INDEX_DETAIL_RTREE_NODE_VARIANT_STATIC_HPP
        -:   12:#define BOOST_GEOMETRY_INDEX_DETAIL_RTREE_NODE_VARIANT_STATIC_HPP
        -:   13:
        -:   14:namespace boost { namespace geometry { namespace index {
        -:   15:
        -:   16:namespace detail { namespace rtree {
        -:   17:
        -:   18:// nodes default types
        -:   19:
        -:   20:template <typename Value, typename Parameters, typename Box, typename Allocators>
        -:   21:struct variant_internal_node<Value, Parameters, Box, Allocators, node_variant_static_tag>
        -:   22:{
        -:   23:    typedef detail::varray<
        -:   24:        rtree::ptr_pair<Box, typename Allocators::node_pointer>,
        -:   25:        Parameters::max_elements + 1
        -:   26:    > elements_type;
        -:   27:
        -:   28:    template <typename Alloc>
function _ZN5boost8geometry5index6detail5rtree21variant_internal_nodeISt4pairINS0_5model3boxINS6_5pointIfLm2ENS0_2cs9cartesianEEEEES5_ISB_SB_EENS1_5rstarILm16ELm4ELm4ELm32EEESC_NS3_10allocatorsINS_9container13new_allocatorISE_EESE_SG_SC_NS3_23node_variant_static_tagEEESL_EC2INSJ_INS_7variantINS3_12variant_leafISE_SG_SC_SM_SL_EEJSN_EEEEEEERKT_ called 1323 returned 100% blocks executed 100%
     1323:   29:    inline variant_internal_node(Alloc const&) {}
        -:   30:
        -:   31:    elements_type elements;
        -:   32:};
        -:   33:
        -:   34:template <typename Value, typename Parameters, typename Box, typename Allocators>
        -:   35:struct variant_leaf<Value, Parameters, Box, Allocators, node_variant_static_tag>
        -:   36:{
        -:   37:    typedef detail::varray<
        -:   38:        Value,
        -:   39:        Parameters::max_elements + 1
        -:   40:    > elements_type;
        -:   41:
        -:   42:    template <typename Alloc>
function _ZN5boost8geometry5index6detail5rtree12variant_leafISt4pairINS0_5model3boxINS6_5pointIfLm2ENS0_2cs9cartesianEEEEES5_ISB_SB_EENS1_5rstarILm16ELm4ELm4ELm32EEESC_NS3_10allocatorsINS_9container13new_allocatorISE_EESE_SG_SC_NS3_23node_variant_static_tagEEESL_EC2INSJ_INS_7variantISN_JNS3_21variant_internal_nodeISE_SG_SC_SM_SL_EEEEEEEEERKT_ called 6627 returned 100% blocks executed 100%
     6627:   43:    inline variant_leaf(Alloc const&) {}
        -:   44:
        -:   45:    elements_type elements;
        -:   46:};
        -:   47:
        -:   48:// nodes traits
        -:   49:
        -:   50:template <typename Value, typename Parameters, typename Box, typename Allocators>
        -:   51:struct node<Value, Parameters, Box, Allocators, node_variant_static_tag>
        -:   52:{
        -:   53:    typedef boost::variant<
        -:   54:        variant_leaf<Value, Parameters, Box, Allocators, node_variant_static_tag>,
        -:   55:        variant_internal_node<Value, Parameters, Box, Allocators, node_variant_static_tag>
        -:   56:    > type;
        -:   57:};
        -:   58:
        -:   59:template <typename Value, typename Parameters, typename Box, typename Allocators>
        -:   60:struct internal_node<Value, Parameters, Box, Allocators, node_variant_static_tag>
        -:   61:{
        -:   62:    typedef variant_internal_node<Value, Parameters, Box, Allocators, node_variant_static_tag> type;
        -:   63:};
        -:   64:
        -:   65:template <typename Value, typename Parameters, typename Box, typename Allocators>
        -:   66:struct leaf<Value, Parameters, Box, Allocators, node_variant_static_tag>
        -:   67:{
        -:   68:    typedef variant_leaf<Value, Parameters, Box, Allocators, node_variant_static_tag> type;
        -:   69:};
        -:   70:
        -:   71:// visitor traits
        -:   72:
        -:   73:template <typename Value, typename Parameters, typename Box, typename Allocators, bool IsVisitableConst>
        -:   74:struct visitor<Value, Parameters, Box, Allocators, node_variant_static_tag, IsVisitableConst>
        -:   75:{
        -:   76:    typedef static_visitor<> type;
        -:   77:};
        -:   78:
        -:   79:// allocators
        -:   80:
        -:   81:template <typename Allocator, typename Value, typename Parameters, typename Box>
        -:   82:class allocators<Allocator, Value, Parameters, Box, node_variant_static_tag>
        -:   83:    : public detail::rtree::node_alloc
        -:   84:        <
        -:   85:            Allocator, Value, Parameters, Box, node_variant_static_tag
        -:   86:        >::type
        -:   87:{
        -:   88:    typedef detail::rtree::node_alloc
        -:   89:        <
        -:   90:            Allocator, Value, Parameters, Box, node_variant_static_tag
        -:   91:        > node_alloc;
        -:   92:
        -:   93:public:
        -:   94:    typedef typename node_alloc::type node_allocator_type;
        -:   95:    typedef typename node_alloc::traits::pointer node_pointer;
        -:   96:
        -:   97:private:
        -:   98:    typedef typename boost::container::allocator_traits
        -:   99:        <
        -:  100:            node_allocator_type
        -:  101:        >::template rebind_alloc<Value> value_allocator_type;
        -:  102:    typedef boost::container::allocator_traits<value_allocator_type> value_allocator_traits;
        -:  103:
        -:  104:public:
        -:  105:    typedef Allocator allocator_type;
        -:  106:
        -:  107:    typedef Value value_type;
        -:  108:    typedef typename value_allocator_traits::reference reference;
        -:  109:    typedef typename value_allocator_traits::const_reference const_reference;
        -:  110:    typedef typename value_allocator_traits::size_type size_type;
        -:  111:    typedef typename value_allocator_traits::difference_type difference_type;
        -:  112:    typedef typename value_allocator_traits::pointer pointer;
        -:  113:    typedef typename value_allocator_traits::const_pointer const_pointer;
        -:  114:
function _ZN5boost8geometry5index6detail5rtree10allocatorsINS_9container13new_allocatorISt4pairINS0_5model3boxINS8_5pointIfLm2ENS0_2cs9cartesianEEEEES7_ISD_SD_EEEESG_NS1_5rstarILm16ELm4ELm4ELm32EEESE_NS3_23node_variant_static_tagEEC2Ev called 1674 returned 100% blocks executed 100%
     1674:  115:    inline allocators()
     1674:  116:        : node_allocator_type()
     3348:  117:    {}
        -:  118:
        -:  119:    template <typename Alloc>
        -:  120:    inline explicit allocators(Alloc const& alloc)
        -:  121:        : node_allocator_type(alloc)
        -:  122:    {}
        -:  123:
        -:  124:    inline allocators(BOOST_FWD_REF(allocators) a)
        -:  125:        : node_allocator_type(boost::move(a.node_allocator()))
        -:  126:    {}
        -:  127:
        -:  128:    inline allocators & operator=(BOOST_FWD_REF(allocators) a)
        -:  129:    {
        -:  130:        node_allocator() = boost::move(a.node_allocator());
        -:  131:        return *this;
        -:  132:    }
        -:  133:
        -:  134:#ifndef BOOST_NO_CXX11_RVALUE_REFERENCES
        -:  135:    inline allocators & operator=(allocators const& a)
        -:  136:    {
        -:  137:        node_allocator() = a.node_allocator();
        -:  138:        return *this;
        -:  139:    }
        -:  140:#endif
        -:  141:
        -:  142:    void swap(allocators & a)
        -:  143:    {
        -:  144:        boost::swap(node_allocator(), a.node_allocator());
        -:  145:    }
        -:  146:
        -:  147:    bool operator==(allocators const& a) const { return node_allocator() == a.node_allocator(); }
        -:  148:    template <typename Alloc>
        -:  149:    bool operator==(Alloc const& a) const { return node_allocator() == node_allocator_type(a); }
        -:  150:
        -:  151:    Allocator allocator() const { return Allocator(node_allocator()); }
        -:  152:
function _ZN5boost8geometry5index6detail5rtree10allocatorsINS_9container13new_allocatorISt4pairINS0_5model3boxINS8_5pointIfLm2ENS0_2cs9cartesianEEEEES7_ISD_SD_EEEESG_NS1_5rstarILm16ELm4ELm4ELm32EEESE_NS3_23node_variant_static_tagEE14node_allocatorEv called 15899 returned 100% blocks executed 100%
    15899:  153:    node_allocator_type & node_allocator() { return *this; }
        -:  154:    node_allocator_type const& node_allocator() const { return *this; }
        -:  155:};
        -:  156:
        -:  157:}} // namespace detail::rtree
        -:  158:
        -:  159:}}} // namespace boost::geometry::index
        -:  160:
        -:  161:#endif // BOOST_GEOMETRY_INDEX_DETAIL_RTREE_NODE_VARIANT_STATIC_HPP
