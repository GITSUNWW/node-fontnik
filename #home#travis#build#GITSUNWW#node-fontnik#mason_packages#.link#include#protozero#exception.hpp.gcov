        -:    0:Source:/home/travis/build/GITSUNWW/node-fontnik/mason_packages/.link/include/protozero/exception.hpp
        -:    0:Graph:/home/travis/build/GITSUNWW/node-fontnik/build/Debug/obj.target/fontnik/src/glyphs.gcno
        -:    0:Data:/home/travis/build/GITSUNWW/node-fontnik/build/Debug/obj.target/fontnik/src/glyphs.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#ifndef PROTOZERO_EXCEPTION_HPP
        -:    2:#define PROTOZERO_EXCEPTION_HPP
        -:    3:
        -:    4:/*****************************************************************************
        -:    5:
        -:    6:protozero - Minimalistic protocol buffer decoder and encoder in C++.
        -:    7:
        -:    8:This file is from https://github.com/mapbox/protozero where you can find more
        -:    9:documentation.
        -:   10:
        -:   11:*****************************************************************************/
        -:   12:
        -:   13:/**
        -:   14: * @file exception.hpp
        -:   15: *
        -:   16: * @brief Contains the exceptions used in the protozero library.
        -:   17: */
        -:   18:
        -:   19:#include <exception>
        -:   20:
        -:   21:/**
        -:   22: * @brief All parts of the protozero header-only library are in this namespace.
        -:   23: */
        -:   24:namespace protozero {
        -:   25:
        -:   26:/**
        -:   27: * All exceptions explicitly thrown by the functions of the protozero library
        -:   28: * derive from this exception.
        -:   29: */
function _ZN9protozero9exceptionC2Ev called 0 returned 0% blocks executed 0%
function _ZN9protozero9exceptionD2Ev called 0 returned 0% blocks executed 0%
function _ZN9protozero9exceptionD0Ev called 0 returned 0% blocks executed 0%
    #####:   30:struct exception : std::exception {
        -:   31:    /// Returns the explanatory string.
function _ZNK9protozero9exception4whatEv called 0 returned 0% blocks executed 0%
    #####:   32:    const char* what() const noexcept override {
    #####:   33:        return "pbf exception";
        -:   34:    }
        -:   35:};
        -:   36:
        -:   37:/**
        -:   38: * This exception is thrown when parsing a varint thats larger than allowed.
        -:   39: * This should never happen unless the data is corrupted.
        -:   40: */
function _ZN9protozero25varint_too_long_exceptionC2Ev called 0 returned 0% blocks executed 0%
function _ZN9protozero25varint_too_long_exceptionD2Ev called 0 returned 0% blocks executed 0%
function _ZN9protozero25varint_too_long_exceptionD0Ev called 0 returned 0% blocks executed 0%
    #####:   41:struct varint_too_long_exception : exception {
        -:   42:    /// Returns the explanatory string.
function _ZNK9protozero25varint_too_long_exception4whatEv called 0 returned 0% blocks executed 0%
    #####:   43:    const char* what() const noexcept override {
    #####:   44:        return "varint too long exception";
        -:   45:    }
        -:   46:};
        -:   47:
        -:   48:/**
        -:   49: * This exception is thrown when the wire type of a pdf field is unknown.
        -:   50: * This should never happen unless the data is corrupted.
        -:   51: */
function _ZN9protozero31unknown_pbf_wire_type_exceptionC2Ev called 0 returned 0% blocks executed 0%
function _ZN9protozero31unknown_pbf_wire_type_exceptionD2Ev called 0 returned 0% blocks executed 0%
function _ZN9protozero31unknown_pbf_wire_type_exceptionD0Ev called 0 returned 0% blocks executed 0%
    #####:   52:struct unknown_pbf_wire_type_exception : exception {
        -:   53:    /// Returns the explanatory string.
function _ZNK9protozero31unknown_pbf_wire_type_exception4whatEv called 0 returned 0% blocks executed 0%
    #####:   54:    const char* what() const noexcept override {
    #####:   55:        return "unknown pbf field type exception";
        -:   56:    }
        -:   57:};
        -:   58:
        -:   59:/**
        -:   60: * This exception is thrown when we are trying to read a field and there
        -:   61: * are not enough bytes left in the buffer to read it. Almost all functions
        -:   62: * of the pbf_reader class can throw this exception.
        -:   63: *
        -:   64: * This should never happen unless the data is corrupted or you have
        -:   65: * initialized the pbf_reader object with incomplete data.
        -:   66: */
function _ZN9protozero23end_of_buffer_exceptionC2Ev called 0 returned 0% blocks executed 0%
function _ZN9protozero23end_of_buffer_exceptionD2Ev called 0 returned 0% blocks executed 0%
function _ZN9protozero23end_of_buffer_exceptionD0Ev called 0 returned 0% blocks executed 0%
    #####:   67:struct end_of_buffer_exception : exception {
        -:   68:    /// Returns the explanatory string.
function _ZNK9protozero23end_of_buffer_exception4whatEv called 0 returned 0% blocks executed 0%
    #####:   69:    const char* what() const noexcept override {
    #####:   70:        return "end of buffer exception";
        -:   71:    }
        -:   72:};
        -:   73:
        -:   74:/**
        -:   75: * This exception is thrown when a tag has an invalid value. Tags must be
        -:   76: * unsigned integers between 1 and 2^29-1. Tags between 19000 and 19999 are
        -:   77: * not allowed. See
        -:   78: * https://developers.google.com/protocol-buffers/docs/proto#assigning-tags
        -:   79: */
function _ZN9protozero21invalid_tag_exceptionC2Ev called 0 returned 0% blocks executed 0%
function _ZN9protozero21invalid_tag_exceptionD2Ev called 0 returned 0% blocks executed 0%
function _ZN9protozero21invalid_tag_exceptionD0Ev called 0 returned 0% blocks executed 0%
    #####:   80:struct invalid_tag_exception : exception {
        -:   81:    /// Returns the explanatory string.
function _ZNK9protozero21invalid_tag_exception4whatEv called 0 returned 0% blocks executed 0%
    #####:   82:    const char* what() const noexcept override {
    #####:   83:        return "invalid tag exception";
        -:   84:    }
        -:   85:};
        -:   86:
        -:   87:/**
        -:   88: * This exception is thrown when a length field of a packed repeated field is
        -:   89: * invalid. For fixed size types the length must be a multiple of the size of
        -:   90: * the type.
        -:   91: */
        -:   92:struct invalid_length_exception : exception {
        -:   93:    /// Returns the explanatory string.
        -:   94:    const char* what() const noexcept override {
        -:   95:        return "invalid length exception";
        -:   96:    }
        -:   97:};
        -:   98:
        -:   99:} // end namespace protozero
        -:  100:
        -:  101:#endif // PROTOZERO_EXCEPTION_HPP
