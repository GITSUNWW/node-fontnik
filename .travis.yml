language: node_js

sudo: false

# enable c++11/14 builds
addons:
  apt:
    sources: [ 'ubuntu-toolchain-r-test' ]
    packages: [ 'libstdc++-4.9-dev' ]

install:
  # set up the environment by installing mason and clang++
  - ./scripts/setup.sh --config local.env
  # put mason and clang++ on PATH
  - source local.env
  - node -v
  - which node
  - clang++ -v
  - which clang++
  - make ${BUILDTYPE}

# *Here we run tests*
# We prefer running tests in the 'before_script' section rather than 'script' to ensure fast failure.
# Be aware that if you use the 'script' section it will continue running all commands in the section even if one line fails.
# This is documented at https://docs.travis-ci.com/user/customizing-the-build#Breaking-the-Build
# We don't want this behavior because otherwise we might risk publishing builds when the tests did not pass.
# For this reason, we disable the 'script' section below, since we prefer using 'before_script'.
before_script:
  - npm test
  # after successful tests, publish binaries if specified in commit message
  - ./scripts/publish.sh --toolset=${TOOLSET:-} --debug=$([ "${BUILDTYPE}" == 'debug' ] && echo "true" || echo "false")

# We set 'script' here to an empty array to prevent this section from automatically running 'npm test'
# The reason we do this is mentioned above in the comment about the 'before_script' stage.
# For reference, the default travis behavior which we override comes from https://github.com/travis-ci/travis-build/blob/e5a45cbf49e0d9e27398e76e5f25dd7706feb6aa/lib/travis/build/script/node_js.rb#L62-L69.
script:

# the matrix allows you to specify different operating systems and environments to
# run your tests and build binaries
matrix:
  include:
    # linux publishable node v8
    - os: linux
      env: BUILDTYPE=release
      node_js: 8
    
    # g++ build (default builds all use clang++)
    - os: linux
      # Note: -fext-numeric-literals is needed to workaround gcc bug:
      # boost/math/constants/constants.hpp:269:3: error: unable to find numeric literal operator 'operatorQ'
      env: BUILDTYPE=debug CXX="g++-6" CC="gcc-6" CXXFLAGS="-fext-numeric-literals"
      node_js: 10
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - libstdc++-6-dev
            - g++-6
      # Overrides `install` to avoid initializing clang toolchain
      install:
        - make ${BUILDTYPE}
      # Overrides `script` to disable publishing
      before_script:
        - npm test
    # Coverage build
    - os: linux
      env: BUILDTYPE=debug CXXFLAGS="--coverage" LDFLAGS="--coverage"
      node_js: 10
      # Overrides `script` to publish coverage data to codecov
      before_script:
        - npm test
        - mason install llvm-cov ${MASON_LLVM_RELEASE}
        - mason link llvm-cov ${MASON_LLVM_RELEASE}
        - which llvm-cov
        - pip install --user codecov
        - codecov --gcov-exec "llvm-cov gcov"
      # avoid double-run of npm test
      script:
        - true
    # Clang format build
    - os: linux
      # can be generic since we don't need nodejs to run formatting
      language: generic
      env: CLANG_FORMAT
      # Overrides `install` to avoid initializing clang toolchain
      install:
        # Run the clang-format script. Any code formatting changes
        # will trigger the build to fail (idea here is to get us to pay attention
        # and get in the habit of running these locally before committing)
        - make format
      # Overrides `script`, no need to run tests
      before_script:
    # Clang tidy build
    # - os: linux
    #   env: CLANG_TIDY
    #   node_js: 10
    #   # Overrides `install` to avoid initializing clang toolchain
    #   install:
    #     # First run the clang-tidy target
    #     # Any code formatting fixes automatically applied by clang-tidy
    #     # will trigger the build to fail (idea here is to get us to pay attention
    #     # and get in the habit of running these locally before committing)
    #     - make tidy
    #   # Overrides `script`, no need to run tests
    #   before_script:
#deploy:
  #provider: pages
  #skip-cleanup: true
  #github-token: $GH_TOKEN # github 上的token环境变量
  #local-dir: ./_MYOUTPUT/ ## 根据情况自定义到静态文件输出目录
  #target-branch: gh-pages
  #verbose: true
  #on:
    #branch: master
after_script:
  - node fontbuilder.js
  - ls -a
  - rm -rf .git --如果推送整个目录则需要删除.git文件，如果只推送构建后的文件目录dist则cd ./dist就行，不需要删除.git文件，否则最后一句git push会推送不上
  - ls -a
  - git init
  - git config user.name "${U_NAME}"
  - git config user.email "${U_EMAIL}"
  - git add .
  - git commit -m "commit 111"
  - git status
  - git push --force --quiet "https://${GH_TOKEN}@${GH_REF}" master:dev
